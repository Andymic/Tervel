Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 21.16      0.11     0.11   215534     0.00     0.00  std::__atomic_base<long>::fetch_add(long, std::memory_order)
 19.23      0.21     0.10    53502     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::get_position(long)
  9.62      0.26     0.05    22533     0.00     0.01  tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*)
  7.69      0.30     0.04    62217     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const
  5.77      0.33     0.03    74673     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order)
  5.77      0.36     0.03    71852     0.00     0.00  tervel::util::memory::rc::unwatch(tervel::util::Descriptor*)
  3.85      0.38     0.02   173931     0.00     0.00  tervel::util::memory::rc::is_watched(tervel::util::Descriptor*)
  3.85      0.40     0.02   127438     0.00     0.00  tervel::util::memory::rc::PoolElement::next()
  3.85      0.42     0.02    55290     0.00     0.01  tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long)
  1.92      0.43     0.01   370725     0.00     0.00  std::__atomic_base<long>::load(std::memory_order) const
  1.92      0.44     0.01   148119     0.00     0.00  tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool)
  1.92      0.45     0.01    65536     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  1.92      0.46     0.01    61892     0.00     0.00  std::__atomic_base<void*>::load(std::memory_order) const
  1.92      0.47     0.01    60636     0.00     0.00  tervel::util::memory::rc::unmark_first(void*)
  1.92      0.48     0.01    18225     0.00     0.00  tervel::wf_ring_buffer::Node<long>::val()
  1.92      0.49     0.01    16277     0.00     0.00  std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const
  1.92      0.50     0.01                             std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
  0.96      0.51     0.01   745193     0.00     0.00  tervel::util::memory::rc::PoolElement::header()
  0.96      0.51     0.01   401456     0.00     0.00  tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*)
  0.96      0.52     0.01   144812     0.00     0.00  tervel::util::memory::rc::DescriptorPool::get_from_pool(bool)
  0.96      0.52     0.01        3     1.67     1.67  tervel::util::memory::rc::DescriptorPool::reserve(int)
  0.00      0.52     0.00   543369     0.00     0.00  long& std::forward<long&>(std::remove_reference<long&>::type&)
  0.00      0.52     0.00   396021     0.00     0.00  tervel::util::memory::rc::PoolElement::descriptor()
  0.00      0.52     0.00   204918     0.00     0.00  tervel::ThreadContext::get_rc_descriptor_pool()
  0.00      0.52     0.00   164026     0.00     0.00  tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*)
  0.00      0.52     0.00   160440     0.00     0.00  std::__atomic_base<long>::operator long() const
  0.00      0.52     0.00   146640     0.00     0.00  operator new(unsigned long, void*)
  0.00      0.52     0.00   146258     0.00     0.00  tervel::util::Descriptor::Descriptor()
  0.00      0.52     0.00   142685     0.00     0.00  tervel::wf_ring_buffer::Node<long>::Node(long, long)
  0.00      0.52     0.00   111063     0.00     0.00  tervel::wf_ring_buffer::Node<long>::seq()
  0.00      0.52     0.00    83917     0.00     0.00  tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool)
  0.00      0.52     0.00    81537     0.00     0.00  tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long)
  0.00      0.52     0.00    80329     0.00     0.00  tervel::ThreadContext::delay_count(unsigned long)
  0.00      0.52     0.00    77610     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  0.00      0.52     0.00    76660     0.00     0.00  std::__cmpexch_failure_order(std::memory_order)
  0.00      0.52     0.00    76581     0.00     0.00  tervel::util::ProgressAssurance::p_check_for_announcement()
  0.00      0.52     0.00    74810     0.00     0.00  tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*)
  0.00      0.52     0.00    72392     0.00     0.00  tervel::util::memory::rc::PoolElement::cleanup_descriptor()
  0.00      0.52     0.00    70875     0.00     0.00  tervel::ThreadContext::get_progress_assurance()
  0.00      0.52     0.00    68585     0.00     0.00  tervel::wf_ring_buffer::Node<long>::~Node()
  0.00      0.52     0.00    68110     0.00     0.00  tervel::util::memory::rc::DescriptorPool::add_to_safe(tervel::util::Descriptor*)
  0.00      0.52     0.00    68026     0.00     0.00  long&& std::forward<long>(std::remove_reference<long>::type&)
  0.00      0.52     0.00    66480     0.00     0.00  tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool)
  0.00      0.52     0.00    65544     0.00     0.00  std::atomic<long>::atomic(long)
  0.00      0.52     0.00    65543     0.00     0.00  tervel::util::memory::rc::PoolElement::Header::Header()
  0.00      0.52     0.00    65543     0.00     0.00  std::__atomic_base<long>::__atomic_base(long)
  0.00      0.52     0.00    65541     0.00     0.00  tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*)
  0.00      0.52     0.00    65536     0.00     0.00  void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&)
  0.00      0.52     0.00    65536     0.00     0.00  _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_
  0.00      0.52     0.00    65536     0.00     0.00  _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_
  0.00      0.52     0.00    65536     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base()
  0.00      0.52     0.00    65536     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  0.00      0.52     0.00    65536     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic()
  0.00      0.52     0.00    65434     0.00     0.00  tervel::util::Descriptor::on_is_watched()
  0.00      0.52     0.00    64328     0.00     0.00  tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*)
  0.00      0.52     0.00    63370     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const
  0.00      0.52     0.00    62554     0.00     0.00  tervel::util::Descriptor::~Descriptor()
  0.00      0.52     0.00    60693     0.00     0.00  std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*)
  0.00      0.52     0.00    60089     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*)
  0.00      0.52     0.00    59862     0.00     0.00  tervel::util::Descriptor::on_unwatch()
  0.00      0.52     0.00    59468     0.00     0.00  tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*)
  0.00      0.52     0.00    59332     0.00     0.00  std::atomic<void*>::load(std::memory_order) const
  0.00      0.52     0.00    59069     0.00     0.00  void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&)
  0.00      0.52     0.00    55053     0.00     0.00  tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&)
  0.00      0.52     0.00    54450     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::is_full()
  0.00      0.52     0.00    53275     0.00     0.00  _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer8ElemNodeIlEEJRlS7_EEEPT_DpOT0_
  0.00      0.52     0.00    50152     0.00     0.00  tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode()
  0.00      0.52     0.00    49127     0.00     0.01  tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long)
  0.00      0.52     0.00    47383     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq()
  0.00      0.52     0.00    46824     0.00     0.00  tervel::util::Descriptor::on_watch(std::atomic<void*>*, void*)
  0.00      0.52     0.00    45350     0.00     0.00  tervel::wf_ring_buffer::EmptyNode<long>::~EmptyNode()
  0.00      0.52     0.00    31625     0.00     0.00  std::__atomic_base<bool>::load(std::memory_order) const
  0.00      0.52     0.00    26218     0.00     0.00  std::atomic_bool::load(std::memory_order) const
  0.00      0.52     0.00    23958     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::is_empty()
  0.00      0.52     0.00    22885     0.00     0.00  void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&)
  0.00      0.52     0.00    21929     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq()
  0.00      0.52     0.00    20548     0.00     0.00  _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_
  0.00      0.52     0.00    20061     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const
  0.00      0.52     0.00    19386     0.00     0.00  tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode()
  0.00      0.52     0.00    18695     0.00     0.00  _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_
  0.00      0.52     0.00    17720     0.00     0.00  tervel::util::memory::rc::DescriptorPool::add_to_unsafe(tervel::util::Descriptor*)
  0.00      0.52     0.00    16952     0.00     0.01  tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*)
  0.00      0.52     0.00    14650     0.00     0.00  tervel::wf_ring_buffer::ElemNode<long>::on_watch(std::atomic<void*>*, void*)
  0.00      0.52     0.00    13813     0.00     0.00  tervel::wf_ring_buffer::ElemNode<long>::~ElemNode()
  0.00      0.52     0.00       99     0.00     0.00  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&)
  0.00      0.52     0.00       81     0.00     0.00  TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&)
  0.00      0.52     0.00       73     0.00     0.00  tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&)
  0.00      0.52     0.00       47     0.00     0.00  int& std::forward<int&>(std::remove_reference<int&>::type&)
  0.00      0.52     0.00       40     0.00     0.00  std::thread::id::id()
  0.00      0.52     0.00       39     0.00     0.00  std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)
  0.00      0.52     0.00       39     0.00     0.00  void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
  0.00      0.52     0.00       35     0.00     0.00  std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&)
  0.00      0.52     0.00       24     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator()
  0.00      0.52     0.00       23     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator()
  0.00      0.52     0.00       22     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.52     0.00       22     0.00     0.00  std::move_iterator<std::thread*>::base() const
  0.00      0.52     0.00       22     0.00     0.00  std::thread* std::__addressof<std::thread>(std::thread&)
  0.00      0.52     0.00       21     0.00     0.00  __gthread_equal(unsigned long, unsigned long)
  0.00      0.52     0.00       21     0.00     0.00  std::thread::joinable() const
  0.00      0.52     0.00       21     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.52     0.00       21     0.00     0.00  std::thread::~thread()
  0.00      0.52     0.00       21     0.00     0.00  std::operator==(std::thread::id, std::thread::id)
  0.00      0.52     0.00       20     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::size() const
  0.00      0.52     0.00       20     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&)
  0.00      0.52     0.00       20     0.00     0.00  int&& std::forward<int>(std::remove_reference<int>::type&)
  0.00      0.52     0.00       19     0.00     0.00  std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&)
  0.00      0.52     0.00       18     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const
  0.00      0.52     0.00       16     0.00     0.00  std::__atomic_base<int>::load(std::memory_order) const
  0.00      0.52     0.00       16     0.00     0.00  std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*)
  0.00      0.52     0.00       16     0.00     0.00  std::__atomic_base<void*>::__atomic_base()
  0.00      0.52     0.00       16     0.00     0.00  std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*)
  0.00      0.52     0.00       16     0.00     0.00  std::atomic<void*>::atomic()
  0.00      0.52     0.00       15     0.00     0.00  std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&)
  0.00      0.52     0.00       15     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()
  0.00      0.52     0.00       15     0.00     0.00  void std::_Destroy<std::thread>(std::thread*)
  0.00      0.52     0.00       14     0.00     0.00  std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&)
  0.00      0.52     0.00       14     0.00     0.00  std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&)
  0.00      0.52     0.00       14     0.00     0.00  std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&)
  0.00      0.52     0.00       13     0.00     0.00  std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*))
  0.00      0.52     0.00       13     0.00     0.00  std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&)
  0.00      0.52     0.00       13     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  0.00      0.52     0.00       13     0.00     0.00  std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&)
  0.00      0.52     0.00       13     0.00     0.00  std::thread::swap(std::thread&)
  0.00      0.52     0.00       13     0.00     0.00  std::thread::thread(std::thread&&)
  0.00      0.52     0.00       13     0.00     0.00  void std::swap<std::thread::id>(std::thread::id&, std::thread::id&)
  0.00      0.52     0.00       12     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::max_size() const
  0.00      0.52     0.00       12     0.00     0.00  std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&)
  0.00      0.52     0.00       12     0.00     0.00  _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_
  0.00      0.52     0.00       12     0.00     0.00  _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_
  0.00      0.52     0.00       12     0.00     0.00  void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
  0.00      0.52     0.00       11     0.00     0.00  bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
  0.00      0.52     0.00       11     0.00     0.00  bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
  0.00      0.52     0.00        9     0.00     0.00  bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&)
  0.00      0.52     0.00        9     0.00     0.00  std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.52     0.00        9     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator()
  0.00      0.52     0.00        9     0.00     0.00  std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order)
  0.00      0.52     0.00        8     0.00     0.00  tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool()
  0.00      0.52     0.00        8     0.00     0.00  tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool()
  0.00      0.52     0.00        8     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator()
  0.00      0.52     0.00        8     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator()
  0.00      0.52     0.00        8     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++()
  0.00      0.52     0.00        8     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const
  0.00      0.52     0.00        8     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const
  0.00      0.52     0.00        8     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::max_size() const
  0.00      0.52     0.00        8     0.00     0.00  std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator()
  0.00      0.52     0.00        8     0.00     0.00  _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_
  0.00      0.52     0.00        8     0.00     0.00  std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()
  0.00      0.52     0.00        8     0.00     0.00  std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.52     0.00        8     0.00     0.00  std::__atomic_base<tervel::util::OpRecord*>::__atomic_base()
  0.00      0.52     0.00        8     0.00     0.00  std::move_iterator<std::thread*>::move_iterator(std::thread*)
  0.00      0.52     0.00        8     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.52     0.00        8     0.00     0.00  std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&)
  0.00      0.52     0.00        8     0.00     0.00  std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&)
  0.00      0.52     0.00        8     0.00     0.00  std::atomic<tervel::util::OpRecord*>::atomic()
  0.00      0.52     0.00        8     0.00     0.00  std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*)
  0.00      0.52     0.00        8     0.00     0.00  main::{lambda(std::thread&)#1}::operator()(std::thread&) const
  0.00      0.52     0.00        7     0.00     0.00  tervel::ThreadContext::get_thread_id()
  0.00      0.52     0.00        7     0.00     0.71  tervel::ThreadContext::ThreadContext(tervel::Tervel*)
  0.00      0.52     0.00        7     0.00     0.71  tervel::util::memory::rc::PoolManager::allocate_pool()
  0.00      0.52     0.00        7     0.00     0.00  tervel::Tervel::get_thread_id()
  0.00      0.52     0.00        7     0.00     0.00  _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_
  0.00      0.52     0.00        7     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator()
  0.00      0.52     0.00        7     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*)
  0.00      0.52     0.00        7     0.00     0.00  _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_
  0.00      0.52     0.00        7     0.00     0.00  __gnu_cxx::__exchange_and_add(int volatile*, int)
  0.00      0.52     0.00        7     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const
  0.00      0.52     0.00        7     0.00     0.00  std::move_iterator<std::thread*>::operator*() const
  0.00      0.52     0.00        7     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const
  0.00      0.52     0.00        7     0.00     0.00  std::type_info::operator==(std::type_info const&) const
  0.00      0.52     0.00        7     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator()
  0.00      0.52     0.00        7     0.00     0.00  std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&)
  0.00      0.52     0.00        7     0.00     0.00  std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&)
  0.00      0.52     0.00        7     0.00     0.00  std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&)
  0.00      0.52     0.00        7     0.00     0.00  std::shared_ptr<std::thread::_Impl_base>::~shared_ptr()
  0.00      0.52     0.00        7     0.00     0.00  std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base()
  0.00      0.52     0.00        7     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_
  0.00      0.52     0.00        7     0.00     0.00  std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&)
  0.00      0.52     0.00        7     0.00     0.00  std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&)
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_
  0.00      0.52     0.00        7     0.00     0.00  std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&)
  0.00      0.52     0.00        7     0.00     0.00  std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...)
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_
  0.00      0.52     0.00        7     0.00     0.00  std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&)
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm4EJEEC2Ev
  0.00      0.52     0.00        7     0.00    38.44  _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE
  0.00      0.52     0.00        7     0.00     0.00  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.52     0.00        7     0.00     0.00  std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&)
  0.00      0.52     0.00        7     0.00     0.00  std::move_iterator<std::thread*>::operator++()
  0.00      0.52     0.00        7     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&)
  0.00      0.52     0.00        7     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count()
  0.00      0.52     0.00        7     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base()
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_
  0.00      0.52     0.00        7     0.00     0.00  std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long)
  0.00      0.52     0.00        7     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
  0.00      0.52     0.00        7     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >)
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_
  0.00      0.52     0.00        7     0.00     0.00  _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_
  0.00      0.52     0.00        7     0.00     0.00  std::thread::_Impl_base::_Impl_base()
  0.00      0.52     0.00        7     0.00     0.00  std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.52     0.00        7     0.00     0.00  std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
  0.00      0.52     0.00        7     0.00     0.00  _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_
  0.00      0.52     0.00        7     0.00     0.00  std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
  0.00      0.52     0.00        7     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.52     0.00        7     0.00     0.00  void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...)
  0.00      0.52     0.00        7     0.00     0.00  _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.52     0.00        7     0.00     0.00  std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*))
  0.00      0.52     0.00        7     0.00     0.00  std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&)
  0.00      0.52     0.00        7     0.00     0.00  _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
  0.00      0.52     0.00        7     0.00     0.00  _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
  0.00      0.52     0.00        7     0.00     0.00  std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&)
  0.00      0.52     0.00        7     0.00     0.00  _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_
  0.00      0.52     0.00        6     0.00    44.84  run(int, tervel::Tervel*, TestObject*)
  0.00      0.52     0.00        6     0.00     0.00  __gthread_active_p()
  0.00      0.52     0.00        6     0.00     0.00  _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_
  0.00      0.52     0.00        6     0.00     0.00  __gnu_cxx::__exchange_and_add_dispatch(int*, int)
  0.00      0.52     0.00        6     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr()
  0.00      0.52     0.00        6     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...)
  0.00      0.52     0.00        6     0.00     0.00  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
  0.00      0.52     0.00        6     0.00    44.84  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()()
  0.00      0.52     0.00        6     0.00     0.00  std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()
  0.00      0.52     0.00        6     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
  0.00      0.52     0.00        6     0.00     0.00  _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_
  0.00      0.52     0.00        6     0.00     0.00  _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_
  0.00      0.52     0.00        6     0.00     0.00  _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_
  0.00      0.52     0.00        6     0.00     0.00  std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*))
  0.00      0.52     0.00        6     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.52     0.00        6     0.00     0.00  void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&)
  0.00      0.52     0.00        6     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&)
  0.00      0.52     0.00        6     0.00     0.00  _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_
  0.00      0.52     0.00        6     0.00     0.00  std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  0.00      0.52     0.00        6     0.00     0.00  std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&)
  0.00      0.52     0.00        6     0.00     0.00  _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE
  0.00      0.52     0.00        6     0.00     0.00  std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&)
  0.00      0.52     0.00        6     0.00     0.00  _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.52     0.00        6     0.00     0.00  std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.52     0.00        5     0.00     0.00  void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*)
  0.00      0.52     0.00        5     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long)
  0.00      0.52     0.00        5     0.00     0.00  _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE
  0.00      0.52     0.00        5     0.00     0.00  _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.52     0.00        5     0.00     0.00  void std::_Destroy<std::thread*>(std::thread*, std::thread*)
  0.00      0.52     0.00        5     0.00     0.00  void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&)
  0.00      0.52     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long)
  0.00      0.52     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*)
  0.00      0.52     0.00        4     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const
  0.00      0.52     0.00        4     0.00     0.00  std::_Tuple_impl<2ul>::_Tuple_impl()
  0.00      0.52     0.00        4     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long)
  0.00      0.52     0.00        4     0.00     0.00  std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
  0.00      0.52     0.00        4     0.00     0.00  _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_
  0.00      0.52     0.00        4     0.00     0.00  std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
  0.00      0.52     0.00        4     0.00     0.00  std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&)
  0.00      0.52     0.00        4     0.00     0.00  std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&)
  0.00      0.52     0.00        4     0.00     0.00  unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
  0.00      0.52     0.00        4     0.00     0.00  std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&)
  0.00      0.52     0.00        4     0.00     0.00  std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&)
  0.00      0.52     0.00        4     0.00     0.00  std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&)
  0.00      0.52     0.00        4     0.00     0.00  std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&)
  0.00      0.52     0.00        3     0.00     0.00  tervel::util::memory::hp::ListManager::allocate_list()
  0.00      0.52     0.00        3     0.00     0.00  std::__atomic_base<unsigned long>::__atomic_base(unsigned long)
  0.00      0.52     0.00        3     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl()
  0.00      0.52     0.00        3     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
  0.00      0.52     0.00        3     0.00     0.00  std::atomic<unsigned long>::atomic(unsigned long)
  0.00      0.52     0.00        3     0.00     0.00  tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&)
  0.00      0.52     0.00        3     0.00     0.00  tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&)
  0.00      0.52     0.00        3     0.00     0.00  std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&)
  0.00      0.52     0.00        3     0.00     0.00  std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&)
  0.00      0.52     0.00        2     0.00   132.38  run_enqueue_dequeue(int, TestObject*)
  0.00      0.52     0.00        2     0.00     0.00  tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*)
  0.00      0.52     0.00        2     0.00     2.50  tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long)
  0.00      0.52     0.00        2     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
  0.00      0.52     0.00        2     0.00     0.00  void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.52     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&)
  0.00      0.52     0.00        2     0.00     0.00  std::__atomic_base<unsigned long>::load(std::memory_order) const
  0.00      0.52     0.00        2     0.00     0.00  std::atomic_bool::atomic_bool(bool)
  0.00      0.52     0.00        2     0.00     0.00  std::__atomic_base<bool>::__atomic_base(bool)
  0.00      0.52     0.00        2     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
  0.00      0.52     0.00        2     0.00     0.00  std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
  0.00      0.52     0.00        2     0.00     0.00  void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.52     0.00        2     0.00     0.00  std::atomic<bool>::atomic(bool)
  0.00      0.52     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE
  0.00      0.52     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv
  0.00      0.52     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb
  0.00      0.52     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.52     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.52     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.52     0.00        1     0.00     0.00  TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*)
  0.00      0.52     0.00        1     0.00     0.00  tervel::ThreadContext::~ThreadContext()
  0.00      0.52     0.00        1     0.00    31.04  tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int)
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::ProgressAssurance::ProgressAssurance(int)
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::ProgressAssurance::~ProgressAssurance()
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::memory::hp::ListManager::ListManager(unsigned long)
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::memory::hp::ListManager::~ListManager()
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::memory::hp::HazardPointer::HazardPointer(int)
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::memory::hp::HazardPointer::~HazardPointer()
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::memory::hp::Element::Element()
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::memory::rc::PoolManager::PoolManager(unsigned long)
  0.00      0.52     0.00        1     0.00     0.00  tervel::util::memory::rc::PoolManager::~PoolManager()
  0.00      0.52     0.00        1     0.00     0.00  tervel::Tervel::Tervel(unsigned long)
  0.00      0.52     0.00        1     0.00     0.00  tervel::Tervel::~Tervel()
  0.00      0.52     0.00        1     0.00     0.00  void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*)
  0.00      0.52     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::new_allocator()
  0.00      0.52     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::~new_allocator()
  0.00      0.52     0.00        1     0.00     0.00  std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const
  0.00      0.52     0.00        1     0.00     0.00  std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const
  0.00      0.52     0.00        1     0.00     0.00  std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const
  0.00      0.52     0.00        1     0.00     0.00  std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const
  0.00      0.52     0.00        1     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1l> >::count() const
  0.00      0.52     0.00        1     0.00     0.00  std::allocator<std::thread>::allocator()
  0.00      0.52     0.00        1     0.00     0.00  std::allocator<std::thread>::~allocator()
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&)
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter()
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*)
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr()
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter()
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*)
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr()
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter()
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*)
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr()
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter()
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*)
  0.00      0.52     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr()
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&)
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&)
  0.00      0.52     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...)
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_
  0.00      0.52     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl()
  0.00      0.52     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl()
  0.00      0.52     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base()
  0.00      0.52     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base()
  0.00      0.52     0.00        1     0.00     0.00  std::__atomic_base<int>::fetch_add(int, std::memory_order)
  0.00      0.52     0.00        1     0.00     0.00  std::__atomic_base<int>::__atomic_base(int)
  0.00      0.52     0.00        1     0.00     0.00  std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*)
  0.00      0.52     0.00        1     0.00     0.00  void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*)
  0.00      0.52     0.00        1     0.00     0.00  std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.52     0.00        1     0.00     0.00  std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&)
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_
  0.00      0.52     0.00        1     0.00     0.00  _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_
  0.00      0.52     0.00        1     0.00     0.00  std::atomic<int>::atomic(int)
  0.00      0.52     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::end()
  0.00      0.52     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::begin()
  0.00      0.52     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::vector()
  0.00      0.52     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::~vector()
  0.00      0.52     0.00        1     0.00     0.00  std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&)
  0.00      0.52     0.00        1     0.00     0.00  _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
  0.00      0.52     0.00        1     0.00     0.00  _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
  0.00      0.52     0.00        1     0.00     0.00  std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&)
  0.00      0.52     0.00        1     0.00     0.00  std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&)
  0.00      0.52     0.00        1     0.00     0.00  _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE
  0.00      0.52     0.00        1     0.00     0.00  std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&)
  0.00      0.52     0.00        1     0.00     0.00  _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE
  0.00      0.52     0.00        1     0.00     0.00  std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
  0.00      0.52     0.00        1     0.00     0.00  _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.52     0.00        1     0.00     0.00  _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.52     0.00        1     0.00     0.00  _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.52     0.00        1     0.00     0.00  std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
  0.00      0.52     0.00        1     0.00     0.00  _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.52     0.00        1     0.00     0.00  _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.52     0.00        1     0.00     0.00  _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.52     0.00        1     0.00     0.00  std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&)
  0.00      0.52     0.00        1     0.00     0.00  main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1})

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.92% of 0.52 seconds

index % time    self  children    called     name
                0.02    0.29   55290/55290       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [2]
[1]     60.3    0.02    0.29   55290         tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
                0.08    0.00   42420/53502       tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [12]
                0.02    0.03   52888/71852       tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [13]
                0.00    0.05   46222/64328       tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
                0.00    0.03   47218/63370       std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [16]
                0.00    0.03   47383/47383       tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [23]
                0.00    0.02   58057/77610       std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [19]
                0.00    0.02   53275/53275       _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer8ElemNodeIlEEJRlS7_EEEPT_DpOT0_ [28]
                0.00    0.01   47818/66480       tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [30]
                0.01    0.00   43810/60636       tervel::util::memory::rc::unmark_first(void*) [35]
                0.00    0.00   54450/54450       tervel::wf_ring_buffer::RingBuffer<long>::is_full() [51]
                0.00    0.00   95114/111063      tervel::wf_ring_buffer::Node<long>::seq() [69]
                0.00    0.00   50152/50152       tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode() [92]
-----------------------------------------------
                0.00    0.10   16359/49127       run_enqueue_dequeue(int, TestObject*) [7]
                0.00    0.21   32768/49127       main [8]
[2]     60.3    0.00    0.31   49127         tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [2]
                0.02    0.29   55290/55290       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
                0.00    0.00   55395/74810       tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [74]
                0.00    0.00   54323/70875       tervel::ThreadContext::get_progress_assurance() [76]
-----------------------------------------------
                0.00    0.27       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [5]
[3]     51.7    0.00    0.27       7         _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.27       6/6           run(int, tervel::Tervel*, TestObject*) [4]
                0.00    0.00       7/7           _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [224]
                0.00    0.00       6/39          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [107]
                0.00    0.00       6/6           _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [251]
                0.00    0.00       6/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       6/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       6/6           std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&) [250]
                0.00    0.00       6/20          int&& std::forward<int>(std::remove_reference<int>::type&) [121]
                0.00    0.00       5/5           _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [256]
-----------------------------------------------
                0.00    0.27       6/6           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[4]     51.7    0.00    0.27       6         run(int, tervel::Tervel*, TestObject*) [4]
                0.00    0.26       2/2           run_enqueue_dequeue(int, TestObject*) [7]
                0.00    0.00       6/7           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [44]
-----------------------------------------------
                0.00    0.27       6/6           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_M_run() [6]
[5]     51.7    0.00    0.27       6         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [5]
                0.00    0.27       7/7           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
-----------------------------------------------
                                                 <spontaneous>
[6]     51.7    0.00    0.27                 std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_M_run() [6]
                0.00    0.27       6/6           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [5]
-----------------------------------------------
                0.00    0.26       2/2           run(int, tervel::Tervel*, TestObject*) [4]
[7]     50.9    0.00    0.26       2         run_enqueue_dequeue(int, TestObject*) [7]
                0.00    0.16   16952/16952       tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [10]
                0.00    0.10   16359/49127       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [2]
                0.00    0.00   26218/26218       std::atomic_bool::load(std::memory_order) const [96]
                0.00    0.00       1/1           std::__atomic_base<int>::fetch_add(int, std::memory_order) [371]
-----------------------------------------------
                                                 <spontaneous>
[8]     46.3    0.00    0.24                 main [8]
                0.00    0.21   32768/49127       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [2]
                0.00    0.03       1/1           tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [18]
                0.00    0.00       1/7           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [44]
                0.00    0.00      16/16          std::__atomic_base<int>::load(std::memory_order) const [124]
                0.00    0.00       7/7           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
                0.00    0.00       6/19          std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [122]
                0.00    0.00       6/6           std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [245]
                0.00    0.00       6/21          std::thread::~thread() [117]
                0.00    0.00       2/2           std::__atomic_base<unsigned long>::load(std::memory_order) const [287]
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [311]
                0.00    0.00       1/1           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [300]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::vector() [383]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::end() [381]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::begin() [382]
                0.00    0.00       1/1           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [402]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::~vector() [384]
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [312]
                0.00    0.00       1/1           tervel::ThreadContext::~ThreadContext() [301]
-----------------------------------------------
                0.05    0.11   22533/22533       tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [10]
[9]     30.8    0.05    0.11   22533         tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.02    0.00   11082/53502       tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [12]
                0.00    0.02   18106/64328       tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
                0.01    0.01   18964/71852       tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [13]
                0.00    0.01   16152/63370       std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [16]
                0.01    0.00   18225/18225       tervel::wf_ring_buffer::Node<long>::val() [37]
                0.00    0.01   21929/21929       tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [41]
                0.00    0.01   19553/77610       std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [19]
                0.00    0.01   20548/20548       _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [42]
                0.00    0.00   18662/66480       tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [30]
                0.00    0.00   16826/60636       tervel::util::memory::rc::unmark_first(void*) [35]
                0.00    0.00   23958/23958       tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [53]
                0.00    0.00   19386/19386       tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode() [99]
                0.00    0.00   15949/111063      tervel::wf_ring_buffer::Node<long>::seq() [69]
-----------------------------------------------
                0.00    0.16   16952/16952       run_enqueue_dequeue(int, TestObject*) [7]
[10]    30.8    0.00    0.16   16952         tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [10]
                0.05    0.11   22533/22533       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.00    0.00   19415/74810       tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [74]
                0.00    0.00   16552/70875       tervel::ThreadContext::get_progress_assurance() [76]
-----------------------------------------------
                0.01    0.00   19243/215534      tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [41]
                0.03    0.00   49074/215534      tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [23]
                0.04    0.00   72730/215534      tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
                0.04    0.00   74487/215534      tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [13]
[11]    21.2    0.11    0.00  215534         std::__atomic_base<long>::fetch_add(long, std::memory_order) [11]
-----------------------------------------------
                0.02    0.00   11082/53502       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.08    0.00   42420/53502       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[12]    19.2    0.10    0.00   53502         tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [12]
-----------------------------------------------
                0.01    0.01   18964/71852       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.02    0.03   52888/71852       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[13]    13.4    0.03    0.04   71852         tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [13]
                0.04    0.00   74487/215534      std::__atomic_base<long>::fetch_add(long, std::memory_order) [11]
                0.00    0.00   74063/401456      tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*) [49]
                0.00    0.00   73408/745193      tervel::util::memory::rc::PoolElement::header() [48]
                0.00    0.00   59862/59862       tervel::util::Descriptor::on_unwatch() [89]
-----------------------------------------------
                0.00    0.02   18106/64328       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.00    0.05   46222/64328       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[14]    13.1    0.00    0.07   64328         tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
                0.04    0.00   72730/215534      std::__atomic_base<long>::fetch_add(long, std::memory_order) [11]
                0.00    0.01   59332/59332       std::atomic<void*>::load(std::memory_order) const [36]
                0.00    0.01   14650/14650       tervel::wf_ring_buffer::ElemNode<long>::on_watch(std::atomic<void*>*, void*) [39]
                0.01    0.00   63945/173931      tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
                0.00    0.00   68634/401456      tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*) [49]
                0.00    0.00   68479/745193      tervel::util::memory::rc::PoolElement::header() [48]
                0.00    0.00   46824/46824       tervel::util::Descriptor::on_watch(std::atomic<void*>*, void*) [93]
-----------------------------------------------
                0.00    0.01   21731/144812      _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [43]
                0.00    0.02   57545/144812      tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [27]
                0.00    0.02   65536/144812      _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [24]
[15]     8.9    0.01    0.04  144812         tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
                0.01    0.02  148119/148119      tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool) [22]
                0.01    0.00   74602/127438      tervel::util::memory::rc::PoolElement::next() [26]
                0.00    0.00   65533/65541       tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [52]
                0.00    0.00   72434/164026      tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [55]
-----------------------------------------------
                0.00    0.01   16152/63370       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.00    0.03   47218/63370       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[16]     7.7    0.00    0.04   63370         std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [16]
                0.04    0.00   62217/62217       std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [17]
-----------------------------------------------
                0.04    0.00   62217/62217       std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [16]
[17]     7.7    0.04    0.00   62217         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [17]
-----------------------------------------------
                0.00    0.03       1/1           main [8]
[18]     6.0    0.00    0.03       1         tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [18]
                0.00    0.02   65536/65536       _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [25]
                0.00    0.01   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [33]
                0.00    0.00   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic() [84]
                0.00    0.00       1/1           tervel::util::memory::hp::Element::Element() [308]
-----------------------------------------------
                0.00    0.01   19553/77610       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.00    0.02   58057/77610       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[19]     5.8    0.00    0.03   77610         std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [19]
                0.03    0.00   74673/74673       std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order) [20]
                0.00    0.00   76660/76660       std::__cmpexch_failure_order(std::memory_order) [72]
-----------------------------------------------
                0.03    0.00   74673/74673       std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [19]
[20]     5.8    0.03    0.00   74673         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order) [20]
-----------------------------------------------
                0.00    0.00   30567/173931      tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool) [22]
                0.01    0.00   63945/173931      tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
                0.01    0.00   79419/173931      tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool) [29]
[21]     5.2    0.02    0.01  173931         tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
                0.00    0.00  141957/370725      std::__atomic_base<long>::load(std::memory_order) const [31]
                0.00    0.00  165203/401456      tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*) [49]
                0.00    0.00  168672/745193      tervel::util::memory::rc::PoolElement::header() [48]
                0.00    0.00   65434/65434       tervel::util::Descriptor::on_is_watched() [85]
-----------------------------------------------
                0.01    0.02  148119/148119      tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
[22]     5.0    0.01    0.02  148119         tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool) [22]
                0.01    0.00   52836/127438      tervel::util::memory::rc::PoolElement::next() [26]
                0.00    0.00   30567/173931      tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
                0.00    0.00   16042/83917       tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool) [29]
                0.00    0.00   27905/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
-----------------------------------------------
                0.00    0.03   47383/47383       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[23]     4.8    0.00    0.03   47383         tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [23]
                0.03    0.00   49074/215534      std::__atomic_base<long>::fetch_add(long, std::memory_order) [11]
-----------------------------------------------
                0.00    0.02   65536/65536       _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [25]
[24]     4.0    0.00    0.02   65536         _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [24]
                0.00    0.02   65536/144812      tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
                0.00    0.00   65536/543369      long& std::forward<long&>(std::remove_reference<long&>::type&) [63]
                0.00    0.00   65536/65536       void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&) [82]
                0.00    0.00   65536/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
-----------------------------------------------
                0.00    0.02   65536/65536       tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [18]
[25]     4.0    0.00    0.02   65536         _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [25]
                0.00    0.02   65536/65536       _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [24]
                0.00    0.00   65536/204918      tervel::ThreadContext::get_rc_descriptor_pool() [65]
                0.00    0.00   65536/543369      long& std::forward<long&>(std::remove_reference<long&>::type&) [63]
-----------------------------------------------
                0.01    0.00   52836/127438      tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool) [22]
                0.01    0.00   74602/127438      tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
[26]     4.0    0.02    0.00  127438         tervel::util::memory::rc::PoolElement::next() [26]
                0.00    0.00  133307/745193      tervel::util::memory::rc::PoolElement::header() [48]
-----------------------------------------------
                0.00    0.02   55053/55053       _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer8ElemNodeIlEEJRlS7_EEEPT_DpOT0_ [28]
[27]     3.6    0.00    0.02   55053         tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [27]
                0.00    0.02   57545/144812      tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
                0.00    0.00  114600/543369      long& std::forward<long&>(std::remove_reference<long&>::type&) [63]
                0.00    0.00   59069/59069       void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [91]
                0.00    0.00   57585/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
-----------------------------------------------
                0.00    0.02   53275/53275       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[28]     3.6    0.00    0.02   53275         _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer8ElemNodeIlEEJRlS7_EEEPT_DpOT0_ [28]
                0.00    0.02   55053/55053       tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [27]
                0.00    0.00  107680/543369      long& std::forward<long&>(std::remove_reference<long&>::type&) [63]
                0.00    0.00   50999/204918      tervel::ThreadContext::get_rc_descriptor_pool() [65]
-----------------------------------------------
                0.00    0.00   16042/83917       tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool) [22]
                0.00    0.01   67875/83917       tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [30]
[29]     2.7    0.00    0.01   83917         tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool) [29]
                0.01    0.00   79419/173931      tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
                0.00    0.00   68110/68110       tervel::util::memory::rc::DescriptorPool::add_to_safe(tervel::util::Descriptor*) [54]
                0.00    0.00   17720/17720       tervel::util::memory::rc::DescriptorPool::add_to_unsafe(tervel::util::Descriptor*) [56]
-----------------------------------------------
                0.00    0.00   18662/66480       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.00    0.01   47818/66480       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[30]     2.2    0.00    0.01   66480         tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [30]
                0.00    0.01   67875/83917       tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool) [29]
                0.00    0.00   67710/204918      tervel::ThreadContext::get_rc_descriptor_pool() [65]
-----------------------------------------------
                0.00    0.00   65547/370725      tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [52]
                0.00    0.00  141957/370725      tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
                0.00    0.00  163221/370725      std::__atomic_base<long>::operator long() const [50]
[31]     1.9    0.01    0.00  370725         std::__atomic_base<long>::load(std::memory_order) const [31]
-----------------------------------------------
                0.01    0.00   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [33]
[32]     1.9    0.01    0.00   65536         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [32]
-----------------------------------------------
                0.00    0.01   65536/65536       tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [18]
[33]     1.9    0.00    0.01   65536         std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [33]
                0.01    0.00   65536/65536       std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [32]
-----------------------------------------------
                0.01    0.00   61892/61892       std::atomic<void*>::load(std::memory_order) const [36]
[34]     1.9    0.01    0.00   61892         std::__atomic_base<void*>::load(std::memory_order) const [34]
-----------------------------------------------
                0.00    0.00   16826/60636       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.01    0.00   43810/60636       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[35]     1.9    0.01    0.00   60636         tervel::util::memory::rc::unmark_first(void*) [35]
-----------------------------------------------
                0.00    0.01   59332/59332       tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
[36]     1.9    0.00    0.01   59332         std::atomic<void*>::load(std::memory_order) const [36]
                0.01    0.00   61892/61892       std::__atomic_base<void*>::load(std::memory_order) const [34]
-----------------------------------------------
                0.01    0.00   18225/18225       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
[37]     1.9    0.01    0.00   18225         tervel::wf_ring_buffer::Node<long>::val() [37]
-----------------------------------------------
                0.01    0.00   16277/16277       tervel::wf_ring_buffer::ElemNode<long>::on_watch(std::atomic<void*>*, void*) [39]
[38]     1.9    0.01    0.00   16277         std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const [38]
                0.00    0.00   20061/20061       std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const [98]
-----------------------------------------------
                0.00    0.01   14650/14650       tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
[39]     1.9    0.00    0.01   14650         tervel::wf_ring_buffer::ElemNode<long>::on_watch(std::atomic<void*>*, void*) [39]
                0.01    0.00   16277/16277       std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const [38]
-----------------------------------------------
                                                 <spontaneous>
[40]     1.9    0.01    0.00                 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy() [40]
-----------------------------------------------
                0.00    0.01   21929/21929       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
[41]     1.9    0.00    0.01   21929         tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [41]
                0.01    0.00   19243/215534      std::__atomic_base<long>::fetch_add(long, std::memory_order) [11]
-----------------------------------------------
                0.00    0.01   20548/20548       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
[42]     1.3    0.00    0.01   20548         _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [42]
                0.00    0.01   18695/18695       _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [43]
                0.00    0.00   23566/68026       long&& std::forward<long>(std::remove_reference<long>::type&) [78]
                0.00    0.00   20673/204918      tervel::ThreadContext::get_rc_descriptor_pool() [65]
-----------------------------------------------
                0.00    0.01   18695/18695       _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [42]
[43]     1.3    0.00    0.01   18695         _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [43]
                0.00    0.01   21731/144812      tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
                0.00    0.00   22885/22885       void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&) [97]
                0.00    0.00   20581/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
                0.00    0.00   19823/68026       long&& std::forward<long>(std::remove_reference<long>::type&) [78]
-----------------------------------------------
                0.00    0.00       1/7           main [8]
                0.00    0.00       6/7           run(int, tervel::Tervel*, TestObject*) [4]
[44]     1.0    0.00    0.01       7         tervel::ThreadContext::ThreadContext(tervel::Tervel*) [44]
                0.00    0.01       7/7           tervel::util::memory::rc::PoolManager::allocate_pool() [45]
                0.00    0.00       7/7           tervel::Tervel::get_thread_id() [174]
                0.00    0.00       3/3           tervel::util::memory::hp::ListManager::allocate_list() [274]
-----------------------------------------------
                0.00    0.01       7/7           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [44]
[45]     1.0    0.00    0.01       7         tervel::util::memory::rc::PoolManager::allocate_pool() [45]
                0.00    0.01       2/2           tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [47]
                0.00    0.00       7/7           tervel::ThreadContext::get_thread_id() [173]
-----------------------------------------------
                0.01    0.00       3/3           tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [47]
[46]     1.0    0.01    0.00       3         tervel::util::memory::rc::DescriptorPool::reserve(int) [46]
                0.00    0.00       8/65541       tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [52]
                0.00    0.00      17/164026      tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [55]
-----------------------------------------------
                0.00    0.01       2/2           tervel::util::memory::rc::PoolManager::allocate_pool() [45]
[47]     1.0    0.00    0.01       2         tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [47]
                0.01    0.00       3/3           tervel::util::memory::rc::DescriptorPool::reserve(int) [46]
-----------------------------------------------
                0.00    0.00   68479/745193      tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
                0.00    0.00   73408/745193      tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [13]
                0.00    0.00  131095/745193      tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [52]
                0.00    0.00  133307/745193      tervel::util::memory::rc::PoolElement::next() [26]
                0.00    0.00  168672/745193      tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
                0.00    0.00  170232/745193      tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [55]
[48]     1.0    0.01    0.00  745193         tervel::util::memory::rc::PoolElement::header() [48]
-----------------------------------------------
                0.00    0.00   18995/401456      tervel::util::memory::rc::DescriptorPool::add_to_unsafe(tervel::util::Descriptor*) [56]
                0.00    0.00   68634/401456      tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
                0.00    0.00   74063/401456      tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [13]
                0.00    0.00   74561/401456      tervel::util::memory::rc::DescriptorPool::add_to_safe(tervel::util::Descriptor*) [54]
                0.00    0.00  165203/401456      tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
[49]     1.0    0.01    0.00  401456         tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*) [49]
-----------------------------------------------
                0.00    0.00   53982/160440      tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [53]
                0.00    0.00  106458/160440      tervel::wf_ring_buffer::RingBuffer<long>::is_full() [51]
[50]     0.8    0.00    0.00  160440         std::__atomic_base<long>::operator long() const [50]
                0.00    0.00  163221/370725      std::__atomic_base<long>::load(std::memory_order) const [31]
-----------------------------------------------
                0.00    0.00   54450/54450       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[51]     0.6    0.00    0.00   54450         tervel::wf_ring_buffer::RingBuffer<long>::is_full() [51]
                0.00    0.00  106458/160440      std::__atomic_base<long>::operator long() const [50]
-----------------------------------------------
                0.00    0.00       8/65541       tervel::util::memory::rc::DescriptorPool::reserve(int) [46]
                0.00    0.00   65533/65541       tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
[52]     0.5    0.00    0.00   65541         tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [52]
                0.00    0.00   65547/370725      std::__atomic_base<long>::load(std::memory_order) const [31]
                0.00    0.00  131095/745193      tervel::util::memory::rc::PoolElement::header() [48]
                0.00    0.00   65543/65543       tervel::util::memory::rc::PoolElement::Header::Header() [80]
-----------------------------------------------
                0.00    0.00   23958/23958       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
[53]     0.3    0.00    0.00   23958         tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [53]
                0.00    0.00   53982/160440      std::__atomic_base<long>::operator long() const [50]
-----------------------------------------------
                0.00    0.00   68110/68110       tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool) [29]
[54]     0.3    0.00    0.00   68110         tervel::util::memory::rc::DescriptorPool::add_to_safe(tervel::util::Descriptor*) [54]
                0.00    0.00   74561/401456      tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*) [49]
                0.00    0.00   68934/164026      tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [55]
                0.00    0.00   72392/72392       tervel::util::memory::rc::PoolElement::cleanup_descriptor() [75]
-----------------------------------------------
                0.00    0.00      17/164026      tervel::util::memory::rc::DescriptorPool::reserve(int) [46]
                0.00    0.00   22641/164026      tervel::util::memory::rc::DescriptorPool::add_to_unsafe(tervel::util::Descriptor*) [56]
                0.00    0.00   68934/164026      tervel::util::memory::rc::DescriptorPool::add_to_safe(tervel::util::Descriptor*) [54]
                0.00    0.00   72434/164026      tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [15]
[55]     0.2    0.00    0.00  164026         tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [55]
                0.00    0.00  170232/745193      tervel::util::memory::rc::PoolElement::header() [48]
-----------------------------------------------
                0.00    0.00   17720/17720       tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool) [29]
[56]     0.1    0.00    0.00   17720         tervel::util::memory::rc::DescriptorPool::add_to_unsafe(tervel::util::Descriptor*) [56]
                0.00    0.00   18995/401456      tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*) [49]
                0.00    0.00   22641/164026      tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [55]
-----------------------------------------------
                0.00    0.00   65536/543369      _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [25]
                0.00    0.00   65536/543369      _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [24]
                0.00    0.00   65536/543369      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&) [82]
                0.00    0.00  107680/543369      _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer8ElemNodeIlEEJRlS7_EEEPT_DpOT0_ [28]
                0.00    0.00  114600/543369      tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [27]
                0.00    0.00  124481/543369      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [91]
[63]     0.0    0.00    0.00  543369         long& std::forward<long&>(std::remove_reference<long&>::type&) [63]
-----------------------------------------------
                0.00    0.00   20581/396021      _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [43]
                0.00    0.00   22929/396021      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&) [97]
                0.00    0.00   27905/396021      tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool) [22]
                0.00    0.00   57585/396021      tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [27]
                0.00    0.00   62423/396021      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [91]
                0.00    0.00   65536/396021      _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [24]
                0.00    0.00   65536/396021      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&) [82]
                0.00    0.00   73526/396021      tervel::util::memory::rc::PoolElement::cleanup_descriptor() [75]
[64]     0.0    0.00    0.00  396021         tervel::util::memory::rc::PoolElement::descriptor() [64]
-----------------------------------------------
                0.00    0.00   20673/204918      _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [42]
                0.00    0.00   50999/204918      _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer8ElemNodeIlEEJRlS7_EEEPT_DpOT0_ [28]
                0.00    0.00   65536/204918      _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [25]
                0.00    0.00   67710/204918      tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [30]
[65]     0.0    0.00    0.00  204918         tervel::ThreadContext::get_rc_descriptor_pool() [65]
-----------------------------------------------
                0.00    0.00       6/146640      _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [232]
                0.00    0.00       7/146640      _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [220]
                0.00    0.00       7/146640      _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
                0.00    0.00       7/146640      _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [175]
                0.00    0.00   21477/146640      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&) [97]
                0.00    0.00   59600/146640      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [91]
                0.00    0.00   65536/146640      void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&) [82]
[66]     0.0    0.00    0.00  146640         operator new(unsigned long, void*) [66]
-----------------------------------------------
                0.00    0.00  146258/146258      tervel::wf_ring_buffer::Node<long>::Node(long, long) [68]
[67]     0.0    0.00    0.00  146258         tervel::util::Descriptor::Descriptor() [67]
-----------------------------------------------
                0.00    0.00   59998/142685      tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [90]
                0.00    0.00   82687/142685      tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [70]
[68]     0.0    0.00    0.00  142685         tervel::wf_ring_buffer::Node<long>::Node(long, long) [68]
                0.00    0.00  146258/146258      tervel::util::Descriptor::Descriptor() [67]
-----------------------------------------------
                0.00    0.00   15949/111063      tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
                0.00    0.00   95114/111063      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[69]     0.0    0.00    0.00  111063         tervel::wf_ring_buffer::Node<long>::seq() [69]
-----------------------------------------------
                0.00    0.00   16001/81537       void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&) [97]
                0.00    0.00   65536/81537       void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&) [82]
[70]     0.0    0.00    0.00   81537         tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [70]
                0.00    0.00   82687/142685      tervel::wf_ring_buffer::Node<long>::Node(long, long) [68]
-----------------------------------------------
                0.00    0.00   80329/80329       tervel::util::ProgressAssurance::p_check_for_announcement() [73]
[71]     0.0    0.00    0.00   80329         tervel::ThreadContext::delay_count(unsigned long) [71]
-----------------------------------------------
                0.00    0.00   76660/76660       std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [19]
[72]     0.0    0.00    0.00   76660         std::__cmpexch_failure_order(std::memory_order) [72]
-----------------------------------------------
                0.00    0.00   76581/76581       tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [74]
[73]     0.0    0.00    0.00   76581         tervel::util::ProgressAssurance::p_check_for_announcement() [73]
                0.00    0.00   80329/80329       tervel::ThreadContext::delay_count(unsigned long) [71]
-----------------------------------------------
                0.00    0.00   19415/74810       tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [10]
                0.00    0.00   55395/74810       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [2]
[74]     0.0    0.00    0.00   74810         tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [74]
                0.00    0.00   76581/76581       tervel::util::ProgressAssurance::p_check_for_announcement() [73]
-----------------------------------------------
                0.00    0.00   72392/72392       tervel::util::memory::rc::DescriptorPool::add_to_safe(tervel::util::Descriptor*) [54]
[75]     0.0    0.00    0.00   72392         tervel::util::memory::rc::PoolElement::cleanup_descriptor() [75]
                0.00    0.00   73526/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
                0.00    0.00   45350/45350       tervel::wf_ring_buffer::EmptyNode<long>::~EmptyNode() [94]
                0.00    0.00   13813/13813       tervel::wf_ring_buffer::ElemNode<long>::~ElemNode() [100]
-----------------------------------------------
                0.00    0.00   16552/70875       tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [10]
                0.00    0.00   54323/70875       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [2]
[76]     0.0    0.00    0.00   70875         tervel::ThreadContext::get_progress_assurance() [76]
-----------------------------------------------
                0.00    0.00   18062/68585       tervel::wf_ring_buffer::ElemNode<long>::~ElemNode() [100]
                0.00    0.00   50523/68585       tervel::wf_ring_buffer::EmptyNode<long>::~EmptyNode() [94]
[77]     0.0    0.00    0.00   68585         tervel::wf_ring_buffer::Node<long>::~Node() [77]
                0.00    0.00   62554/62554       tervel::util::Descriptor::~Descriptor() [86]
-----------------------------------------------
                0.00    0.00   19823/68026       _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [43]
                0.00    0.00   23566/68026       _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [42]
                0.00    0.00   24637/68026       void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&) [97]
[78]     0.0    0.00    0.00   68026         long&& std::forward<long>(std::remove_reference<long>::type&) [78]
-----------------------------------------------
                0.00    0.00   65544/65544       tervel::util::memory::rc::PoolElement::Header::Header() [80]
[79]     0.0    0.00    0.00   65544         std::atomic<long>::atomic(long) [79]
                0.00    0.00   65543/65543       std::__atomic_base<long>::__atomic_base(long) [81]
-----------------------------------------------
                0.00    0.00   65543/65543       tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [52]
[80]     0.0    0.00    0.00   65543         tervel::util::memory::rc::PoolElement::Header::Header() [80]
                0.00    0.00   65544/65544       std::atomic<long>::atomic(long) [79]
-----------------------------------------------
                0.00    0.00   65543/65543       std::atomic<long>::atomic(long) [79]
[81]     0.0    0.00    0.00   65543         std::__atomic_base<long>::__atomic_base(long) [81]
-----------------------------------------------
                0.00    0.00   65536/65536       _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [24]
[82]     0.0    0.00    0.00   65536         void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&) [82]
                0.00    0.00   65536/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
                0.00    0.00   65536/543369      long& std::forward<long&>(std::remove_reference<long&>::type&) [63]
                0.00    0.00   65536/146640      operator new(unsigned long, void*) [66]
                0.00    0.00   65536/81537       tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [70]
-----------------------------------------------
                0.00    0.00   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic() [84]
[83]     0.0    0.00    0.00   65536         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base() [83]
-----------------------------------------------
                0.00    0.00   65536/65536       tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [18]
[84]     0.0    0.00    0.00   65536         std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic() [84]
                0.00    0.00   65536/65536       std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base() [83]
-----------------------------------------------
                0.00    0.00   65434/65434       tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [21]
[85]     0.0    0.00    0.00   65434         tervel::util::Descriptor::on_is_watched() [85]
-----------------------------------------------
                0.00    0.00   62554/62554       tervel::wf_ring_buffer::Node<long>::~Node() [77]
[86]     0.0    0.00    0.00   62554         tervel::util::Descriptor::~Descriptor() [86]
-----------------------------------------------
                0.00    0.00   60693/60693       tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [90]
[87]     0.0    0.00    0.00   60693         std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*) [87]
                0.00    0.00   60089/60089       std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*) [88]
-----------------------------------------------
                0.00    0.00   60089/60089       std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*) [87]
[88]     0.0    0.00    0.00   60089         std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*) [88]
-----------------------------------------------
                0.00    0.00   59862/59862       tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [13]
[89]     0.0    0.00    0.00   59862         tervel::util::Descriptor::on_unwatch() [89]
-----------------------------------------------
                0.00    0.00   59468/59468       void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [91]
[90]     0.0    0.00    0.00   59468         tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [90]
                0.00    0.00   60693/60693       std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*) [87]
                0.00    0.00   59998/142685      tervel::wf_ring_buffer::Node<long>::Node(long, long) [68]
-----------------------------------------------
                0.00    0.00   59069/59069       tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [27]
[91]     0.0    0.00    0.00   59069         void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [91]
                0.00    0.00  124481/543369      long& std::forward<long&>(std::remove_reference<long&>::type&) [63]
                0.00    0.00   62423/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
                0.00    0.00   59600/146640      operator new(unsigned long, void*) [66]
                0.00    0.00   59468/59468       tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [90]
-----------------------------------------------
                0.00    0.00   50152/50152       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [1]
[92]     0.0    0.00    0.00   50152         tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode() [92]
-----------------------------------------------
                0.00    0.00   46824/46824       tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [14]
[93]     0.0    0.00    0.00   46824         tervel::util::Descriptor::on_watch(std::atomic<void*>*, void*) [93]
-----------------------------------------------
                0.00    0.00   45350/45350       tervel::util::memory::rc::PoolElement::cleanup_descriptor() [75]
[94]     0.0    0.00    0.00   45350         tervel::wf_ring_buffer::EmptyNode<long>::~EmptyNode() [94]
                0.00    0.00   50523/68585       tervel::wf_ring_buffer::Node<long>::~Node() [77]
-----------------------------------------------
                0.00    0.00   31625/31625       std::atomic_bool::load(std::memory_order) const [96]
[95]     0.0    0.00    0.00   31625         std::__atomic_base<bool>::load(std::memory_order) const [95]
-----------------------------------------------
                0.00    0.00   26218/26218       run_enqueue_dequeue(int, TestObject*) [7]
[96]     0.0    0.00    0.00   26218         std::atomic_bool::load(std::memory_order) const [96]
                0.00    0.00   31625/31625       std::__atomic_base<bool>::load(std::memory_order) const [95]
-----------------------------------------------
                0.00    0.00   22885/22885       _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [43]
[97]     0.0    0.00    0.00   22885         void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&) [97]
                0.00    0.00   24637/68026       long&& std::forward<long>(std::remove_reference<long>::type&) [78]
                0.00    0.00   22929/396021      tervel::util::memory::rc::PoolElement::descriptor() [64]
                0.00    0.00   21477/146640      operator new(unsigned long, void*) [66]
                0.00    0.00   16001/81537       tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [70]
-----------------------------------------------
                0.00    0.00   20061/20061       std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const [38]
[98]     0.0    0.00    0.00   20061         std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const [98]
-----------------------------------------------
                0.00    0.00   19386/19386       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [9]
[99]     0.0    0.00    0.00   19386         tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode() [99]
-----------------------------------------------
                0.00    0.00   13813/13813       tervel::util::memory::rc::PoolElement::cleanup_descriptor() [75]
[100]    0.0    0.00    0.00   13813         tervel::wf_ring_buffer::ElemNode<long>::~ElemNode() [100]
                0.00    0.00   18062/68585       tervel::wf_ring_buffer::Node<long>::~Node() [77]
-----------------------------------------------
                0.00    0.00       6/99          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [243]
                0.00    0.00       6/99          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [239]
                0.00    0.00       7/99          _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [246]
                0.00    0.00       7/99          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [222]
                0.00    0.00       7/99          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [210]
                0.00    0.00       7/99          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
                0.00    0.00       7/99          _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
                0.00    0.00       7/99          _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [209]
                0.00    0.00       7/99          _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [208]
                0.00    0.00       7/99          _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [175]
                0.00    0.00       7/99          std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [218]
                0.00    0.00       8/99          _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [162]
                0.00    0.00       8/99          std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [164]
                0.00    0.00       8/99          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
[101]    0.0    0.00    0.00      99         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
-----------------------------------------------
                0.00    0.00       6/81          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
                0.00    0.00       6/81          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
                0.00    0.00       6/81          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       7/81          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [199]
                0.00    0.00       7/81          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
                0.00    0.00       7/81          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [200]
                0.00    0.00       7/81          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [196]
                0.00    0.00       7/81          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [194]
                0.00    0.00       7/81          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [216]
                0.00    0.00       7/81          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [236]
                0.00    0.00      14/81          std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [134]
[102]    0.0    0.00    0.00      81         TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
-----------------------------------------------
                0.00    0.00       6/73          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
                0.00    0.00       6/73          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
                0.00    0.00       6/73          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [216]
                0.00    0.00       6/73          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       7/73          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
                0.00    0.00       7/73          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [196]
                0.00    0.00       7/73          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [194]
                0.00    0.00       7/73          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
                0.00    0.00       7/73          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [236]
                0.00    0.00      14/73          std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [133]
[103]    0.0    0.00    0.00      73         tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
-----------------------------------------------
                0.00    0.00       6/47          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
                0.00    0.00       6/47          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
                0.00    0.00       7/47          std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [185]
                0.00    0.00       7/47          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [194]
                0.00    0.00       7/47          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
                0.00    0.00       7/47          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [216]
                0.00    0.00       7/47          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [236]
[104]    0.0    0.00    0.00      47         int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
-----------------------------------------------
                0.00    0.00       6/40          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
                0.00    0.00      13/40          std::thread::thread(std::thread&&) [140]
                0.00    0.00      21/40          std::thread::joinable() const [115]
[105]    0.0    0.00    0.00      40         std::thread::id::id() [105]
-----------------------------------------------
                0.00    0.00      39/39          void std::swap<std::thread::id>(std::thread::id&, std::thread::id&) [141]
[106]    0.0    0.00    0.00      39         std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&) [106]
-----------------------------------------------
                0.00    0.00       6/39          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
                0.00    0.00       6/39          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [216]
                0.00    0.00       6/39          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       7/39          _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
                0.00    0.00      14/39          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [135]
[107]    0.0    0.00    0.00      39         void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [107]
-----------------------------------------------
                0.00    0.00       4/35          _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
                0.00    0.00       6/35          void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [244]
                0.00    0.00       6/35          _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [241]
                0.00    0.00       6/35          _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [240]
                0.00    0.00       6/35          _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [232]
                0.00    0.00       7/35          _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [220]
[108]    0.0    0.00    0.00      35         std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [108]
-----------------------------------------------
                0.00    0.00       3/24          std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [276]
                0.00    0.00       7/24          _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [246]
                0.00    0.00       7/24          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
                0.00    0.00       7/24          _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
[109]    0.0    0.00    0.00      24         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [109]
                0.00    0.00      23/23          __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator() [110]
-----------------------------------------------
                0.00    0.00      23/23          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [109]
[110]    0.0    0.00    0.00      23         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator() [110]
-----------------------------------------------
                0.00    0.00      22/22          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [116]
[111]    0.0    0.00    0.00      22         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [111]
-----------------------------------------------
                0.00    0.00      22/22          bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [147]
[112]    0.0    0.00    0.00      22         std::move_iterator<std::thread*>::base() const [112]
-----------------------------------------------
                0.00    0.00       7/22          std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [264]
                0.00    0.00      15/22          void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [253]
[113]    0.0    0.00    0.00      22         std::thread* std::__addressof<std::thread>(std::thread&) [113]
-----------------------------------------------
                0.00    0.00      21/21          std::operator==(std::thread::id, std::thread::id) [118]
[114]    0.0    0.00    0.00      21         __gthread_equal(unsigned long, unsigned long) [114]
-----------------------------------------------
                0.00    0.00      21/21          std::thread::~thread() [117]
[115]    0.0    0.00    0.00      21         std::thread::joinable() const [115]
                0.00    0.00      21/40          std::thread::id::id() [105]
                0.00    0.00      21/21          std::operator==(std::thread::id, std::thread::id) [118]
-----------------------------------------------
                0.00    0.00       7/21          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
                0.00    0.00       7/21          _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
                0.00    0.00       7/21          std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >) [213]
[116]    0.0    0.00    0.00      21         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [116]
                0.00    0.00      22/22          __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [111]
-----------------------------------------------
                0.00    0.00       6/21          main [8]
                0.00    0.00      15/21          void std::_Destroy<std::thread>(std::thread*) [131]
[117]    0.0    0.00    0.00      21         std::thread::~thread() [117]
                0.00    0.00      21/21          std::thread::joinable() const [115]
-----------------------------------------------
                0.00    0.00      21/21          std::thread::joinable() const [115]
[118]    0.0    0.00    0.00      21         std::operator==(std::thread::id, std::thread::id) [118]
                0.00    0.00      21/21          __gthread_equal(unsigned long, unsigned long) [114]
-----------------------------------------------
                0.00    0.00       4/20          _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
                0.00    0.00      16/20          std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [261]
[119]    0.0    0.00    0.00      20         std::vector<std::thread, std::allocator<std::thread> >::size() const [119]
-----------------------------------------------
                0.00    0.00       6/20          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [239]
                0.00    0.00       7/20          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [210]
                0.00    0.00       7/20          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
[120]    0.0    0.00    0.00      20         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [120]
-----------------------------------------------
                0.00    0.00       6/20          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       7/20          std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [186]
                0.00    0.00       7/20          std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
[121]    0.0    0.00    0.00      20         int&& std::forward<int>(std::remove_reference<int>::type&) [121]
-----------------------------------------------
                0.00    0.00       6/19          main [8]
                0.00    0.00       6/19          std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [245]
                0.00    0.00       7/19          std::move_iterator<std::thread*>::operator*() const [181]
[122]    0.0    0.00    0.00      19         std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [122]
-----------------------------------------------
                0.00    0.00      18/18          bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [149]
[123]    0.0    0.00    0.00      18         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const [123]
-----------------------------------------------
                0.00    0.00      16/16          main [8]
[124]    0.0    0.00    0.00      16         std::__atomic_base<int>::load(std::memory_order) const [124]
-----------------------------------------------
                0.00    0.00      16/16          std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*) [127]
[125]    0.0    0.00    0.00      16         std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*) [125]
-----------------------------------------------
                0.00    0.00      16/16          std::atomic<void*>::atomic() [128]
[126]    0.0    0.00    0.00      16         std::__atomic_base<void*>::__atomic_base() [126]
-----------------------------------------------
                0.00    0.00      16/16          tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [154]
[127]    0.0    0.00    0.00      16         std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*) [127]
                0.00    0.00      16/16          std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*) [125]
-----------------------------------------------
                0.00    0.00      16/16          tervel::util::memory::hp::HazardPointer::HazardPointer(int) [306]
[128]    0.0    0.00    0.00      16         std::atomic<void*>::atomic() [128]
                0.00    0.00      16/16          std::__atomic_base<void*>::__atomic_base() [126]
-----------------------------------------------
                0.00    0.00      15/15          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [144]
[129]    0.0    0.00    0.00      15         std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [129]
-----------------------------------------------
                0.00    0.00       6/15          std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [237]
                0.00    0.00       9/15          std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [163]
[130]    0.0    0.00    0.00      15         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [130]
                0.00    0.00       6/6           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [238]
-----------------------------------------------
                0.00    0.00      15/15          void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [253]
[131]    0.0    0.00    0.00      15         void std::_Destroy<std::thread>(std::thread*) [131]
                0.00    0.00      15/21          std::thread::~thread() [117]
-----------------------------------------------
                0.00    0.00      14/14          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [137]
[132]    0.0    0.00    0.00      14         std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&) [132]
-----------------------------------------------
                0.00    0.00       7/14          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
                0.00    0.00       7/14          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [196]
[133]    0.0    0.00    0.00      14         std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [133]
                0.00    0.00      14/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
-----------------------------------------------
                0.00    0.00       7/14          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [199]
                0.00    0.00       7/14          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [200]
[134]    0.0    0.00    0.00      14         std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [134]
                0.00    0.00      14/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
-----------------------------------------------
                0.00    0.00       6/13          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
                0.00    0.00       7/13          _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
[135]    0.0    0.00    0.00      13         std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [135]
                0.00    0.00      14/39          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [107]
-----------------------------------------------
                0.00    0.00      13/13          _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [145]
[136]    0.0    0.00    0.00      13         std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&) [136]
-----------------------------------------------
                0.00    0.00       6/13          std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [247]
                0.00    0.00       7/13          _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
[137]    0.0    0.00    0.00      13         std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [137]
                0.00    0.00      14/14          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&) [132]
-----------------------------------------------
                0.00    0.00       6/13          _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE [255]
                0.00    0.00       7/13          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
[138]    0.0    0.00    0.00      13         std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [138]
                0.00    0.00      12/12          std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&) [143]
-----------------------------------------------
                0.00    0.00      13/13          std::thread::thread(std::thread&&) [140]
[139]    0.0    0.00    0.00      13         std::thread::swap(std::thread&) [139]
                0.00    0.00      13/13          void std::swap<std::thread::id>(std::thread::id&, std::thread::id&) [141]
-----------------------------------------------
                0.00    0.00       6/13          _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [232]
                0.00    0.00       7/13          _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [220]
[140]    0.0    0.00    0.00      13         std::thread::thread(std::thread&&) [140]
                0.00    0.00      13/40          std::thread::id::id() [105]
                0.00    0.00      13/13          std::thread::swap(std::thread&) [139]
-----------------------------------------------
                0.00    0.00      13/13          std::thread::swap(std::thread&) [139]
[141]    0.0    0.00    0.00      13         void std::swap<std::thread::id>(std::thread::id&, std::thread::id&) [141]
                0.00    0.00      39/39          std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&) [106]
-----------------------------------------------
                0.00    0.00       4/12          __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [260]
                0.00    0.00       8/12          std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&) [168]
[142]    0.0    0.00    0.00      12         __gnu_cxx::new_allocator<std::thread>::max_size() const [142]
-----------------------------------------------
                0.00    0.00      12/12          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [138]
[143]    0.0    0.00    0.00      12         std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&) [143]
-----------------------------------------------
                0.00    0.00       5/12          std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [248]
                0.00    0.00       7/12          std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
[144]    0.0    0.00    0.00      12         _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [144]
                0.00    0.00      15/15          std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [129]
-----------------------------------------------
                0.00    0.00       5/12          _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE [249]
                0.00    0.00       7/12          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [199]
[145]    0.0    0.00    0.00      12         _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [145]
                0.00    0.00      13/13          std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&) [136]
-----------------------------------------------
                0.00    0.00       6/12          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
                0.00    0.00       6/12          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
[146]    0.0    0.00    0.00      12         void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [146]
-----------------------------------------------
                0.00    0.00      11/11          bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [148]
[147]    0.0    0.00    0.00      11         bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [147]
                0.00    0.00      22/22          std::move_iterator<std::thread*>::base() const [112]
-----------------------------------------------
                0.00    0.00      11/11          std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [264]
[148]    0.0    0.00    0.00      11         bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [148]
                0.00    0.00      11/11          bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [147]
-----------------------------------------------
                0.00    0.00       9/9           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [402]
[149]    0.0    0.00    0.00       9         bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [149]
                0.00    0.00      18/18          __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const [123]
-----------------------------------------------
                0.00    0.00       1/9           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [609]
                0.00    0.00       8/9           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
[150]    0.0    0.00    0.00       9         std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [150]
                0.00    0.00       8/8           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [155]
-----------------------------------------------
                0.00    0.00       1/9           std::vector<std::thread, std::allocator<std::thread> >::~vector() [384]
                0.00    0.00       8/9           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
[151]    0.0    0.00    0.00       9         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [151]
-----------------------------------------------
                0.00    0.00       2/9           TestObject::atomic_add(int, int) [408]
                0.00    0.00       7/9           tervel::Tervel::get_thread_id() [174]
[152]    0.0    0.00    0.00       9         std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order) [152]
-----------------------------------------------
                0.00    0.00       8/8           tervel::util::memory::hp::ListManager::ListManager(unsigned long) [304]
[153]    0.0    0.00    0.00       8         tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool() [153]
-----------------------------------------------
                0.00    0.00       8/8           tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [309]
[154]    0.0    0.00    0.00       8         tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [154]
                0.00    0.00      16/16          std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*) [127]
-----------------------------------------------
                0.00    0.00       8/8           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [150]
[155]    0.0    0.00    0.00       8         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [155]
-----------------------------------------------
                0.00    0.00       8/8           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [161]
[156]    0.0    0.00    0.00       8         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [156]
-----------------------------------------------
                0.00    0.00       8/8           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [402]
[157]    0.0    0.00    0.00       8         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++() [157]
-----------------------------------------------
                0.00    0.00       8/8           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [402]
[158]    0.0    0.00    0.00       8         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const [158]
-----------------------------------------------
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::max_size() const [160]
[159]    0.0    0.00    0.00       8         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const [159]
-----------------------------------------------
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [261]
[160]    0.0    0.00    0.00       8         std::vector<std::thread, std::allocator<std::thread> >::max_size() const [160]
                0.00    0.00       8/8           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const [159]
                0.00    0.00       8/8           std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&) [169]
-----------------------------------------------
                0.00    0.00       1/8           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [609]
                0.00    0.00       7/8           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
[161]    0.0    0.00    0.00       8         std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [161]
                0.00    0.00       8/8           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [156]
-----------------------------------------------
                0.00    0.00       8/8           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [222]
[162]    0.0    0.00    0.00       8         _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [162]
                0.00    0.00       8/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       8/8           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [164]
-----------------------------------------------
                0.00    0.00       8/8           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [188]
[163]    0.0    0.00    0.00       8         std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [163]
                0.00    0.00       9/15          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [130]
-----------------------------------------------
                0.00    0.00       8/8           _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [162]
[164]    0.0    0.00    0.00       8         std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [164]
                0.00    0.00       8/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       8/8           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [182]
                0.00    0.00       7/7           void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...) [223]
-----------------------------------------------
                0.00    0.00       8/8           std::atomic<tervel::util::OpRecord*>::atomic() [170]
[165]    0.0    0.00    0.00       8         std::__atomic_base<tervel::util::OpRecord*>::__atomic_base() [165]
-----------------------------------------------
                0.00    0.00       8/8           std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*) [171]
[166]    0.0    0.00    0.00       8         std::move_iterator<std::thread*>::move_iterator(std::thread*) [166]
-----------------------------------------------
                0.00    0.00       8/8           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [164]
[167]    0.0    0.00    0.00       8         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
                0.00    0.00       8/9           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [150]
                0.00    0.00       8/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/7           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [211]
                0.00    0.00       7/8           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [161]
                0.00    0.00       6/6           std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [252]
                0.00    0.00       6/6           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [239]
-----------------------------------------------
                0.00    0.00       8/8           std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&) [169]
[168]    0.0    0.00    0.00       8         std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&) [168]
                0.00    0.00       8/12          __gnu_cxx::new_allocator<std::thread>::max_size() const [142]
-----------------------------------------------
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::max_size() const [160]
[169]    0.0    0.00    0.00       8         std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&) [169]
                0.00    0.00       8/8           std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&) [168]
-----------------------------------------------
                0.00    0.00       8/8           tervel::util::ProgressAssurance::ProgressAssurance(int) [302]
[170]    0.0    0.00    0.00       8         std::atomic<tervel::util::OpRecord*>::atomic() [170]
                0.00    0.00       8/8           std::__atomic_base<tervel::util::OpRecord*>::__atomic_base() [165]
-----------------------------------------------
                0.00    0.00       8/8           std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [268]
[171]    0.0    0.00    0.00       8         std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*) [171]
                0.00    0.00       8/8           std::move_iterator<std::thread*>::move_iterator(std::thread*) [166]
-----------------------------------------------
                0.00    0.00       8/8           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [402]
[172]    0.0    0.00    0.00       8         main::{lambda(std::thread&)#1}::operator()(std::thread&) const [172]
-----------------------------------------------
                0.00    0.00       7/7           tervel::util::memory::rc::PoolManager::allocate_pool() [45]
[173]    0.0    0.00    0.00       7         tervel::ThreadContext::get_thread_id() [173]
-----------------------------------------------
                0.00    0.00       7/7           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [44]
[174]    0.0    0.00    0.00       7         tervel::Tervel::get_thread_id() [174]
                0.00    0.00       7/9           std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order) [152]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [208]
[175]    0.0    0.00    0.00       7         _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [175]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/146640      operator new(unsigned long, void*) [66]
                0.00    0.00       7/7           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [218]
-----------------------------------------------
                0.00    0.00       7/7           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [184]
[176]    0.0    0.00    0.00       7         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator() [176]
-----------------------------------------------
                0.00    0.00       7/7           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [211]
[177]    0.0    0.00    0.00       7         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [177]
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [180]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [210]
[178]    0.0    0.00    0.00       7         _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
                0.00    0.00       7/20          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [120]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [116]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/146640      operator new(unsigned long, void*) [66]
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
                0.00    0.00       7/24          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [109]
-----------------------------------------------
                0.00    0.00       7/7           __gnu_cxx::__exchange_and_add_dispatch(int*, int) [233]
[179]    0.0    0.00    0.00       7         __gnu_cxx::__exchange_and_add(int volatile*, int) [179]
-----------------------------------------------
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [177]
[180]    0.0    0.00    0.00       7         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [180]
-----------------------------------------------
                0.00    0.00       7/7           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [264]
[181]    0.0    0.00    0.00       7         std::move_iterator<std::thread*>::operator*() const [181]
                0.00    0.00       7/19          std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [122]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [164]
[182]    0.0    0.00    0.00       7         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [182]
                0.00    0.00       7/7           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [212]
-----------------------------------------------
                0.00    0.00       7/7           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [212]
[183]    0.0    0.00    0.00       7         std::type_info::operator==(std::type_info const&) const [183]
-----------------------------------------------
                0.00    0.00       7/7           _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [246]
[184]    0.0    0.00    0.00       7         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [184]
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator() [176]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [194]
[185]    0.0    0.00    0.00       7         std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [185]
                0.00    0.00       7/47          int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
[186]    0.0    0.00    0.00       7         std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [186]
                0.00    0.00       7/20          int&& std::forward<int>(std::remove_reference<int>::type&) [121]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
[187]    0.0    0.00    0.00       7         std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [187]
                0.00    0.00       7/7           std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&) [226]
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [203]
-----------------------------------------------
                0.00    0.00       1/7           std::thread::_Impl_base::~_Impl_base() [638]
                0.00    0.00       6/7           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
[188]    0.0    0.00    0.00       7         std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [188]
                0.00    0.00       8/8           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [163]
-----------------------------------------------
                0.00    0.00       7/7           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [207]
[189]    0.0    0.00    0.00       7         std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [189]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
[190]    0.0    0.00    0.00       7         std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [190]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [215]
[191]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
                0.00    0.00       7/7           _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [227]
                0.00    0.00       7/7           std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [190]
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
                0.00    0.00       7/39          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [107]
                0.00    0.00       7/13          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [137]
                0.00    0.00       7/13          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [135]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
[192]    0.0    0.00    0.00       7         std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [192]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
[193]    0.0    0.00    0.00       7         std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [192]
                0.00    0.00       7/7           _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [228]
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
                0.00    0.00       7/20          int&& std::forward<int>(std::remove_reference<int>::type&) [121]
                0.00    0.00       7/12          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [144]
                0.00    0.00       7/7           std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [186]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
[194]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [194]
                0.00    0.00       7/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       7/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [196]
                0.00    0.00       7/47          int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
                0.00    0.00       7/7           std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [185]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
[195]    0.0    0.00    0.00       7         std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_ [197]
                0.00    0.00       7/7           std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&) [229]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [199]
                0.00    0.00       7/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       7/13          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [138]
                0.00    0.00       7/14          std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [133]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [194]
[196]    0.0    0.00    0.00       7         std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [196]
                0.00    0.00       7/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [200]
                0.00    0.00       7/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       7/14          std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [133]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
[197]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_ [197]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [199]
[198]    0.0    0.00    0.00       7         std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&) [198]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
[199]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [199]
                0.00    0.00       7/7           _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_ [230]
                0.00    0.00       7/7           std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&) [198]
                0.00    0.00       7/12          _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [145]
                0.00    0.00       7/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       7/14          std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [134]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [196]
[200]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [200]
                0.00    0.00       7/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm4EJEEC2Ev [201]
                0.00    0.00       7/14          std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [134]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [200]
[201]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm4EJEEC2Ev [201]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [218]
[202]    0.0    0.00    0.00       7         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [202]
                0.00    0.00       7/7           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [215]
-----------------------------------------------
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [187]
[203]    0.0    0.00    0.00       7         std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [203]
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [206]
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [205]
-----------------------------------------------
                0.00    0.00       7/7           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [264]
[204]    0.0    0.00    0.00       7         std::move_iterator<std::thread*>::operator++() [204]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [203]
[205]    0.0    0.00    0.00       7         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [205]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [203]
[206]    0.0    0.00    0.00       7         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [206]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
[207]    0.0    0.00    0.00       7         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [207]
                0.00    0.00       7/7           std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [189]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [209]
[208]    0.0    0.00    0.00       7         _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [208]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [175]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
[209]    0.0    0.00    0.00       7         _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [209]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [208]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [239]
[210]    0.0    0.00    0.00       7         _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [210]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/20          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [120]
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
[211]    0.0    0.00    0.00       7         std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [211]
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [177]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [182]
[212]    0.0    0.00    0.00       7         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [212]
                0.00    0.00       7/7           std::type_info::operator==(std::type_info const&) const [183]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
[213]    0.0    0.00    0.00       7         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >) [213]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [116]
-----------------------------------------------
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [178]
[214]    0.0    0.00    0.00       7         _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [214]
                0.00    0.00       7/7           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [207]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [116]
                0.00    0.00       7/7           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >) [213]
                0.00    0.00       7/24          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [109]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [209]
-----------------------------------------------
                0.00    0.00       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [202]
[215]    0.0    0.00    0.00       7         _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [215]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
-----------------------------------------------
                0.00    0.00       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [236]
[216]    0.0    0.00    0.00       7         _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [216]
                0.00    0.00       7/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       7/47          int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
                0.00    0.00       6/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       6/39          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [107]
                0.00    0.00       6/6           std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [218]
[217]    0.0    0.00    0.00       7         std::thread::_Impl_base::_Impl_base() [217]
-----------------------------------------------
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [175]
[218]    0.0    0.00    0.00       7         std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [218]
                0.00    0.00       7/7           std::thread::_Impl_base::_Impl_base() [217]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [202]
-----------------------------------------------
                0.00    0.00       7/7           main [8]
[219]    0.0    0.00    0.00       7         std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
                0.00    0.00       7/7           std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [187]
                0.00    0.00       6/40          std::thread::id::id() [105]
                0.00    0.00       6/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       6/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       6/47          int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
                0.00    0.00       6/12          void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [146]
                0.00    0.00       6/6           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [243]
                0.00    0.00       6/7           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [188]
                0.00    0.00       6/6           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [234]
-----------------------------------------------
                0.00    0.00       7/7           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [264]
[220]    0.0    0.00    0.00       7         _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [220]
                0.00    0.00       7/35          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [108]
                0.00    0.00       7/146640      operator new(unsigned long, void*) [66]
                0.00    0.00       7/13          std::thread::thread(std::thread&&) [140]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
[221]    0.0    0.00    0.00       7         std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
                0.00    0.00       7/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       6/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       6/47          int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
                0.00    0.00       6/12          void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [146]
                0.00    0.00       6/6           std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*)) [242]
                0.00    0.00       6/6           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [236]
-----------------------------------------------
                0.00    0.00       7/7           _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [246]
[222]    0.0    0.00    0.00       7         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [222]
                0.00    0.00       8/8           _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [162]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [164]
[223]    0.0    0.00    0.00       7         void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...) [223]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[224]    0.0    0.00    0.00       7         _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [224]
                0.00    0.00       6/6           std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [247]
-----------------------------------------------
                0.00    0.00       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [236]
[225]    0.0    0.00    0.00       7         std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*)) [225]
-----------------------------------------------
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [187]
[226]    0.0    0.00    0.00       7         std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&) [226]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [191]
[227]    0.0    0.00    0.00       7         _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [227]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [193]
[228]    0.0    0.00    0.00       7         _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [228]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [195]
[229]    0.0    0.00    0.00       7         std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&) [229]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [199]
[230]    0.0    0.00    0.00       7         _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_ [230]
-----------------------------------------------
                0.00    0.00       6/6           __gnu_cxx::__exchange_and_add_dispatch(int*, int) [233]
[231]    0.0    0.00    0.00       6         __gthread_active_p() [231]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [240]
[232]    0.0    0.00    0.00       6         _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [232]
                0.00    0.00       6/35          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [108]
                0.00    0.00       6/146640      operator new(unsigned long, void*) [66]
                0.00    0.00       6/13          std::thread::thread(std::thread&&) [140]
-----------------------------------------------
                0.00    0.00       6/6           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [238]
[233]    0.0    0.00    0.00       6         __gnu_cxx::__exchange_and_add_dispatch(int*, int) [233]
                0.00    0.00       7/7           __gnu_cxx::__exchange_and_add(int volatile*, int) [179]
                0.00    0.00       6/6           __gthread_active_p() [231]
-----------------------------------------------
                0.00    0.00       6/6           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
[234]    0.0    0.00    0.00       6         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [234]
                0.00    0.00       6/6           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [237]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [216]
[235]    0.0    0.00    0.00       6         std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [235]
                0.00    0.00       7/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       7/47          int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [194]
                0.00    0.00       6/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       6/39          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [107]
                0.00    0.00       6/13          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [135]
-----------------------------------------------
                0.00    0.00       6/6           std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
[236]    0.0    0.00    0.00       6         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [236]
                0.00    0.00       7/81          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [102]
                0.00    0.00       7/73          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [103]
                0.00    0.00       7/47          int& std::forward<int&>(std::remove_reference<int&>::type&) [104]
                0.00    0.00       7/7           std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*)) [225]
                0.00    0.00       7/7           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [216]
-----------------------------------------------
                0.00    0.00       6/6           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [234]
[237]    0.0    0.00    0.00       6         std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [237]
                0.00    0.00       6/15          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [130]
-----------------------------------------------
                0.00    0.00       6/6           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [130]
[238]    0.0    0.00    0.00       6         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [238]
                0.00    0.00       6/6           __gnu_cxx::__exchange_and_add_dispatch(int*, int) [233]
-----------------------------------------------
                0.00    0.00       6/6           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
[239]    0.0    0.00    0.00       6         _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [239]
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [210]
                0.00    0.00       6/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       6/20          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [120]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [241]
[240]    0.0    0.00    0.00       6         _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [240]
                0.00    0.00       6/35          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [108]
                0.00    0.00       6/6           _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [232]
-----------------------------------------------
                0.00    0.00       2/6           void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [244]
                0.00    0.00       4/6           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
[241]    0.0    0.00    0.00       6         _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [241]
                0.00    0.00       6/35          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [108]
                0.00    0.00       6/6           _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [240]
-----------------------------------------------
                0.00    0.00       6/6           std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [221]
[242]    0.0    0.00    0.00       6         std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*)) [242]
-----------------------------------------------
                0.00    0.00       6/6           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [219]
[243]    0.0    0.00    0.00       6         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [243]
                0.00    0.00       6/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       6/6           _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [246]
-----------------------------------------------
                0.00    0.00       6/6           std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [245]
[244]    0.0    0.00    0.00       6         void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [244]
                0.00    0.00       6/35          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [108]
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
                0.00    0.00       2/6           _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [241]
-----------------------------------------------
                0.00    0.00       6/6           main [8]
[245]    0.0    0.00    0.00       6         std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [245]
                0.00    0.00       6/19          std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [122]
                0.00    0.00       6/6           void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [244]
-----------------------------------------------
                0.00    0.00       6/6           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [243]
[246]    0.0    0.00    0.00       6         _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [246]
                0.00    0.00       7/99          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [101]
                0.00    0.00       7/7           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [184]
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [222]
                0.00    0.00       7/24          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [109]
-----------------------------------------------
                0.00    0.00       6/6           _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [224]
[247]    0.0    0.00    0.00       6         std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [247]
                0.00    0.00       6/13          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [137]
-----------------------------------------------
                0.00    0.00       6/6           std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&) [250]
[248]    0.0    0.00    0.00       6         std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [248]
                0.00    0.00       5/12          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [144]
-----------------------------------------------
                0.00    0.00       6/6           _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [251]
[249]    0.0    0.00    0.00       6         _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE [249]
                0.00    0.00       5/12          _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [145]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[250]    0.0    0.00    0.00       6         std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&) [250]
                0.00    0.00       6/6           std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [248]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[251]    0.0    0.00    0.00       6         _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [251]
                0.00    0.00       6/6           _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE [249]
-----------------------------------------------
                0.00    0.00       6/6           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [167]
[252]    0.0    0.00    0.00       6         std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [252]
-----------------------------------------------
                0.00    0.00       5/5           void std::_Destroy<std::thread*>(std::thread*, std::thread*) [257]
[253]    0.0    0.00    0.00       5         void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [253]
                0.00    0.00      15/22          std::thread* std::__addressof<std::thread>(std::thread&) [113]
                0.00    0.00      15/15          void std::_Destroy<std::thread>(std::thread*) [131]
-----------------------------------------------
                0.00    0.00       1/5           std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [370]
                0.00    0.00       4/5           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
[254]    0.0    0.00    0.00       5         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [254]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long) [259]
-----------------------------------------------
                0.00    0.00       5/5           _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [256]
[255]    0.0    0.00    0.00       5         _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE [255]
                0.00    0.00       6/13          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [138]
-----------------------------------------------
                0.00    0.00       5/5           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[256]    0.0    0.00    0.00       5         _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [256]
                0.00    0.00       5/5           _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE [255]
-----------------------------------------------
                0.00    0.00       5/5           void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [258]
[257]    0.0    0.00    0.00       5         void std::_Destroy<std::thread*>(std::thread*, std::thread*) [257]
                0.00    0.00       5/5           void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [253]
-----------------------------------------------
                0.00    0.00       1/5           std::vector<std::thread, std::allocator<std::thread> >::~vector() [384]
                0.00    0.00       4/5           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
[258]    0.0    0.00    0.00       5         void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [258]
                0.00    0.00       5/5           void std::_Destroy<std::thread*>(std::thread*, std::thread*) [257]
-----------------------------------------------
                0.00    0.00       4/4           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [254]
[259]    0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long) [259]
-----------------------------------------------
                0.00    0.00       4/4           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [263]
[260]    0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [260]
                0.00    0.00       4/12          __gnu_cxx::new_allocator<std::thread>::max_size() const [142]
-----------------------------------------------
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
[261]    0.0    0.00    0.00       4         std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [261]
                0.00    0.00      16/20          std::vector<std::thread, std::allocator<std::thread> >::size() const [119]
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::max_size() const [160]
                0.00    0.00       4/4           unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [269]
-----------------------------------------------
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [362]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [364]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [366]
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [359]
[262]    0.0    0.00    0.00       4         std::_Tuple_impl<2ul>::_Tuple_impl() [262]
-----------------------------------------------
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
[263]    0.0    0.00    0.00       4         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [263]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [260]
-----------------------------------------------
                0.00    0.00       4/4           std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [266]
[264]    0.0    0.00    0.00       4         std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [264]
                0.00    0.00      11/11          bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [148]
                0.00    0.00       7/7           std::move_iterator<std::thread*>::operator*() const [181]
                0.00    0.00       7/22          std::thread* std::__addressof<std::thread>(std::thread&) [113]
                0.00    0.00       7/7           std::move_iterator<std::thread*>::operator++() [204]
                0.00    0.00       7/7           _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [220]
-----------------------------------------------
                0.00    0.00       4/4           void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [244]
[265]    0.0    0.00    0.00       4         _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
                0.00    0.00       8/9           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [151]
                0.00    0.00       4/4           std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [261]
                0.00    0.00       4/4           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [263]
                0.00    0.00       4/35          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [108]
                0.00    0.00       4/20          std::vector<std::thread, std::allocator<std::thread> >::size() const [119]
                0.00    0.00       4/6           _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [241]
                0.00    0.00       4/4           std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [268]
                0.00    0.00       4/5           void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [258]
                0.00    0.00       4/5           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [254]
-----------------------------------------------
                0.00    0.00       4/4           std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&) [267]
[266]    0.0    0.00    0.00       4         std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [266]
                0.00    0.00       4/4           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [264]
-----------------------------------------------
                0.00    0.00       4/4           std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [268]
[267]    0.0    0.00    0.00       4         std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&) [267]
                0.00    0.00       4/4           std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [266]
-----------------------------------------------
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [265]
[268]    0.0    0.00    0.00       4         std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [268]
                0.00    0.00       8/8           std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*) [171]
                0.00    0.00       4/4           std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&) [267]
-----------------------------------------------
                0.00    0.00       4/4           std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [261]
[269]    0.0    0.00    0.00       4         unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [269]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [332]
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [359]
                0.00    0.00       1/4           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [351]
                0.00    0.00       1/4           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [376]
[270]    0.0    0.00    0.00       4         std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [270]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [334]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [364]
                0.00    0.00       1/4           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [353]
                0.00    0.00       1/4           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [377]
[271]    0.0    0.00    0.00       4         std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [271]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [336]
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [362]
                0.00    0.00       1/4           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [355]
                0.00    0.00       1/4           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [378]
[272]    0.0    0.00    0.00       4         std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [272]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [338]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [366]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [358]
                0.00    0.00       1/4           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [379]
[273]    0.0    0.00    0.00       4         std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [273]
-----------------------------------------------
                0.00    0.00       3/3           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [44]
[274]    0.0    0.00    0.00       3         tervel::util::memory::hp::ListManager::allocate_list() [274]
                0.00    0.00       2/2           tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*) [283]
-----------------------------------------------
                0.00    0.00       3/3           std::atomic<unsigned long>::atomic(unsigned long) [278]
[275]    0.0    0.00    0.00       3         std::__atomic_base<unsigned long>::__atomic_base(unsigned long) [275]
-----------------------------------------------
                0.00    0.00       3/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [277]
[276]    0.0    0.00    0.00       3         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [276]
                0.00    0.00       3/24          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [109]
-----------------------------------------------
                0.00    0.00       3/3           void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [285]
[277]    0.0    0.00    0.00       3         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [277]
                0.00    0.00       3/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [276]
                0.00    0.00       2/2           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [290]
-----------------------------------------------
                0.00    0.00       1/3           tervel::Tervel::Tervel(unsigned long) [311]
                0.00    0.00       2/3           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [300]
[278]    0.0    0.00    0.00       3         std::atomic<unsigned long>::atomic(unsigned long) [278]
                0.00    0.00       3/3           std::__atomic_base<unsigned long>::__atomic_base(unsigned long) [275]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [324]
                0.00    0.00       1/3           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [351]
                0.00    0.00       1/3           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [376]
[279]    0.0    0.00    0.00       3         tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [279]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [326]
                0.00    0.00       1/3           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [353]
                0.00    0.00       1/3           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [377]
[280]    0.0    0.00    0.00       3         tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [280]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [328]
                0.00    0.00       1/3           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [355]
                0.00    0.00       1/3           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [378]
[281]    0.0    0.00    0.00       3         std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [281]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [330]
                0.00    0.00       1/3           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [358]
                0.00    0.00       1/3           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [379]
[282]    0.0    0.00    0.00       3         std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [282]
-----------------------------------------------
                0.00    0.00       2/2           tervel::util::memory::hp::ListManager::allocate_list() [274]
[283]    0.0    0.00    0.00       2         tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*) [283]
-----------------------------------------------
                0.00    0.00       2/2           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [291]
[284]    0.0    0.00    0.00       2         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [284]
-----------------------------------------------
                0.00    0.00       2/2           std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [375]
[285]    0.0    0.00    0.00       2         void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [285]
                0.00    0.00       3/3           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [277]
-----------------------------------------------
                0.00    0.00       1/2           std::vector<std::thread, std::allocator<std::thread> >::begin() [382]
                0.00    0.00       1/2           std::vector<std::thread, std::allocator<std::thread> >::end() [381]
[286]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [286]
-----------------------------------------------
                0.00    0.00       2/2           main [8]
[287]    0.0    0.00    0.00       2         std::__atomic_base<unsigned long>::load(std::memory_order) const [287]
-----------------------------------------------
                0.00    0.00       2/2           std::atomic<bool>::atomic(bool) [293]
[288]    0.0    0.00    0.00       2         std::atomic_bool::atomic_bool(bool) [288]
                0.00    0.00       2/2           std::__atomic_base<bool>::__atomic_base(bool) [289]
-----------------------------------------------
                0.00    0.00       2/2           std::atomic_bool::atomic_bool(bool) [288]
[289]    0.0    0.00    0.00       2         std::__atomic_base<bool>::__atomic_base(bool) [289]
-----------------------------------------------
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [277]
[290]    0.0    0.00    0.00       2         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [290]
-----------------------------------------------
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [609]
[291]    0.0    0.00    0.00       2         std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [291]
                0.00    0.00       2/2           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [284]
-----------------------------------------------
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [609]
[292]    0.0    0.00    0.00       2         void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [292]
                0.00    0.00       1/1           std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [375]
-----------------------------------------------
                0.00    0.00       2/2           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [300]
[293]    0.0    0.00    0.00       2         std::atomic<bool>::atomic(bool) [293]
                0.00    0.00       2/2           std::atomic_bool::atomic_bool(bool) [288]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [673]
[294]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE [294]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [297]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [673]
[295]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv [295]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [299]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [673]
[296]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb [296]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [298]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE [294]
[297]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [297]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb [296]
[298]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [298]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv [295]
[299]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [299]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[300]    0.0    0.00    0.00       1         TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [300]
                0.00    0.00       2/3           std::atomic<unsigned long>::atomic(unsigned long) [278]
                0.00    0.00       2/2           std::atomic<bool>::atomic(bool) [293]
                0.00    0.00       1/1           std::atomic<int>::atomic(int) [380]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[301]    0.0    0.00    0.00       1         tervel::ThreadContext::~ThreadContext() [301]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [311]
[302]    0.0    0.00    0.00       1         tervel::util::ProgressAssurance::ProgressAssurance(int) [302]
                0.00    0.00       8/8           std::atomic<tervel::util::OpRecord*>::atomic() [170]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [346]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [312]
[303]    0.0    0.00    0.00       1         tervel::util::ProgressAssurance::~ProgressAssurance() [303]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [347]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [311]
[304]    0.0    0.00    0.00       1         tervel::util::memory::hp::ListManager::ListManager(unsigned long) [304]
                0.00    0.00       8/8           tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool() [153]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [340]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [312]
[305]    0.0    0.00    0.00       1         tervel::util::memory::hp::ListManager::~ListManager() [305]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [341]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [311]
[306]    0.0    0.00    0.00       1         tervel::util::memory::hp::HazardPointer::HazardPointer(int) [306]
                0.00    0.00      16/16          std::atomic<void*>::atomic() [128]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [349]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [312]
[307]    0.0    0.00    0.00       1         tervel::util::memory::hp::HazardPointer::~HazardPointer() [307]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [350]
-----------------------------------------------
                0.00    0.00       1/1           tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [18]
[308]    0.0    0.00    0.00       1         tervel::util::memory::hp::Element::Element() [308]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [311]
[309]    0.0    0.00    0.00       1         tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [309]
                0.00    0.00       8/8           tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [154]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [343]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [312]
[310]    0.0    0.00    0.00       1         tervel::util::memory::rc::PoolManager::~PoolManager() [310]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [344]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[311]    0.0    0.00    0.00       1         tervel::Tervel::Tervel(unsigned long) [311]
                0.00    0.00       1/3           std::atomic<unsigned long>::atomic(unsigned long) [278]
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::HazardPointer(int) [306]
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::ListManager(unsigned long) [304]
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [309]
                0.00    0.00       1/1           tervel::util::ProgressAssurance::ProgressAssurance(int) [302]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[312]    0.0    0.00    0.00       1         tervel::Tervel::~Tervel() [312]
                0.00    0.00       1/1           tervel::util::ProgressAssurance::~ProgressAssurance() [303]
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::~PoolManager() [310]
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::~ListManager() [305]
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::~HazardPointer() [307]
-----------------------------------------------
                0.00    0.00       1/1           std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [373]
[313]    0.0    0.00    0.00       1         void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [313]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::thread>::allocator() [321]
[314]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::thread>::new_allocator() [314]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::thread>::~allocator() [322]
[315]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::thread>::~new_allocator() [315]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [341]
[316]    0.0    0.00    0.00       1         std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const [316]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [344]
[317]    0.0    0.00    0.00       1         std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const [317]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [347]
[318]    0.0    0.00    0.00       1         std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const [318]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [350]
[319]    0.0    0.00    0.00       1         std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const [319]
-----------------------------------------------
                0.00    0.00       1/1           void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [598]
[320]    0.0    0.00    0.00       1         std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [320]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [367]
[321]    0.0    0.00    0.00       1         std::allocator<std::thread>::allocator() [321]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::thread>::new_allocator() [314]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [368]
[322]    0.0    0.00    0.00       1         std::allocator<std::thread>::~allocator() [322]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::thread>::~new_allocator() [315]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [357]
[323]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&) [323]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [351]
[324]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [324]
                0.00    0.00       1/3           tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [279]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [352]
[325]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&) [325]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [353]
[326]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [326]
                0.00    0.00       1/3           tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [280]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [354]
[327]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&) [327]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [355]
[328]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [328]
                0.00    0.00       1/3           std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [281]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [356]
[329]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&) [329]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [358]
[330]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [330]
                0.00    0.00       1/3           std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [282]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [363]
[331]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&) [331]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [359]
[332]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [332]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [270]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [360]
[333]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&) [333]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [364]
[334]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [334]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [271]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [361]
[335]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&) [335]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [362]
[336]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [336]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [272]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [365]
[337]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&) [337]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [366]
[338]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [338]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [273]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [341]
[339]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [339]
                0.00    0.00       1/1           _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [398]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::ListManager(unsigned long) [304]
[340]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [340]
                0.00    0.00       1/1           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [376]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::~ListManager() [305]
[341]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [341]
                0.00    0.00       1/1           _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [394]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [339]
                0.00    0.00       1/1           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const [316]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [344]
[342]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [342]
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [397]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [309]
[343]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [343]
                0.00    0.00       1/1           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [377]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::~PoolManager() [310]
[344]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [344]
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [393]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [342]
                0.00    0.00       1/1           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const [317]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [347]
[345]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [345]
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [399]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::ProgressAssurance::ProgressAssurance(int) [302]
[346]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [346]
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [378]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::ProgressAssurance::~ProgressAssurance() [303]
[347]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [347]
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [395]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [345]
                0.00    0.00       1/1           std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const [318]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [350]
[348]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [348]
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [400]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::HazardPointer(int) [306]
[349]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [349]
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [379]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::~HazardPointer() [307]
[350]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [350]
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [396]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [348]
                0.00    0.00       1/1           std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const [319]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [376]
[351]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [351]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [270]
                0.00    0.00       1/3           tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [279]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [359]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [324]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [386]
[352]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [352]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&) [325]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [377]
[353]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [353]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [271]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [364]
                0.00    0.00       1/3           tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [280]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [326]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [387]
[354]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [354]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&) [327]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [378]
[355]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [355]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [272]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [362]
                0.00    0.00       1/3           std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [281]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [328]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [388]
[356]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [356]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&) [329]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&) [385]
[357]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [357]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&) [323]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [379]
[358]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [358]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [273]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [366]
                0.00    0.00       1/3           std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [282]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [330]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [351]
[359]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [359]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [262]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [270]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [332]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE [390]
[360]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [360]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&) [333]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&) [391]
[361]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [361]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&) [335]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [355]
[362]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [362]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [262]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [272]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [336]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&) [389]
[363]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [363]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&) [331]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [353]
[364]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [364]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [262]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [271]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [334]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE [392]
[365]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [365]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&) [337]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [358]
[366]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [366]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [273]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [262]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [338]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [369]
[367]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [367]
                0.00    0.00       1/1           std::allocator<std::thread>::allocator() [321]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [370]
[368]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [368]
                0.00    0.00       1/1           std::allocator<std::thread>::~allocator() [322]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::vector() [383]
[369]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [369]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [367]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::~vector() [384]
[370]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [370]
                0.00    0.00       1/5           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [254]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [368]
-----------------------------------------------
                0.00    0.00       1/1           run_enqueue_dequeue(int, TestObject*) [7]
[371]    0.0    0.00    0.00       1         std::__atomic_base<int>::fetch_add(int, std::memory_order) [371]
-----------------------------------------------
                0.00    0.00       1/1           std::atomic<int>::atomic(int) [380]
[372]    0.0    0.00    0.00       1         std::__atomic_base<int>::__atomic_base(int) [372]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [374]
[373]    0.0    0.00    0.00       1         std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [373]
                0.00    0.00       1/1           void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [313]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose() [610]
[374]    0.0    0.00    0.00       1         void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [374]
                0.00    0.00       1/1           std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [373]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [292]
[375]    0.0    0.00    0.00       1         std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [375]
                0.00    0.00       2/2           void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [285]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [340]
[376]    0.0    0.00    0.00       1         std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [376]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [270]
                0.00    0.00       1/3           tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [279]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [351]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [343]
[377]    0.0    0.00    0.00       1         _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [377]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [271]
                0.00    0.00       1/3           tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [280]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [353]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [346]
[378]    0.0    0.00    0.00       1         _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [378]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [272]
                0.00    0.00       1/3           std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [281]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [355]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [349]
[379]    0.0    0.00    0.00       1         _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [379]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [273]
                0.00    0.00       1/3           std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [282]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [358]
-----------------------------------------------
                0.00    0.00       1/1           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [300]
[380]    0.0    0.00    0.00       1         std::atomic<int>::atomic(int) [380]
                0.00    0.00       1/1           std::__atomic_base<int>::__atomic_base(int) [372]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[381]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::end() [381]
                0.00    0.00       1/2           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [286]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[382]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::begin() [382]
                0.00    0.00       1/2           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [286]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[383]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::vector() [383]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [369]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[384]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::~vector() [384]
                0.00    0.00       1/9           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [151]
                0.00    0.00       1/5           void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [258]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [370]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [394]
[385]    0.0    0.00    0.00       1         std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&) [385]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [357]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [393]
[386]    0.0    0.00    0.00       1         _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [386]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [352]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [395]
[387]    0.0    0.00    0.00       1         _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [387]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [354]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [396]
[388]    0.0    0.00    0.00       1         std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [388]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [356]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [398]
[389]    0.0    0.00    0.00       1         std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&) [389]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [363]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [397]
[390]    0.0    0.00    0.00       1         _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE [390]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [360]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [399]
[391]    0.0    0.00    0.00       1         std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&) [391]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [361]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [400]
[392]    0.0    0.00    0.00       1         _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE [392]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [365]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [344]
[393]    0.0    0.00    0.00       1         std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [393]
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [386]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [341]
[394]    0.0    0.00    0.00       1         _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [394]
                0.00    0.00       1/1           std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&) [385]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [347]
[395]    0.0    0.00    0.00       1         _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [395]
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [387]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [350]
[396]    0.0    0.00    0.00       1         _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [396]
                0.00    0.00       1/1           std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [388]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [342]
[397]    0.0    0.00    0.00       1         std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [397]
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE [390]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [339]
[398]    0.0    0.00    0.00       1         _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [398]
                0.00    0.00       1/1           std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&) [389]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [345]
[399]    0.0    0.00    0.00       1         _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [399]
                0.00    0.00       1/1           std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&) [391]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [348]
[400]    0.0    0.00    0.00       1         _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [400]
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE [392]
-----------------------------------------------
                0.00    0.00       1/1           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [402]
[401]    0.0    0.00    0.00       1         std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&) [401]
-----------------------------------------------
                0.00    0.00       1/1           main [8]
[402]    0.0    0.00    0.00       1         main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [402]
                0.00    0.00       9/9           bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [149]
                0.00    0.00       8/8           main::{lambda(std::thread&)#1}::operator()(std::thread&) const [172]
                0.00    0.00       8/8           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const [158]
                0.00    0.00       8/8           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++() [157]
                0.00    0.00       1/1           std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&) [401]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.


Index by function name

 [294] _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE (main_buffer.cc) [319] std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const [207] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base()
 [295] _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv (pool_manager.cc) [16] std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [290] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
 [296] _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb (descriptor_pool.cc) [38] std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const [373] std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*)
   [7] run_enqueue_dequeue(int, TestObject*) [36] std::atomic<void*>::load(std::memory_order) const [208] _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_
   [4] run(int, tervel::Tervel*, TestObject*) [320] std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [374] void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*)
 [297] __static_initialization_and_destruction_0(int, int) (main_buffer.cc) [115] std::thread::joinable() const [209] _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_
 [298] __static_initialization_and_destruction_0(int, int) (descriptor_pool.cc) [261] std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [375] std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
 [299] __static_initialization_and_destruction_0(int, int) (pool_manager.cc) [119] std::vector<std::thread, std::allocator<std::thread> >::size() const [291] std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
 [114] __gthread_equal(unsigned long, unsigned long) (gthr-default.h) [160] std::vector<std::thread, std::allocator<std::thread> >::max_size() const [210] _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_
 [231] __gthread_active_p() (gthr-default.h) [183] std::type_info::operator==(std::type_info const&) const [292] void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
 [300] TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [116] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [211] std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long)
  [71] tervel::ThreadContext::delay_count(unsigned long) [184] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [239] _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_
 [173] tervel::ThreadContext::get_thread_id() [109] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [168] std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&)
  [76] tervel::ThreadContext::get_progress_assurance() [150] std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [240] _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_
  [65] tervel::ThreadContext::get_rc_descriptor_pool() [161] std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [169] std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&)
  [44] tervel::ThreadContext::ThreadContext(tervel::Tervel*) [321] std::allocator<std::thread>::allocator() [241] _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_
 [301] tervel::ThreadContext::~ThreadContext() [322] std::allocator<std::thread>::~allocator() [264] std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
   [9] tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [132] std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&) [212] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
   [1] tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [135] std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [213] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >)
  [12] tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [323] std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&) [276] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl()
  [41] tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [324] std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [214] _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_
  [23] tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [325] std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&) [277] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
  [10] tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [326] std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [242] std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*))
   [2] tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [327] std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&) [376] std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&)
  [51] tervel::wf_ring_buffer::RingBuffer<long>::is_full() [328] std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [215] _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_
  [53] tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [329] std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&) [216] _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_
  [18] tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [330] std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [377] _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_
  [69] tervel::wf_ring_buffer::Node<long>::seq() [331] std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&) [378] _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_
  [37] tervel::wf_ring_buffer::Node<long>::val() [332] std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [379] _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_
  [68] tervel::wf_ring_buffer::Node<long>::Node(long, long) [333] std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&) [19] std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  [77] tervel::wf_ring_buffer::Node<long>::~Node() [334] std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [33] std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  [99] tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode() [335] std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&) [84] std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic()
  [39] tervel::wf_ring_buffer::ElemNode<long>::on_watch(std::atomic<void*>*, void*) [336] std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [87] std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*)
  [90] tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [337] std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&) [127] std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*)
 [100] tervel::wf_ring_buffer::ElemNode<long>::~ElemNode() [338] std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [170] std::atomic<tervel::util::OpRecord*>::atomic()
  [92] tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode() [129] std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [128] std::atomic<void*>::atomic()
  [70] tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [185] std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [293] std::atomic<bool>::atomic(bool)
  [94] tervel::wf_ring_buffer::EmptyNode<long>::~EmptyNode() [186] std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [380] std::atomic<int>::atomic(int)
  [89] tervel::util::Descriptor::on_unwatch() [143] std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&) [79] std::atomic<long>::atomic(long)
  [85] tervel::util::Descriptor::on_is_watched() [133] std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [278] std::atomic<unsigned long>::atomic(unsigned long)
  [93] tervel::util::Descriptor::on_watch(std::atomic<void*>*, void*) [136] std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&) [217] std::thread::_Impl_base::_Impl_base()
  [67] tervel::util::Descriptor::Descriptor() [134] std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [243] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  [86] tervel::util::Descriptor::~Descriptor() [187] std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [105] std::thread::id::id()
  [74] tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [188] std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [139] std::thread::swap(std::thread&)
  [73] tervel::util::ProgressAssurance::p_check_for_announcement() [162] _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [218] std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
 [302] tervel::util::ProgressAssurance::ProgressAssurance(int) [234] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [219] std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
 [303] tervel::util::ProgressAssurance::~ProgressAssurance() [339] std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [140] std::thread::thread(std::thread&&)
 [283] tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*) [340] std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [117] std::thread::~thread()
 [153] tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool() [341] std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [244] void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&)
 [274] tervel::util::memory::hp::ListManager::allocate_list() [342] std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [265] _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_
 [304] tervel::util::memory::hp::ListManager::ListManager(unsigned long) [343] std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [381] std::vector<std::thread, std::allocator<std::thread> >::end()
 [305] tervel::util::memory::hp::ListManager::~ListManager() [344] std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [382] std::vector<std::thread, std::allocator<std::thread> >::begin()
 [306] tervel::util::memory::hp::HazardPointer::HazardPointer(int) [345] std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [245] std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&)
 [307] tervel::util::memory::hp::HazardPointer::~HazardPointer() [346] std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [383] std::vector<std::thread, std::allocator<std::thread> >::vector()
 [308] tervel::util::memory::hp::Element::Element() [347] std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [384] std::vector<std::thread, std::allocator<std::thread> >::~vector()
  [21] tervel::util::memory::rc::is_watched(tervel::util::Descriptor*) [348] std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [220] _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_
  [64] tervel::util::memory::rc::PoolElement::descriptor() [349] std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [113] std::thread* std::__addressof<std::thread>(std::thread&)
  [91] void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [350] std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [246] _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_
  [82] void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long&>(long&) [189] std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [247] std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  [97] void tervel::util::memory::rc::PoolElement::init_descriptor<tervel::wf_ring_buffer::EmptyNode<long>, long>(long&&) [137] std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [385] std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&)
  [75] tervel::util::memory::rc::PoolElement::cleanup_descriptor() [190] std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [386] _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
  [55] tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [235] std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [387] _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
  [26] tervel::util::memory::rc::PoolElement::next() [351] std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [388] std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&)
  [80] tervel::util::memory::rc::PoolElement::Header::Header() [352] std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [389] std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&)
  [48] tervel::util::memory::rc::PoolElement::header() [353] std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [390] _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE
  [52] tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [354] std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [391] std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&)
 [154] tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [355] std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [392] _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE
  [45] tervel::util::memory::rc::PoolManager::allocate_pool() [356] std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [248] std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&)
 [309] tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [191] _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [255] _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE
 [310] tervel::util::memory::rc::PoolManager::~PoolManager() [357] _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [249] _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE
  [35] tervel::util::memory::rc::unmark_first(void*) [358] _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [221] std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
  [54] tervel::util::memory::rc::DescriptorPool::add_to_safe(tervel::util::Descriptor*) [359] std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [222] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  [56] tervel::util::memory::rc::DescriptorPool::add_to_unsafe(tervel::util::Descriptor*) [360] std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [266] std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
  [15] tervel::util::memory::rc::DescriptorPool::get_from_pool(bool) [361] std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [267] std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&)
  [27] tervel::wf_ring_buffer::ElemNode<long>* tervel::util::memory::rc::DescriptorPool::get_descriptor<tervel::wf_ring_buffer::ElemNode<long>, long&, long&>(long&, long&) [362] std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [72] std::__cmpexch_failure_order(std::memory_order)
  [24] _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [192] std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [223] void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...)
  [43] _ZN6tervel4util6memory2rc14DescriptorPool14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [193] std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [171] std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*)
  [29] tervel::util::memory::rc::DescriptorPool::free_descriptor(tervel::util::Descriptor*, bool) [363] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [268] std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&)
  [22] tervel::util::memory::rc::DescriptorPool::try_clear_unsafe_pool(bool) [364] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [393] std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
  [46] tervel::util::memory::rc::DescriptorPool::reserve(int) [365] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [224] _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  [47] tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [366] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [394] _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  [28] _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer8ElemNodeIlEEJRlS7_EEEPT_DpOT0_ [144] _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [395] _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  [25] _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJRlEEEPT_DpOT0_ [194] _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [396] _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  [42] _ZN6tervel4util6memory2rc14get_descriptorINS_14wf_ring_buffer9EmptyNodeIlEEJlEEEPT_DpOT0_ [262] std::_Tuple_impl<2ul>::_Tuple_impl() [250] std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&)
  [30] tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [138] std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [397] std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
  [49] tervel::util::memory::rc::get_elem_from_descriptor(tervel::util::Descriptor*) [195] std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [398] _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  [14] tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [196] std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [399] _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  [13] tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [197] _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_ [400] _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [174] tervel::Tervel::get_thread_id() [198] std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&) [256] _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [311] tervel::Tervel::Tervel(unsigned long) [145] _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [251] _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [312] tervel::Tervel::~Tervel() [199] _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [269] unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
 [313] void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [200] _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [252] std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
 [175] _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [201] _ZNSt11_Tuple_implILm4EJEEC2Ev [106] std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)
 [111] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [288] std::atomic_bool::atomic_bool(bool) [225] std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*))
 [176] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator() [3] _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [226] std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&)
 [110] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator() [202] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [227] _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
 [284] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [236] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [228] _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
 [285] void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [5] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [229] std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&)
 [177] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [253] void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [230] _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_
 [178] _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [263] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [122] std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&)
 [155] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [367] std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [401] std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&) (move.h)
 [156] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [368] std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [141] void std::swap<std::thread::id>(std::thread::id&, std::thread::id&)
 [259] __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long) [254] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [120] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&)
 [260] __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [151] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [102] TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&)
 [232] _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [369] std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [107] void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
 [314] __gnu_cxx::new_allocator<std::thread>::new_allocator() [370] std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [103] tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&)
 [315] __gnu_cxx::new_allocator<std::thread>::~new_allocator() [203] std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [146] void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
 [286] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [163] std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [279] tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&)
 [157] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++() [164] std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [280] tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&)
 [179] __gnu_cxx::__exchange_and_add(int volatile*, int) (atomicity.h) [237] std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [281] std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&)
 [233] __gnu_cxx::__exchange_and_add_dispatch(int*, int) (atomicity.h) [20] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order) [282] std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&)
 [149] bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [32] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [104] int& std::forward<int&>(std::remove_reference<int&>::type&)
 [180] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [83] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base() [63] long& std::forward<long&>(std::remove_reference<long&>::type&)
 [142] __gnu_cxx::new_allocator<std::thread>::max_size() const [88] std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*) [101] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&)
 [123] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const [125] std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*) [270] std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&)
 [158] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const [165] std::__atomic_base<tervel::util::OpRecord*>::__atomic_base() [271] std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&)
  [96] std::atomic_bool::load(std::memory_order) const [126] std::__atomic_base<void*>::__atomic_base() [272] std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&)
 [159] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const [289] std::__atomic_base<bool>::__atomic_base(bool) [273] std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&)
  [17] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [371] std::__atomic_base<int>::fetch_add(int, std::memory_order) [108] std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&)
  [98] std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::load(std::memory_order) const [372] std::__atomic_base<int>::__atomic_base(int) [121] int&& std::forward<int>(std::remove_reference<int>::type&)
  [34] std::__atomic_base<void*>::load(std::memory_order) const [11] std::__atomic_base<long>::fetch_add(long, std::memory_order) [78] long&& std::forward<long>(std::remove_reference<long>::type&)
  [95] std::__atomic_base<bool>::load(std::memory_order) const [81] std::__atomic_base<long>::__atomic_base(long) [257] void std::_Destroy<std::thread*>(std::thread*, std::thread*)
 [124] std::__atomic_base<int>::load(std::memory_order) const [152] std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order) [258] void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&)
  [31] std::__atomic_base<long>::load(std::memory_order) const [275] std::__atomic_base<unsigned long>::__atomic_base(unsigned long) [131] void std::_Destroy<std::thread>(std::thread*)
  [50] std::__atomic_base<long>::operator long() const [166] std::move_iterator<std::thread*>::move_iterator(std::thread*) [402] main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) (stl_algo.h)
 [287] std::__atomic_base<unsigned long>::load(std::memory_order) const [204] std::move_iterator<std::thread*>::operator++() [147] bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
 [112] std::move_iterator<std::thread*>::base() const [205] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [118] std::operator==(std::thread::id, std::thread::id)
 [181] std::move_iterator<std::thread*>::operator*() const [206] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [148] bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
 [182] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [167] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [172] main::{lambda(std::thread&)#1}::operator()(std::thread&) const (main_buffer.cc)
 [316] std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const [130] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [66] operator new(unsigned long, void*)
 [317] std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const [40] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()
 [318] std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const [238] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
