Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 23.08      0.21     0.21   303742     0.00     0.00  std::__atomic_base<long>::load(std::memory_order) const
 17.58      0.37     0.16    74830     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::get_position(long)
 14.29      0.50     0.13   168139     0.00     0.00  tervel::wf_ring_buffer::Node<long>::seq()
 10.99      0.60     0.10   115402     0.00     0.00  std::__atomic_base<long>::fetch_add(long, std::memory_order)
  8.79      0.68     0.08   120614     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order)
  7.69      0.75     0.07    94610     0.00     0.01  tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long)
  7.69      0.82     0.07    68774     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*)
  3.30      0.85     0.03    99919     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const
  2.20      0.87     0.02   104142     0.00     0.00  std::__atomic_base<bool>::load(std::memory_order) const
  1.10      0.88     0.01   151615     0.00     0.00  tervel::util::Descriptor::Descriptor()
  1.10      0.89     0.01   113170     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  1.10      0.90     0.01    65536     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  1.10      0.91     0.01    47311     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq()
  0.00      0.91     0.00   319345     0.00     0.00  std::__atomic_base<long>::operator long() const
  0.00      0.91     0.00   160039     0.00     0.00  tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*)
  0.00      0.91     0.00   157086     0.00     0.00  tervel::util::ProgressAssurance::p_check_for_announcement()
  0.00      0.91     0.00   155493     0.00     0.00  tervel::ThreadContext::delay_count(unsigned long)
  0.00      0.91     0.00   139397     0.00     0.00  tervel::wf_ring_buffer::Node<long>::Node(long, long)
  0.00      0.91     0.00   138797     0.00     0.00  tervel::ThreadContext::get_progress_assurance()
  0.00      0.91     0.00   118584     0.00     0.00  std::__cmpexch_failure_order(std::memory_order)
  0.00      0.91     0.00   113396     0.00     0.00  tervel::util::memory::rc::unwatch(tervel::util::Descriptor*)
  0.00      0.91     0.00   104890     0.00     0.00  tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool)
  0.00      0.91     0.00   102102     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const
  0.00      0.91     0.00   102040     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::is_full()
  0.00      0.91     0.00   100535     0.00     0.00  tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*)
  0.00      0.91     0.00    93628     0.00     0.00  tervel::util::memory::rc::unmark_first(void*)
  0.00      0.91     0.00    92290     0.00     0.01  tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long)
  0.00      0.91     0.00    85457     0.00     0.00  tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long)
  0.00      0.91     0.00    83473     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*)
  0.00      0.91     0.00    83041     0.00     0.00  std::atomic_bool::load(std::memory_order) const
  0.00      0.91     0.00    78129     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::is_empty()
  0.00      0.91     0.00    68412     0.00     0.00  std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*)
  0.00      0.91     0.00    65536     0.00     0.00  std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base()
  0.00      0.91     0.00    65536     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  0.00      0.91     0.00    65536     0.00     0.00  std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic()
  0.00      0.91     0.00    64510     0.00     0.00  tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode()
  0.00      0.91     0.00    63319     0.00     0.00  tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq()
  0.00      0.91     0.00    53467     0.00     0.00  tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*)
  0.00      0.91     0.00    49933     0.00     0.00  tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode()
  0.00      0.91     0.00    45657     0.00     0.01  tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*)
  0.00      0.91     0.00    34666     0.00     0.00  tervel::wf_ring_buffer::Node<long>::val()
  0.00      0.91     0.00       98     0.00     0.00  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&)
  0.00      0.91     0.00       77     0.00     0.00  TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&)
  0.00      0.91     0.00       71     0.00     0.00  tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&)
  0.00      0.91     0.00       45     0.00     0.00  tervel::util::memory::rc::PoolElement::header()
  0.00      0.91     0.00       44     0.00     0.00  int& std::forward<int&>(std::remove_reference<int&>::type&)
  0.00      0.91     0.00       38     0.00     0.00  std::thread::id::id()
  0.00      0.91     0.00       38     0.00     0.00  void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
  0.00      0.91     0.00       36     0.00     0.00  std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)
  0.00      0.91     0.00       32     0.00     0.00  std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&)
  0.00      0.91     0.00       26     0.00     0.00  operator new(unsigned long, void*)
  0.00      0.91     0.00       23     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator()
  0.00      0.91     0.00       22     0.00     0.00  std::move_iterator<std::thread*>::base() const
  0.00      0.91     0.00       22     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator()
  0.00      0.91     0.00       22     0.00     0.00  std::thread* std::__addressof<std::thread>(std::thread&)
  0.00      0.91     0.00       21     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.91     0.00       21     0.00     0.00  std::thread::joinable() const
  0.00      0.91     0.00       21     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.91     0.00       21     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&)
  0.00      0.91     0.00       20     0.00     0.00  __gthread_equal(unsigned long, unsigned long)
  0.00      0.91     0.00       20     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::size() const
  0.00      0.91     0.00       20     0.00     0.00  std::thread::~thread()
  0.00      0.91     0.00       20     0.00     0.00  std::operator==(std::thread::id, std::thread::id)
  0.00      0.91     0.00       19     0.00     0.00  std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&)
  0.00      0.91     0.00       19     0.00     0.00  int&& std::forward<int>(std::remove_reference<int>::type&)
  0.00      0.91     0.00       18     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const
  0.00      0.91     0.00       17     0.00     0.00  tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*)
  0.00      0.91     0.00       17     0.00     0.00  std::atomic<long>::atomic(long)
  0.00      0.91     0.00       16     0.00     0.00  std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*)
  0.00      0.91     0.00       16     0.00     0.00  std::__atomic_base<void*>::__atomic_base()
  0.00      0.91     0.00       16     0.00     0.00  std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*)
  0.00      0.91     0.00       16     0.00     0.00  std::atomic<void*>::atomic()
  0.00      0.91     0.00       15     0.00     0.00  void std::_Destroy<std::thread>(std::thread*)
  0.00      0.91     0.00       14     0.00     0.00  std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*))
  0.00      0.91     0.00       14     0.00     0.00  std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&)
  0.00      0.91     0.00       14     0.00     0.00  std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&)
  0.00      0.91     0.00       14     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count()
  0.00      0.91     0.00       12     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator()
  0.00      0.91     0.00       12     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::max_size() const
  0.00      0.91     0.00       12     0.00     0.00  std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator()
  0.00      0.91     0.00       12     0.00     0.00  std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&)
  0.00      0.91     0.00       12     0.00     0.00  std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&)
  0.00      0.91     0.00       12     0.00     0.00  std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&)
  0.00      0.91     0.00       12     0.00     0.00  std::__atomic_base<long>::__atomic_base(long)
  0.00      0.91     0.00       12     0.00     0.00  std::thread::swap(std::thread&)
  0.00      0.91     0.00       12     0.00     0.00  std::thread::thread(std::thread&&)
  0.00      0.91     0.00       12     0.00     0.00  void std::swap<std::thread::id>(std::thread::id&, std::thread::id&)
  0.00      0.91     0.00       12     0.00     0.00  void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
  0.00      0.91     0.00       11     0.00     0.00  tervel::util::memory::rc::PoolElement::Header::Header()
  0.00      0.91     0.00       11     0.00     0.00  tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*)
  0.00      0.91     0.00       11     0.00     0.00  std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&)
  0.00      0.91     0.00       11     0.00     0.00  _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_
  0.00      0.91     0.00       11     0.00     0.00  std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&)
  0.00      0.91     0.00       11     0.00     0.00  _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_
  0.00      0.91     0.00       11     0.00     0.00  bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
  0.00      0.91     0.00       11     0.00     0.00  bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
  0.00      0.91     0.00       10     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator()
  0.00      0.91     0.00       10     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  0.00      0.91     0.00        9     0.00     0.00  bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&)
  0.00      0.91     0.00        9     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator()
  0.00      0.91     0.00        8     0.00     0.00  tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool()
  0.00      0.91     0.00        8     0.00     0.00  tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool()
  0.00      0.91     0.00        8     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++()
  0.00      0.91     0.00        8     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const
  0.00      0.91     0.00        8     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const
  0.00      0.91     0.00        8     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const
  0.00      0.91     0.00        8     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::max_size() const
  0.00      0.91     0.00        8     0.00     0.00  std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.91     0.00        8     0.00     0.00  std::shared_ptr<std::thread::_Impl_base>::~shared_ptr()
  0.00      0.91     0.00        8     0.00     0.00  std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()
  0.00      0.91     0.00        8     0.00     0.00  std::__atomic_base<tervel::util::OpRecord*>::__atomic_base()
  0.00      0.91     0.00        8     0.00     0.00  std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order)
  0.00      0.91     0.00        8     0.00     0.00  std::move_iterator<std::thread*>::move_iterator(std::thread*)
  0.00      0.91     0.00        8     0.00     0.00  std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&)
  0.00      0.91     0.00        8     0.00     0.00  std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&)
  0.00      0.91     0.00        8     0.00     0.00  std::atomic<tervel::util::OpRecord*>::atomic()
  0.00      0.91     0.00        8     0.00     0.00  std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*)
  0.00      0.91     0.00        8     0.00     0.00  main::{lambda(std::thread&)#1}::operator()(std::thread&) const
  0.00      0.91     0.00        7     0.00     0.00  __gthread_active_p()
  0.00      0.91     0.00        7     0.00     0.00  tervel::util::memory::rc::PoolManager::allocate_pool()
  0.00      0.91     0.00        7     0.00     0.00  _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_
  0.00      0.91     0.00        7     0.00     0.00  __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator()
  0.00      0.91     0.00        7     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*)
  0.00      0.91     0.00        7     0.00     0.00  _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_
  0.00      0.91     0.00        7     0.00     0.00  __gnu_cxx::__exchange_and_add(int volatile*, int)
  0.00      0.91     0.00        7     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const
  0.00      0.91     0.00        7     0.00     0.00  std::move_iterator<std::thread*>::operator*() const
  0.00      0.91     0.00        7     0.00     0.00  std::type_info::operator==(std::type_info const&) const
  0.00      0.91     0.00        7     0.00     0.00  std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator()
  0.00      0.91     0.00        7     0.00     0.00  std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&)
  0.00      0.91     0.00        7     0.00     0.00  std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&)
  0.00      0.91     0.00        7     0.00     0.00  std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&)
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_
  0.00      0.91     0.00        7     0.00     0.00  std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base()
  0.00      0.91     0.00        7     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_
  0.00      0.91     0.00        7     0.00     0.00  std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&)
  0.00      0.91     0.00        7     0.00     0.00  std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&)
  0.00      0.91     0.00        7     0.00     0.00  std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&)
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_
  0.00      0.91     0.00        7     0.00     0.00  std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&)
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_
  0.00      0.91     0.00        7     0.00     0.00  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.91     0.00        7     0.00     0.00  std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&)
  0.00      0.91     0.00        7     0.00     0.00  std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.91     0.00        7     0.00     0.00  std::move_iterator<std::thread*>::operator++()
  0.00      0.91     0.00        7     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&)
  0.00      0.91     0.00        7     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count()
  0.00      0.91     0.00        7     0.00     0.00  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.91     0.00        7     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base()
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_
  0.00      0.91     0.00        7     0.00     0.00  std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long)
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_
  0.00      0.91     0.00        7     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
  0.00      0.91     0.00        7     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >)
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_
  0.00      0.91     0.00        7     0.00     0.00  _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_
  0.00      0.91     0.00        7     0.00     0.00  std::thread::_Impl_base::_Impl_base()
  0.00      0.91     0.00        7     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.91     0.00        7     0.00     0.00  std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.91     0.00        7     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&)
  0.00      0.91     0.00        7     0.00     0.00  _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_
  0.00      0.91     0.00        7     0.00     0.00  _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_
  0.00      0.91     0.00        7     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  0.00      0.91     0.00        7     0.00     0.00  void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...)
  0.00      0.91     0.00        7     0.00     0.00  std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
  0.00      0.91     0.00        7     0.00     0.00  std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*))
  0.00      0.91     0.00        7     0.00     0.00  std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&)
  0.00      0.91     0.00        7     0.00     0.00  _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
  0.00      0.91     0.00        7     0.00     0.00  _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
  0.00      0.91     0.00        7     0.00     0.00  std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&)
  0.00      0.91     0.00        7     0.00     0.00  _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_
  0.00      0.91     0.00        6     0.00     0.00  tervel::ThreadContext::get_thread_id()
  0.00      0.91     0.00        6     0.00     0.00  tervel::ThreadContext::ThreadContext(tervel::Tervel*)
  0.00      0.91     0.00        6     0.00     0.00  tervel::Tervel::get_thread_id()
  0.00      0.91     0.00        6     0.00     0.00  __gnu_cxx::__exchange_and_add_dispatch(int*, int)
  0.00      0.91     0.00        6     0.00     0.00  std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr()
  0.00      0.91     0.00        6     0.00     0.00  std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...)
  0.00      0.91     0.00        6     0.00     0.00  _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_
  0.00      0.91     0.00        6     0.00     0.00  std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...)
  0.00      0.91     0.00        6     0.00     0.00  _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_
  0.00      0.91     0.00        6     0.00     0.00  _ZNSt11_Tuple_implILm4EJEEC2Ev
  0.00      0.91     0.00        6     0.00     0.00  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
  0.00      0.91     0.00        6     0.00     0.00  std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr()
  0.00      0.91     0.00        6     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()
  0.00      0.91     0.00        6     0.00     0.00  std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*))
  0.00      0.91     0.00        6     0.00     0.00  _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_
  0.00      0.91     0.00        6     0.00     0.00  std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
  0.00      0.91     0.00        6     0.00     0.00  void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&)
  0.00      0.91     0.00        6     0.00     0.00  std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
  0.00      0.91     0.00        5     0.00     0.00  tervel::util::memory::rc::DescriptorPool::reserve(int)
  0.00      0.91     0.00        5     0.00     0.00  _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_
  0.00      0.91     0.00        5     0.00   140.37  std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()()
  0.00      0.91     0.00        5     0.00     0.00  void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*)
  0.00      0.91     0.00        5     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long)
  0.00      0.91     0.00        5     0.00     0.00  _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_
  0.00      0.91     0.00        5     0.00     0.00  _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_
  0.00      0.91     0.00        5     0.00     0.00  std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&)
  0.00      0.91     0.00        5     0.00     0.00  _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE
  0.00      0.91     0.00        5     0.00     0.00  _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.91     0.00        5     0.00     0.00  std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&)
  0.00      0.91     0.00        5     0.00     0.00  _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.91     0.00        5     0.00     0.00  void std::_Destroy<std::thread*>(std::thread*, std::thread*)
  0.00      0.91     0.00        5     0.00     0.00  void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&)
  0.00      0.91     0.00        4     0.00   175.46  run(int, tervel::Tervel*, TestObject*)
  0.00      0.91     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long)
  0.00      0.91     0.00        4     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*)
  0.00      0.91     0.00        4     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const
  0.00      0.91     0.00        4     0.00     0.00  std::_Tuple_impl<2ul>::_Tuple_impl()
  0.00      0.91     0.00        4     0.00   175.46  _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE
  0.00      0.91     0.00        4     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long)
  0.00      0.91     0.00        4     0.00     0.00  std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
  0.00      0.91     0.00        4     0.00     0.00  _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_
  0.00      0.91     0.00        4     0.00     0.00  _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE
  0.00      0.91     0.00        4     0.00     0.00  std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
  0.00      0.91     0.00        4     0.00     0.00  std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&)
  0.00      0.91     0.00        4     0.00     0.00  std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&)
  0.00      0.91     0.00        4     0.00     0.00  _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.91     0.00        4     0.00     0.00  unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
  0.00      0.91     0.00        4     0.00     0.00  std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&)
  0.00      0.91     0.00        4     0.00     0.00  std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&)
  0.00      0.91     0.00        4     0.00     0.00  std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&)
  0.00      0.91     0.00        4     0.00     0.00  std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&)
  0.00      0.91     0.00        3     0.00     0.00  tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*)
  0.00      0.91     0.00        3     0.00     0.00  tervel::util::memory::hp::ListManager::allocate_list()
  0.00      0.91     0.00        3     0.00     0.00  tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long)
  0.00      0.91     0.00        3     0.00     0.00  void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.91     0.00        3     0.00     0.00  std::__atomic_base<int>::load(std::memory_order) const
  0.00      0.91     0.00        3     0.00     0.00  std::__atomic_base<unsigned long>::__atomic_base(unsigned long)
  0.00      0.91     0.00        3     0.00     0.00  std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.91     0.00        3     0.00     0.00  std::atomic<unsigned long>::atomic(unsigned long)
  0.00      0.91     0.00        3     0.00     0.00  std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  0.00      0.91     0.00        3     0.00     0.00  tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&)
  0.00      0.91     0.00        3     0.00     0.00  tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&)
  0.00      0.91     0.00        3     0.00     0.00  std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&)
  0.00      0.91     0.00        3     0.00     0.00  std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&)
  0.00      0.91     0.00        2     0.00     0.00  tervel::ThreadContext::~ThreadContext()
  0.00      0.91     0.00        2     0.00     0.00  void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*)
  0.00      0.91     0.00        2     0.00     0.00  __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&)
  0.00      0.91     0.00        2     0.00     0.00  std::__atomic_base<unsigned long>::load(std::memory_order) const
  0.00      0.91     0.00        2     0.00     0.00  std::atomic_bool::atomic_bool(bool)
  0.00      0.91     0.00        2     0.00     0.00  std::__atomic_base<bool>::__atomic_base(bool)
  0.00      0.91     0.00        2     0.00     0.00  void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*)
  0.00      0.91     0.00        2     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl()
  0.00      0.91     0.00        2     0.00     0.00  std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
  0.00      0.91     0.00        2     0.00     0.00  std::atomic<bool>::atomic(bool)
  0.00      0.91     0.00        2     0.00     0.00  std::thread::_Impl_base::~_Impl_base()
  0.00      0.91     0.00        2     0.00     0.00  std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::~_Impl()
  0.00      0.91     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE
  0.00      0.91     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv
  0.00      0.91     0.00        1     0.00     0.00  _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb
  0.00      0.91     0.00        1     0.00   701.82  run_enqueue_dequeue(int, TestObject*)
  0.00      0.91     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.91     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.91     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00      0.91     0.00        1     0.00     0.00  TestObject::atomic_add(int, int)
  0.00      0.91     0.00        1     0.00     0.00  TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*)
  0.00      0.91     0.00        1     0.00    14.72  tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int)
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::ProgressAssurance::ProgressAssurance(int)
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::ProgressAssurance::~ProgressAssurance()
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::memory::hp::ListManager::ListManager(unsigned long)
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::memory::hp::ListManager::~ListManager()
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::memory::hp::HazardPointer::HazardPointer(int)
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::memory::hp::HazardPointer::~HazardPointer()
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::memory::hp::Element::Element()
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::memory::rc::PoolManager::PoolManager(unsigned long)
  0.00      0.91     0.00        1     0.00     0.00  tervel::util::memory::rc::PoolManager::~PoolManager()
  0.00      0.91     0.00        1     0.00     0.00  tervel::Tervel::Tervel(unsigned long)
  0.00      0.91     0.00        1     0.00     0.00  tervel::Tervel::~Tervel()
  0.00      0.91     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
  0.00      0.91     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::new_allocator()
  0.00      0.91     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::thread>::~new_allocator()
  0.00      0.91     0.00        1     0.00     0.00  std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const
  0.00      0.91     0.00        1     0.00     0.00  std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const
  0.00      0.91     0.00        1     0.00     0.00  std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const
  0.00      0.91     0.00        1     0.00     0.00  std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const
  0.00      0.91     0.00        1     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1l> >::count() const
  0.00      0.91     0.00        1     0.00     0.00  std::allocator<std::thread>::allocator()
  0.00      0.91     0.00        1     0.00     0.00  std::allocator<std::thread>::~allocator()
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&)
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter()
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*)
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr()
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter()
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*)
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr()
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter()
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*)
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr()
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter()
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*)
  0.00      0.91     0.00        1     0.00     0.00  std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr()
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&)
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...)
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_
  0.00      0.91     0.00        1     0.00     0.00  void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&)
  0.00      0.91     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl()
  0.00      0.91     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl()
  0.00      0.91     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base()
  0.00      0.91     0.00        1     0.00     0.00  std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base()
  0.00      0.91     0.00        1     0.00     0.00  std::__atomic_base<int>::fetch_add(int, std::memory_order)
  0.00      0.91     0.00        1     0.00     0.00  std::__atomic_base<int>::__atomic_base(int)
  0.00      0.91     0.00        1     0.00     0.00  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base()
  0.00      0.91     0.00        1     0.00     0.00  std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*)
  0.00      0.91     0.00        1     0.00     0.00  std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long)
  0.00      0.91     0.00        1     0.00     0.00  std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&)
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_
  0.00      0.91     0.00        1     0.00     0.00  _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_
  0.00      0.91     0.00        1     0.00     0.00  std::atomic<int>::atomic(int)
  0.00      0.91     0.00        1     0.00     0.00  std::chrono::duration<long, std::ratio<1l, 1l> >::duration<int, void>(int const&)
  0.00      0.91     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::end()
  0.00      0.91     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::begin()
  0.00      0.91     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::vector()
  0.00      0.91     0.00        1     0.00     0.00  std::vector<std::thread, std::allocator<std::thread> >::~vector()
  0.00      0.91     0.00        1     0.00     0.00  std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&)
  0.00      0.91     0.00        1     0.00     0.00  _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
  0.00      0.91     0.00        1     0.00     0.00  _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
  0.00      0.91     0.00        1     0.00     0.00  std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&)
  0.00      0.91     0.00        1     0.00     0.00  std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&)
  0.00      0.91     0.00        1     0.00     0.00  _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE
  0.00      0.91     0.00        1     0.00     0.00  std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&)
  0.00      0.91     0.00        1     0.00     0.00  _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE
  0.00      0.91     0.00        1     0.00     0.00  std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
  0.00      0.91     0.00        1     0.00     0.00  _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.91     0.00        1     0.00     0.00  _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.91     0.00        1     0.00     0.00  _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.91     0.00        1     0.00     0.00  std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
  0.00      0.91     0.00        1     0.00     0.00  _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.91     0.00        1     0.00     0.00  _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  0.00      0.91     0.00        1     0.00     0.00  _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
  0.00      0.91     0.00        1     0.00     0.00  std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&)
  0.00      0.91     0.00        1     0.00     0.00  main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1})

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.10% of 0.91 seconds

index % time    self  children    called     name
                0.00    0.70       5/5           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_M_run() [4]
[1]     77.1    0.00    0.70       5         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [1]
                0.00    0.70       4/4           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
-----------------------------------------------
                0.00    0.70       4/4           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[2]     77.1    0.00    0.70       4         run(int, tervel::Tervel*, TestObject*) [2]
                0.00    0.70       1/1           run_enqueue_dequeue(int, TestObject*) [5]
                0.00    0.00       5/6           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [35]
                0.00    0.00       1/2           tervel::ThreadContext::~ThreadContext() [249]
-----------------------------------------------
                0.00    0.70       4/4           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [1]
[3]     77.1    0.00    0.70       4         _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.70       4/4           run(int, tervel::Tervel*, TestObject*) [2]
                0.00    0.00       5/5           _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [215]
                0.00    0.00       5/5           _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [217]
                0.00    0.00       5/5           std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&) [216]
                0.00    0.00       5/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       5/19          int&& std::forward<int>(std::remove_reference<int>::type&) [83]
                0.00    0.00       4/38          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [66]
                0.00    0.00       4/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       4/4           _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [231]
-----------------------------------------------
                                                 <spontaneous>
[4]     77.1    0.00    0.70                 std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_M_run() [4]
                0.00    0.70       5/5           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [1]
-----------------------------------------------
                0.00    0.70       1/1           run(int, tervel::Tervel*, TestObject*) [2]
[5]     77.1    0.00    0.70       1         run_enqueue_dequeue(int, TestObject*) [5]
                0.00    0.35   59522/92290       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [7]
                0.00    0.33   45657/45657       tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [9]
                0.00    0.02   83041/83041       std::atomic_bool::load(std::memory_order) const [25]
                0.00    0.00       1/1           std::__atomic_base<int>::fetch_add(int, std::memory_order) [339]
                0.00    0.00       1/1           TestObject::atomic_add(int, int) [267]
-----------------------------------------------
                0.07    0.47   94610/94610       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [7]
[6]     59.9    0.07    0.47   94610         tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
                0.12    0.00   54158/74830       tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [13]
                0.00    0.11  102040/102040      tervel::wf_ring_buffer::RingBuffer<long>::is_full() [15]
                0.10    0.00  124238/168139      tervel::wf_ring_buffer::Node<long>::seq() [14]
                0.01    0.06   83453/113170      std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [18]
                0.00    0.06   63319/63319       tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [20]
                0.00    0.02   67282/102102      std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [22]
                0.00    0.00   53467/53467       tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [32]
                0.00    0.00   70452/113396      tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [49]
                0.00    0.00   69170/104890      tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [50]
                0.00    0.00   64510/64510       tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode() [57]
                0.00    0.00   61584/100535      tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [51]
                0.00    0.00   53862/93628       tervel::util::memory::rc::unmark_first(void*) [52]
-----------------------------------------------
                0.00    0.19   32768/92290       main [12]
                0.00    0.35   59522/92290       run_enqueue_dequeue(int, TestObject*) [5]
[7]     59.9    0.00    0.54   92290         tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [7]
                0.07    0.47   94610/94610       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
                0.00    0.00  102509/160039      tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [44]
                0.00    0.00   88977/138797      tervel::ThreadContext::get_progress_assurance() [47]
-----------------------------------------------
                0.07    0.26   68774/68774       tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [9]
[8]     36.3    0.07    0.26   68774         tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.10   78129/78129       tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [17]
                0.01    0.04   47311/47311       tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [21]
                0.04    0.00   20672/74830       tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [13]
                0.03    0.00   43901/168139      tervel::wf_ring_buffer::Node<long>::seq() [14]
                0.00    0.02   29717/113170      std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [18]
                0.00    0.01   34820/102102      std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [22]
                0.00    0.00   19921/85457       tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [31]
                0.00    0.00   49933/49933       tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode() [58]
                0.00    0.00   42944/113396      tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [49]
                0.00    0.00   39766/93628       tervel::util::memory::rc::unmark_first(void*) [52]
                0.00    0.00   38951/100535      tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [51]
                0.00    0.00   35720/104890      tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [50]
                0.00    0.00   34666/34666       tervel::wf_ring_buffer::Node<long>::val() [59]
-----------------------------------------------
                0.00    0.33   45657/45657       run_enqueue_dequeue(int, TestObject*) [5]
[9]     36.3    0.00    0.33   45657         tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [9]
                0.07    0.26   68774/68774       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.00   57530/160039      tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [44]
                0.00    0.00   49820/138797      tervel::ThreadContext::get_progress_assurance() [47]
-----------------------------------------------
                0.00    0.00      19/303742      tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [33]
                0.21    0.00  303723/303742      std::__atomic_base<long>::operator long() const [11]
[10]    23.1    0.21    0.00  303742         std::__atomic_base<long>::load(std::memory_order) const [10]
-----------------------------------------------
                0.00    0.10  145000/319345      tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [17]
                0.00    0.11  174345/319345      tervel::wf_ring_buffer::RingBuffer<long>::is_full() [15]
[11]    23.1    0.00    0.21  319345         std::__atomic_base<long>::operator long() const [11]
                0.21    0.00  303723/303742      std::__atomic_base<long>::load(std::memory_order) const [10]
-----------------------------------------------
                                                 <spontaneous>
[12]    22.9    0.00    0.21                 main [12]
                0.00    0.19   32768/92290       tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [7]
                0.00    0.01       1/1           tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [26]
                0.00    0.00       1/6           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [35]
                0.00    0.00       7/7           std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [179]
                0.00    0.00       6/6           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
                0.00    0.00       6/19          std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [82]
                0.00    0.00       5/20          std::thread::~thread() [80]
                0.00    0.00       3/3           std::__atomic_base<int>::load(std::memory_order) const [240]
                0.00    0.00       2/2           std::__atomic_base<unsigned long>::load(std::memory_order) const [252]
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [278]
                0.00    0.00       1/1           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [268]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::vector() [352]
                0.00    0.00       1/1           std::chrono::duration<long, std::ratio<1l, 1l> >::duration<int, void>(int const&) [349]
                0.00    0.00       1/1           void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [334]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::end() [350]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::begin() [351]
                0.00    0.00       1/1           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [371]
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::~vector() [353]
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [279]
                0.00    0.00       1/2           tervel::ThreadContext::~ThreadContext() [249]
-----------------------------------------------
                0.04    0.00   20672/74830       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.12    0.00   54158/74830       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[13]    17.6    0.16    0.00   74830         tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [13]
-----------------------------------------------
                0.03    0.00   43901/168139      tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.10    0.00  124238/168139      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[14]    14.3    0.13    0.00  168139         tervel::wf_ring_buffer::Node<long>::seq() [14]
-----------------------------------------------
                0.00    0.11  102040/102040      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[15]    12.6    0.00    0.11  102040         tervel::wf_ring_buffer::RingBuffer<long>::is_full() [15]
                0.00    0.11  174345/319345      std::__atomic_base<long>::operator long() const [11]
-----------------------------------------------
                0.04    0.00   47916/115402      tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [21]
                0.06    0.00   67486/115402      tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [20]
[16]    11.0    0.10    0.00  115402         std::__atomic_base<long>::fetch_add(long, std::memory_order) [16]
-----------------------------------------------
                0.00    0.10   78129/78129       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
[17]    10.5    0.00    0.10   78129         tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [17]
                0.00    0.10  145000/319345      std::__atomic_base<long>::operator long() const [11]
-----------------------------------------------
                0.00    0.02   29717/113170      tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.01    0.06   83453/113170      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[18]     9.9    0.01    0.08  113170         std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [18]
                0.08    0.00  120614/120614      std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order) [19]
                0.00    0.00  118584/118584      std::__cmpexch_failure_order(std::memory_order) [48]
-----------------------------------------------
                0.08    0.00  120614/120614      std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [18]
[19]     8.8    0.08    0.00  120614         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order) [19]
-----------------------------------------------
                0.00    0.06   63319/63319       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[20]     6.4    0.00    0.06   63319         tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [20]
                0.06    0.00   67486/115402      std::__atomic_base<long>::fetch_add(long, std::memory_order) [16]
-----------------------------------------------
                0.01    0.04   47311/47311       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
[21]     5.7    0.01    0.04   47311         tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [21]
                0.04    0.00   47916/115402      std::__atomic_base<long>::fetch_add(long, std::memory_order) [16]
-----------------------------------------------
                0.00    0.01   34820/102102      tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.02   67282/102102      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[22]     3.3    0.00    0.03  102102         std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [22]
                0.03    0.00   99919/99919       std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [23]
-----------------------------------------------
                0.03    0.00   99919/99919       std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [22]
[23]     3.3    0.03    0.00   99919         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [23]
-----------------------------------------------
                0.02    0.00  104142/104142      std::atomic_bool::load(std::memory_order) const [25]
[24]     2.2    0.02    0.00  104142         std::__atomic_base<bool>::load(std::memory_order) const [24]
-----------------------------------------------
                0.00    0.02   83041/83041       run_enqueue_dequeue(int, TestObject*) [5]
[25]     2.2    0.00    0.02   83041         std::atomic_bool::load(std::memory_order) const [25]
                0.02    0.00  104142/104142      std::__atomic_base<bool>::load(std::memory_order) const [24]
-----------------------------------------------
                0.00    0.01       1/1           main [12]
[26]     1.6    0.00    0.01       1         tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [26]
                0.00    0.01   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [30]
                0.00    0.00   65536/85457       tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [31]
                0.00    0.00   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic() [56]
                0.00    0.00       1/1           tervel::util::memory::hp::Element::Element() [275]
-----------------------------------------------
                0.01    0.00  151615/151615      tervel::wf_ring_buffer::Node<long>::Node(long, long) [28]
[27]     1.1    0.01    0.00  151615         tervel::util::Descriptor::Descriptor() [27]
-----------------------------------------------
                0.00    0.00   53587/139397      tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [32]
                0.00    0.01   85810/139397      tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [31]
[28]     1.1    0.00    0.01  139397         tervel::wf_ring_buffer::Node<long>::Node(long, long) [28]
                0.01    0.00  151615/151615      tervel::util::Descriptor::Descriptor() [27]
-----------------------------------------------
                0.01    0.00   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [30]
[29]     1.1    0.01    0.00   65536         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [29]
-----------------------------------------------
                0.00    0.01   65536/65536       tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [26]
[30]     1.1    0.00    0.01   65536         std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [30]
                0.01    0.00   65536/65536       std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [29]
-----------------------------------------------
                0.00    0.00   19921/85457       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.00   65536/85457       tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [26]
[31]     0.7    0.00    0.01   85457         tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [31]
                0.00    0.01   85810/139397      tervel::wf_ring_buffer::Node<long>::Node(long, long) [28]
-----------------------------------------------
                0.00    0.00   53467/53467       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[32]     0.4    0.00    0.00   53467         tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [32]
                0.00    0.00   53587/139397      tervel::wf_ring_buffer::Node<long>::Node(long, long) [28]
                0.00    0.00   68412/68412       std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*) [54]
-----------------------------------------------
                0.00    0.00      11/11          tervel::util::memory::rc::DescriptorPool::reserve(int) [36]
[33]     0.0    0.00    0.00      11         tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [33]
                0.00    0.00      19/303742      std::__atomic_base<long>::load(std::memory_order) const [10]
                0.00    0.00      28/45          tervel::util::memory::rc::PoolElement::header() [63]
                0.00    0.00      11/11          tervel::util::memory::rc::PoolElement::Header::Header() [107]
-----------------------------------------------
                0.00    0.00       7/7           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [35]
[34]     0.0    0.00    0.00       7         tervel::util::memory::rc::PoolManager::allocate_pool() [34]
                0.00    0.00       3/3           tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [37]
                0.00    0.00       6/6           tervel::ThreadContext::get_thread_id() [191]
-----------------------------------------------
                0.00    0.00       1/6           main [12]
                0.00    0.00       5/6           run(int, tervel::Tervel*, TestObject*) [2]
[35]     0.0    0.00    0.00       6         tervel::ThreadContext::ThreadContext(tervel::Tervel*) [35]
                0.00    0.00       7/7           tervel::util::memory::rc::PoolManager::allocate_pool() [34]
                0.00    0.00       6/6           tervel::Tervel::get_thread_id() [192]
                0.00    0.00       3/3           tervel::util::memory::hp::ListManager::allocate_list() [238]
-----------------------------------------------
                0.00    0.00       5/5           tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [37]
[36]     0.0    0.00    0.00       5         tervel::util::memory::rc::DescriptorPool::reserve(int) [36]
                0.00    0.00      11/11          tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [33]
                0.00    0.00      17/17          tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [85]
-----------------------------------------------
                0.00    0.00       3/3           tervel::util::memory::rc::PoolManager::allocate_pool() [34]
[37]     0.0    0.00    0.00       3         tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [37]
                0.00    0.00       5/5           tervel::util::memory::rc::DescriptorPool::reserve(int) [36]
-----------------------------------------------
                0.00    0.00   57530/160039      tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [9]
                0.00    0.00  102509/160039      tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [7]
[44]     0.0    0.00    0.00  160039         tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [44]
                0.00    0.00  157086/157086      tervel::util::ProgressAssurance::p_check_for_announcement() [45]
-----------------------------------------------
                0.00    0.00  157086/157086      tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [44]
[45]     0.0    0.00    0.00  157086         tervel::util::ProgressAssurance::p_check_for_announcement() [45]
                0.00    0.00  155493/155493      tervel::ThreadContext::delay_count(unsigned long) [46]
-----------------------------------------------
                0.00    0.00  155493/155493      tervel::util::ProgressAssurance::p_check_for_announcement() [45]
[46]     0.0    0.00    0.00  155493         tervel::ThreadContext::delay_count(unsigned long) [46]
-----------------------------------------------
                0.00    0.00   49820/138797      tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [9]
                0.00    0.00   88977/138797      tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [7]
[47]     0.0    0.00    0.00  138797         tervel::ThreadContext::get_progress_assurance() [47]
-----------------------------------------------
                0.00    0.00  118584/118584      std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order) [18]
[48]     0.0    0.00    0.00  118584         std::__cmpexch_failure_order(std::memory_order) [48]
-----------------------------------------------
                0.00    0.00   42944/113396      tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.00   70452/113396      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[49]     0.0    0.00    0.00  113396         tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [49]
-----------------------------------------------
                0.00    0.00   35720/104890      tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.00   69170/104890      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[50]     0.0    0.00    0.00  104890         tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [50]
-----------------------------------------------
                0.00    0.00   38951/100535      tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.00   61584/100535      tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[51]     0.0    0.00    0.00  100535         tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [51]
-----------------------------------------------
                0.00    0.00   39766/93628       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
                0.00    0.00   53862/93628       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[52]     0.0    0.00    0.00   93628         tervel::util::memory::rc::unmark_first(void*) [52]
-----------------------------------------------
                0.00    0.00   83473/83473       std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*) [54]
[53]     0.0    0.00    0.00   83473         std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*) [53]
-----------------------------------------------
                0.00    0.00   68412/68412       tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [32]
[54]     0.0    0.00    0.00   68412         std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*) [54]
                0.00    0.00   83473/83473       std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*) [53]
-----------------------------------------------
                0.00    0.00   65536/65536       std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic() [56]
[55]     0.0    0.00    0.00   65536         std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base() [55]
-----------------------------------------------
                0.00    0.00   65536/65536       tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [26]
[56]     0.0    0.00    0.00   65536         std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic() [56]
                0.00    0.00   65536/65536       std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base() [55]
-----------------------------------------------
                0.00    0.00   64510/64510       tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [6]
[57]     0.0    0.00    0.00   64510         tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode() [57]
-----------------------------------------------
                0.00    0.00   49933/49933       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
[58]     0.0    0.00    0.00   49933         tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode() [58]
-----------------------------------------------
                0.00    0.00   34666/34666       tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [8]
[59]     0.0    0.00    0.00   34666         tervel::wf_ring_buffer::Node<long>::val() [59]
-----------------------------------------------
                0.00    0.00       7/98          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [177]
                0.00    0.00       7/98          _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [181]
                0.00    0.00       7/98          std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [182]
                0.00    0.00       7/98          _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [149]
                0.00    0.00       7/98          std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [161]
                0.00    0.00       7/98          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
                0.00    0.00       7/98          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [171]
                0.00    0.00       7/98          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [169]
                0.00    0.00       7/98          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
                0.00    0.00       7/98          _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
                0.00    0.00       7/98          _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [168]
                0.00    0.00       7/98          _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [167]
                0.00    0.00       7/98          _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [137]
                0.00    0.00       7/98          std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [178]
[60]     0.0    0.00    0.00      98         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
-----------------------------------------------
                0.00    0.00       4/77          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       6/77          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
                0.00    0.00       6/77          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [197]
                0.00    0.00       6/77          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [196]
                0.00    0.00       6/77          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
                0.00    0.00       6/77          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [204]
                0.00    0.00       7/77          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [158]
                0.00    0.00       7/77          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
                0.00    0.00       7/77          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [198]
                0.00    0.00       8/77          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [200]
                0.00    0.00      14/77          std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [94]
[61]     0.0    0.00    0.00      77         TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
-----------------------------------------------
                0.00    0.00       5/71          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       6/71          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
                0.00    0.00       6/71          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [196]
                0.00    0.00       6/71          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
                0.00    0.00       6/71          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [204]
                0.00    0.00       7/71          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
                0.00    0.00       7/71          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
                0.00    0.00       7/71          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [197]
                0.00    0.00       7/71          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [200]
                0.00    0.00      14/71          std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [93]
[62]     0.0    0.00    0.00      71         tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
-----------------------------------------------
                0.00    0.00      17/45          tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [85]
                0.00    0.00      28/45          tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [33]
[63]     0.0    0.00    0.00      45         tervel::util::memory::rc::PoolElement::header() [63]
-----------------------------------------------
                0.00    0.00       6/44          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
                0.00    0.00       6/44          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
                0.00    0.00       6/44          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
                0.00    0.00       6/44          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [204]
                0.00    0.00       6/44          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [200]
                0.00    0.00       7/44          std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [146]
                0.00    0.00       7/44          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [196]
[64]     0.0    0.00    0.00      44         int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
-----------------------------------------------
                0.00    0.00       6/38          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
                0.00    0.00      12/38          std::thread::thread(std::thread&&) [104]
                0.00    0.00      20/38          std::thread::joinable() const [75]
[65]     0.0    0.00    0.00      38         std::thread::id::id() [65]
-----------------------------------------------
                0.00    0.00       4/38          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       6/38          _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [204]
                0.00    0.00       7/38          _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
                0.00    0.00       7/38          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
                0.00    0.00      14/38          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [92]
[66]     0.0    0.00    0.00      38         void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [66]
-----------------------------------------------
                0.00    0.00      36/36          void std::swap<std::thread::id>(std::thread::id&, std::thread::id&) [105]
[67]     0.0    0.00    0.00      36         std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&) [67]
-----------------------------------------------
                0.00    0.00       4/32          _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
                0.00    0.00       5/32          _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [212]
                0.00    0.00       5/32          _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [211]
                0.00    0.00       5/32          _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [208]
                0.00    0.00       6/32          void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [206]
                0.00    0.00       7/32          _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [180]
[68]     0.0    0.00    0.00      32         std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [68]
-----------------------------------------------
                0.00    0.00       5/26          _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [208]
                0.00    0.00       7/26          _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [180]
                0.00    0.00       7/26          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
                0.00    0.00       7/26          _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [137]
[69]     0.0    0.00    0.00      26         operator new(unsigned long, void*) [69]
-----------------------------------------------
                0.00    0.00      23/23          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [72]
[70]     0.0    0.00    0.00      23         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator() [70]
-----------------------------------------------
                0.00    0.00      22/22          bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [112]
[71]     0.0    0.00    0.00      22         std::move_iterator<std::thread*>::base() const [71]
-----------------------------------------------
                0.00    0.00       1/22          std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [256]
                0.00    0.00       7/22          _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [181]
                0.00    0.00       7/22          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
                0.00    0.00       7/22          _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
[72]     0.0    0.00    0.00      22         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [72]
                0.00    0.00      23/23          __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator() [70]
-----------------------------------------------
                0.00    0.00       7/22          std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [225]
                0.00    0.00      15/22          void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [209]
[73]     0.0    0.00    0.00      22         std::thread* std::__addressof<std::thread>(std::thread&) [73]
-----------------------------------------------
                0.00    0.00      21/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [76]
[74]     0.0    0.00    0.00      21         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [74]
-----------------------------------------------
                0.00    0.00      21/21          std::thread::~thread() [80]
[75]     0.0    0.00    0.00      21         std::thread::joinable() const [75]
                0.00    0.00      20/38          std::thread::id::id() [65]
                0.00    0.00      20/20          std::operator==(std::thread::id, std::thread::id) [81]
-----------------------------------------------
                0.00    0.00       7/21          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
                0.00    0.00       7/21          _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
                0.00    0.00       7/21          std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >) [173]
[76]     0.0    0.00    0.00      21         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [76]
                0.00    0.00      21/21          __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [74]
-----------------------------------------------
                0.00    0.00       7/21          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [171]
                0.00    0.00       7/21          _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [169]
                0.00    0.00       7/21          _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
[77]     0.0    0.00    0.00      21         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [77]
-----------------------------------------------
                0.00    0.00      20/20          std::operator==(std::thread::id, std::thread::id) [81]
[78]     0.0    0.00    0.00      20         __gthread_equal(unsigned long, unsigned long) [78]
-----------------------------------------------
                0.00    0.00       4/20          _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
                0.00    0.00      16/20          std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [222]
[79]     0.0    0.00    0.00      20         std::vector<std::thread, std::allocator<std::thread> >::size() const [79]
-----------------------------------------------
                0.00    0.00       5/20          main [12]
                0.00    0.00      15/20          void std::_Destroy<std::thread>(std::thread*) [91]
[80]     0.0    0.00    0.00      20         std::thread::~thread() [80]
                0.00    0.00      21/21          std::thread::joinable() const [75]
-----------------------------------------------
                0.00    0.00      20/20          std::thread::joinable() const [75]
[81]     0.0    0.00    0.00      20         std::operator==(std::thread::id, std::thread::id) [81]
                0.00    0.00      20/20          __gthread_equal(unsigned long, unsigned long) [78]
-----------------------------------------------
                0.00    0.00       6/19          main [12]
                0.00    0.00       6/19          std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [179]
                0.00    0.00       7/19          std::move_iterator<std::thread*>::operator*() const [143]
[82]     0.0    0.00    0.00      19         std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [82]
-----------------------------------------------
                0.00    0.00       5/19          _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
                0.00    0.00       7/19          std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [147]
                0.00    0.00       7/19          std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
[83]     0.0    0.00    0.00      19         int&& std::forward<int>(std::remove_reference<int>::type&) [83]
-----------------------------------------------
                0.00    0.00      18/18          bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [116]
[84]     0.0    0.00    0.00      18         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const [84]
-----------------------------------------------
                0.00    0.00      17/17          tervel::util::memory::rc::DescriptorPool::reserve(int) [36]
[85]     0.0    0.00    0.00      17         tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [85]
                0.00    0.00      17/45          tervel::util::memory::rc::PoolElement::header() [63]
-----------------------------------------------
                0.00    0.00      17/17          tervel::util::memory::rc::PoolElement::Header::Header() [107]
[86]     0.0    0.00    0.00      17         std::atomic<long>::atomic(long) [86]
                0.00    0.00      12/12          std::__atomic_base<long>::__atomic_base(long) [102]
-----------------------------------------------
                0.00    0.00      16/16          std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*) [89]
[87]     0.0    0.00    0.00      16         std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*) [87]
-----------------------------------------------
                0.00    0.00      16/16          std::atomic<void*>::atomic() [90]
[88]     0.0    0.00    0.00      16         std::__atomic_base<void*>::__atomic_base() [88]
-----------------------------------------------
                0.00    0.00      16/16          tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [119]
[89]     0.0    0.00    0.00      16         std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*) [89]
                0.00    0.00      16/16          std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*) [87]
-----------------------------------------------
                0.00    0.00      16/16          tervel::util::memory::hp::HazardPointer::HazardPointer(int) [273]
[90]     0.0    0.00    0.00      16         std::atomic<void*>::atomic() [90]
                0.00    0.00      16/16          std::__atomic_base<void*>::__atomic_base() [88]
-----------------------------------------------
                0.00    0.00      15/15          void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [209]
[91]     0.0    0.00    0.00      15         void std::_Destroy<std::thread>(std::thread*) [91]
                0.00    0.00      15/20          std::thread::~thread() [80]
-----------------------------------------------
                0.00    0.00       7/14          _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
                0.00    0.00       7/14          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
[92]     0.0    0.00    0.00      14         std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [92]
                0.00    0.00      14/38          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [66]
-----------------------------------------------
                0.00    0.00       7/14          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
                0.00    0.00       7/14          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [197]
[93]     0.0    0.00    0.00      14         std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [93]
                0.00    0.00      14/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
-----------------------------------------------
                0.00    0.00       7/14          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [158]
                0.00    0.00       7/14          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [198]
[94]     0.0    0.00    0.00      14         std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [94]
                0.00    0.00      14/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
-----------------------------------------------
                0.00    0.00       6/14          std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [201]
                0.00    0.00       8/14          std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [127]
[95]     0.0    0.00    0.00      14         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [95]
                0.00    0.00       6/6           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [202]
-----------------------------------------------
                0.00    0.00      12/12          std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [98]
[96]     0.0    0.00    0.00      12         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [96]
-----------------------------------------------
                0.00    0.00       4/12          __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [221]
                0.00    0.00       8/12          std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&) [131]
[97]     0.0    0.00    0.00      12         __gnu_cxx::new_allocator<std::thread>::max_size() const [97]
-----------------------------------------------
                0.00    0.00       4/12          std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [593]
                0.00    0.00       8/12          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
[98]     0.0    0.00    0.00      12         std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [98]
                0.00    0.00      12/12          __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [96]
-----------------------------------------------
                0.00    0.00      12/12          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [115]
[99]     0.0    0.00    0.00      12         std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&) [99]
-----------------------------------------------
                0.00    0.00      12/12          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [109]
[100]    0.0    0.00    0.00      12         std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [100]
-----------------------------------------------
                0.00    0.00      12/12          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [110]
[101]    0.0    0.00    0.00      12         std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&) [101]
-----------------------------------------------
                0.00    0.00      12/12          std::atomic<long>::atomic(long) [86]
[102]    0.0    0.00    0.00      12         std::__atomic_base<long>::__atomic_base(long) [102]
-----------------------------------------------
                0.00    0.00      12/12          std::thread::thread(std::thread&&) [104]
[103]    0.0    0.00    0.00      12         std::thread::swap(std::thread&) [103]
                0.00    0.00      12/12          void std::swap<std::thread::id>(std::thread::id&, std::thread::id&) [105]
-----------------------------------------------
                0.00    0.00       5/12          _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [208]
                0.00    0.00       7/12          _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [180]
[104]    0.0    0.00    0.00      12         std::thread::thread(std::thread&&) [104]
                0.00    0.00      12/38          std::thread::id::id() [65]
                0.00    0.00      12/12          std::thread::swap(std::thread&) [103]
-----------------------------------------------
                0.00    0.00      12/12          std::thread::swap(std::thread&) [103]
[105]    0.0    0.00    0.00      12         void std::swap<std::thread::id>(std::thread::id&, std::thread::id&) [105]
                0.00    0.00      36/36          std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&) [67]
-----------------------------------------------
                0.00    0.00       6/12          std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
                0.00    0.00       6/12          std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
[106]    0.0    0.00    0.00      12         void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [106]
-----------------------------------------------
                0.00    0.00      11/11          tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [33]
[107]    0.0    0.00    0.00      11         tervel::util::memory::rc::PoolElement::Header::Header() [107]
                0.00    0.00      17/17          std::atomic<long>::atomic(long) [86]
-----------------------------------------------
                0.00    0.00      11/11          _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [111]
[108]    0.0    0.00    0.00      11         std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&) [108]
-----------------------------------------------
                0.00    0.00       4/11          std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [213]
                0.00    0.00       7/11          std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
[109]    0.0    0.00    0.00      11         _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [109]
                0.00    0.00      12/12          std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [100]
-----------------------------------------------
                0.00    0.00       4/11          _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE [227]
                0.00    0.00       7/11          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
[110]    0.0    0.00    0.00      11         std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [110]
                0.00    0.00      12/12          std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&) [101]
-----------------------------------------------
                0.00    0.00       4/11          _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE [214]
                0.00    0.00       7/11          _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [158]
[111]    0.0    0.00    0.00      11         _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [111]
                0.00    0.00      11/11          std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&) [108]
-----------------------------------------------
                0.00    0.00      11/11          bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [113]
[112]    0.0    0.00    0.00      11         bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [112]
                0.00    0.00      22/22          std::move_iterator<std::thread*>::base() const [71]
-----------------------------------------------
                0.00    0.00      11/11          std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [225]
[113]    0.0    0.00    0.00      11         bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [113]
                0.00    0.00      11/11          bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [112]
-----------------------------------------------
                0.00    0.00      10/10          std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [125]
[114]    0.0    0.00    0.00      10         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [114]
-----------------------------------------------
                0.00    0.00       3/10          std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [244]
                0.00    0.00       7/10          _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
[115]    0.0    0.00    0.00      10         std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [115]
                0.00    0.00      12/12          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&) [99]
-----------------------------------------------
                0.00    0.00       9/9           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [371]
[116]    0.0    0.00    0.00       9         bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [116]
                0.00    0.00      18/18          __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const [84]
-----------------------------------------------
                0.00    0.00       1/9           std::vector<std::thread, std::allocator<std::thread> >::~vector() [353]
                0.00    0.00       8/9           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
[117]    0.0    0.00    0.00       9         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [117]
-----------------------------------------------
                0.00    0.00       8/8           tervel::util::memory::hp::ListManager::ListManager(unsigned long) [271]
[118]    0.0    0.00    0.00       8         tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool() [118]
-----------------------------------------------
                0.00    0.00       8/8           tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [276]
[119]    0.0    0.00    0.00       8         tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [119]
                0.00    0.00      16/16          std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*) [89]
-----------------------------------------------
                0.00    0.00       8/8           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [371]
[120]    0.0    0.00    0.00       8         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++() [120]
-----------------------------------------------
                0.00    0.00       8/8           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [371]
[121]    0.0    0.00    0.00       8         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const [121]
-----------------------------------------------
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::max_size() const [124]
[122]    0.0    0.00    0.00       8         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const [122]
-----------------------------------------------
                0.00    0.00       8/8           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [161]
[123]    0.0    0.00    0.00       8         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [123]
                0.00    0.00       7/7           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [172]
-----------------------------------------------
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [222]
[124]    0.0    0.00    0.00       8         std::vector<std::thread, std::allocator<std::thread> >::max_size() const [124]
                0.00    0.00       8/8           std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&) [132]
                0.00    0.00       8/8           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const [122]
-----------------------------------------------
                0.00    0.00       1/8           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [593]
                0.00    0.00       7/8           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
[125]    0.0    0.00    0.00       8         std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [125]
                0.00    0.00      10/10          __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [114]
-----------------------------------------------
                0.00    0.00       2/8           std::thread::_Impl_base::~_Impl_base() [259]
                0.00    0.00       6/8           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
[126]    0.0    0.00    0.00       8         std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [126]
                0.00    0.00       8/8           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [127]
-----------------------------------------------
                0.00    0.00       8/8           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [126]
[127]    0.0    0.00    0.00       8         std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [127]
                0.00    0.00       8/14          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [95]
-----------------------------------------------
                0.00    0.00       8/8           std::atomic<tervel::util::OpRecord*>::atomic() [133]
[128]    0.0    0.00    0.00       8         std::__atomic_base<tervel::util::OpRecord*>::__atomic_base() [128]
-----------------------------------------------
                0.00    0.00       2/8           TestObject::atomic_add(int, int) [267]
                0.00    0.00       6/8           tervel::Tervel::get_thread_id() [192]
[129]    0.0    0.00    0.00       8         std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order) [129]
-----------------------------------------------
                0.00    0.00       8/8           std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*) [134]
[130]    0.0    0.00    0.00       8         std::move_iterator<std::thread*>::move_iterator(std::thread*) [130]
-----------------------------------------------
                0.00    0.00       8/8           std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&) [132]
[131]    0.0    0.00    0.00       8         std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&) [131]
                0.00    0.00       8/12          __gnu_cxx::new_allocator<std::thread>::max_size() const [97]
-----------------------------------------------
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::max_size() const [124]
[132]    0.0    0.00    0.00       8         std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&) [132]
                0.00    0.00       8/8           std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&) [131]
-----------------------------------------------
                0.00    0.00       8/8           tervel::util::ProgressAssurance::ProgressAssurance(int) [269]
[133]    0.0    0.00    0.00       8         std::atomic<tervel::util::OpRecord*>::atomic() [133]
                0.00    0.00       8/8           std::__atomic_base<tervel::util::OpRecord*>::__atomic_base() [128]
-----------------------------------------------
                0.00    0.00       8/8           std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [230]
[134]    0.0    0.00    0.00       8         std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*) [134]
                0.00    0.00       8/8           std::move_iterator<std::thread*>::move_iterator(std::thread*) [130]
-----------------------------------------------
                0.00    0.00       8/8           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [371]
[135]    0.0    0.00    0.00       8         main::{lambda(std::thread&)#1}::operator()(std::thread&) const [135]
-----------------------------------------------
                0.00    0.00       7/7           __gnu_cxx::__exchange_and_add_dispatch(int*, int) [193]
[136]    0.0    0.00    0.00       7         __gthread_active_p() [136]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [167]
[137]    0.0    0.00    0.00       7         _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [137]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/26          operator new(unsigned long, void*) [69]
                0.00    0.00       7/7           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [178]
-----------------------------------------------
                0.00    0.00       7/7           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [145]
[138]    0.0    0.00    0.00       7         __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator() [138]
-----------------------------------------------
                0.00    0.00       7/7           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [170]
[139]    0.0    0.00    0.00       7         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [139]
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [142]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [169]
[140]    0.0    0.00    0.00       7         _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [77]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [76]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/26          operator new(unsigned long, void*) [69]
                0.00    0.00       7/22          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [72]
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
-----------------------------------------------
                0.00    0.00       7/7           __gnu_cxx::__exchange_and_add_dispatch(int*, int) [193]
[141]    0.0    0.00    0.00       7         __gnu_cxx::__exchange_and_add(int volatile*, int) [141]
-----------------------------------------------
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [139]
[142]    0.0    0.00    0.00       7         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [142]
-----------------------------------------------
                0.00    0.00       7/7           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [225]
[143]    0.0    0.00    0.00       7         std::move_iterator<std::thread*>::operator*() const [143]
                0.00    0.00       7/19          std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [82]
-----------------------------------------------
                0.00    0.00       7/7           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [172]
[144]    0.0    0.00    0.00       7         std::type_info::operator==(std::type_info const&) const [144]
-----------------------------------------------
                0.00    0.00       7/7           _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [181]
[145]    0.0    0.00    0.00       7         std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [145]
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator() [138]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [196]
[146]    0.0    0.00    0.00       7         std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [146]
                0.00    0.00       7/44          int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
[147]    0.0    0.00    0.00       7         std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [147]
                0.00    0.00       7/19          int&& std::forward<int>(std::remove_reference<int>::type&) [83]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
[148]    0.0    0.00    0.00       7         std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [148]
                0.00    0.00       7/7           std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&) [186]
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [160]
-----------------------------------------------
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [182]
[149]    0.0    0.00    0.00       7         _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [149]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [161]
-----------------------------------------------
                0.00    0.00       7/7           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [166]
[150]    0.0    0.00    0.00       7         std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [150]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
[151]    0.0    0.00    0.00       7         std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [151]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [175]
[152]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
                0.00    0.00       7/7           _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [187]
                0.00    0.00       7/7           std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [151]
                0.00    0.00       7/10          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [115]
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
                0.00    0.00       7/38          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [66]
                0.00    0.00       7/14          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [92]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
[153]    0.0    0.00    0.00       7         std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [153]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
[154]    0.0    0.00    0.00       7         std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
                0.00    0.00       7/7           _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [188]
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [153]
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
                0.00    0.00       7/11          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [109]
                0.00    0.00       7/19          int&& std::forward<int>(std::remove_reference<int>::type&) [83]
                0.00    0.00       7/7           std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [147]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
[155]    0.0    0.00    0.00       7         std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
                0.00    0.00       7/7           std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&) [189]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_ [156]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [158]
                0.00    0.00       7/11          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [110]
                0.00    0.00       7/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       7/14          std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [93]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
[156]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_ [156]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [158]
[157]    0.0    0.00    0.00       7         std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&) [157]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
[158]    0.0    0.00    0.00       7         _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [158]
                0.00    0.00       7/7           std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&) [157]
                0.00    0.00       7/7           _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_ [190]
                0.00    0.00       7/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       7/11          _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [111]
                0.00    0.00       7/14          std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [94]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [178]
[159]    0.0    0.00    0.00       7         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [159]
                0.00    0.00       7/7           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [175]
-----------------------------------------------
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [148]
[160]    0.0    0.00    0.00       7         std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [160]
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [164]
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [163]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [149]
[161]    0.0    0.00    0.00       7         std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [161]
                0.00    0.00       8/8           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [123]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
                0.00    0.00       7/7           void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...) [183]
-----------------------------------------------
                0.00    0.00       7/7           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [225]
[162]    0.0    0.00    0.00       7         std::move_iterator<std::thread*>::operator++() [162]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [160]
[163]    0.0    0.00    0.00       7         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [163]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [160]
[164]    0.0    0.00    0.00       7         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [164]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [161]
[165]    0.0    0.00    0.00       7         std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
                0.00    0.00       8/12          std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [98]
                0.00    0.00       7/8           std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [125]
                0.00    0.00       7/7           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [170]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [184]
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [171]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
[166]    0.0    0.00    0.00       7         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [166]
                0.00    0.00       7/7           std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [150]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [168]
[167]    0.0    0.00    0.00       7         _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [167]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [137]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
[168]    0.0    0.00    0.00       7         _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [168]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [167]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [171]
[169]    0.0    0.00    0.00       7         _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [169]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [77]
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
[170]    0.0    0.00    0.00       7         std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) [170]
                0.00    0.00       7/7           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [139]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
[171]    0.0    0.00    0.00       7         _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_ [171]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&) [77]
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [169]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [123]
[172]    0.0    0.00    0.00       7         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) [172]
                0.00    0.00       7/7           std::type_info::operator==(std::type_info const&) const [144]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
[173]    0.0    0.00    0.00       7         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >) [173]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [76]
-----------------------------------------------
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [140]
[174]    0.0    0.00    0.00       7         _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_ [174]
                0.00    0.00       7/7           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [166]
                0.00    0.00       7/21          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [76]
                0.00    0.00       7/22          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [72]
                0.00    0.00       7/7           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >) [173]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [168]
-----------------------------------------------
                0.00    0.00       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [159]
[175]    0.0    0.00    0.00       7         _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [175]
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [178]
[176]    0.0    0.00    0.00       7         std::thread::_Impl_base::_Impl_base() [176]
-----------------------------------------------
                0.00    0.00       7/7           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
[177]    0.0    0.00    0.00       7         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [177]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [181]
-----------------------------------------------
                0.00    0.00       7/7           _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [137]
[178]    0.0    0.00    0.00       7         std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [178]
                0.00    0.00       7/7           std::thread::_Impl_base::_Impl_base() [176]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [159]
-----------------------------------------------
                0.00    0.00       7/7           main [12]
[179]    0.0    0.00    0.00       7         std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [179]
                0.00    0.00       6/19          std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&) [82]
                0.00    0.00       6/6           void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [206]
-----------------------------------------------
                0.00    0.00       7/7           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [225]
[180]    0.0    0.00    0.00       7         _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [180]
                0.00    0.00       7/32          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [68]
                0.00    0.00       7/26          operator new(unsigned long, void*) [69]
                0.00    0.00       7/12          std::thread::thread(std::thread&&) [104]
-----------------------------------------------
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [177]
[181]    0.0    0.00    0.00       7         _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [181]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [145]
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [182]
                0.00    0.00       7/22          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [72]
-----------------------------------------------
                0.00    0.00       7/7           _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_ [181]
[182]    0.0    0.00    0.00       7         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [182]
                0.00    0.00       7/98          std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&) [60]
                0.00    0.00       7/7           _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [149]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [161]
[183]    0.0    0.00    0.00       7         void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...) [183]
-----------------------------------------------
                0.00    0.00       7/7           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [165]
[184]    0.0    0.00    0.00       7         std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [184]
-----------------------------------------------
                0.00    0.00       7/7           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [200]
[185]    0.0    0.00    0.00       7         std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*)) [185]
-----------------------------------------------
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [148]
[186]    0.0    0.00    0.00       7         std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&) [186]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [152]
[187]    0.0    0.00    0.00       7         _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [187]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [154]
[188]    0.0    0.00    0.00       7         _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_ [188]
-----------------------------------------------
                0.00    0.00       7/7           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [155]
[189]    0.0    0.00    0.00       7         std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&) [189]
-----------------------------------------------
                0.00    0.00       7/7           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [158]
[190]    0.0    0.00    0.00       7         _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_ [190]
-----------------------------------------------
                0.00    0.00       6/6           tervel::util::memory::rc::PoolManager::allocate_pool() [34]
[191]    0.0    0.00    0.00       6         tervel::ThreadContext::get_thread_id() [191]
-----------------------------------------------
                0.00    0.00       6/6           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [35]
[192]    0.0    0.00    0.00       6         tervel::Tervel::get_thread_id() [192]
                0.00    0.00       6/8           std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order) [129]
-----------------------------------------------
                0.00    0.00       6/6           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [202]
[193]    0.0    0.00    0.00       6         __gnu_cxx::__exchange_and_add_dispatch(int*, int) [193]
                0.00    0.00       7/7           __gthread_active_p() [136]
                0.00    0.00       7/7           __gnu_cxx::__exchange_and_add(int volatile*, int) [141]
-----------------------------------------------
                0.00    0.00       6/6           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
[194]    0.0    0.00    0.00       6         std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [194]
                0.00    0.00       6/6           std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [201]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [204]
[195]    0.0    0.00    0.00       6         std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
                0.00    0.00       7/38          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [66]
                0.00    0.00       7/14          std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [92]
                0.00    0.00       6/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       6/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       6/44          int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
                0.00    0.00       6/6           _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [196]
-----------------------------------------------
                0.00    0.00       6/6           std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
[196]    0.0    0.00    0.00       6         _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [196]
                0.00    0.00       7/44          int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
                0.00    0.00       7/7           std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [146]
                0.00    0.00       6/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       6/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       6/6           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [197]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [196]
[197]    0.0    0.00    0.00       6         std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [197]
                0.00    0.00       7/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       7/14          std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [93]
                0.00    0.00       6/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       6/6           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [198]
-----------------------------------------------
                0.00    0.00       6/6           std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [197]
[198]    0.0    0.00    0.00       6         _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [198]
                0.00    0.00       7/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       7/14          std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [94]
                0.00    0.00       6/6           _ZNSt11_Tuple_implILm4EJEEC2Ev [199]
-----------------------------------------------
                0.00    0.00       6/6           _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [198]
[199]    0.0    0.00    0.00       6         _ZNSt11_Tuple_implILm4EJEEC2Ev [199]
-----------------------------------------------
                0.00    0.00       6/6           std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
[200]    0.0    0.00    0.00       6         std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [200]
                0.00    0.00       8/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       7/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       7/7           std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*)) [185]
                0.00    0.00       6/44          int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
                0.00    0.00       6/6           _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [204]
-----------------------------------------------
                0.00    0.00       6/6           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [194]
[201]    0.0    0.00    0.00       6         std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [201]
                0.00    0.00       6/14          std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [95]
-----------------------------------------------
                0.00    0.00       6/6           std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [95]
[202]    0.0    0.00    0.00       6         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [202]
                0.00    0.00       6/6           __gnu_cxx::__exchange_and_add_dispatch(int*, int) [193]
-----------------------------------------------
                0.00    0.00       6/6           std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
[203]    0.0    0.00    0.00       6         std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*)) [203]
-----------------------------------------------
                0.00    0.00       6/6           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [200]
[204]    0.0    0.00    0.00       6         _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_ [204]
                0.00    0.00       6/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       6/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       6/44          int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
                0.00    0.00       6/38          void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [66]
                0.00    0.00       6/6           std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [195]
-----------------------------------------------
                0.00    0.00       6/6           main [12]
[205]    0.0    0.00    0.00       6         std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [177]
                0.00    0.00       7/7           std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [148]
                0.00    0.00       6/38          std::thread::id::id() [65]
                0.00    0.00       6/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       6/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       6/44          int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
                0.00    0.00       6/12          void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [106]
                0.00    0.00       6/6           std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
                0.00    0.00       6/8           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [126]
                0.00    0.00       6/6           std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [194]
-----------------------------------------------
                0.00    0.00       6/6           std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&) [179]
[206]    0.0    0.00    0.00       6         void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [206]
                0.00    0.00       6/32          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [68]
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
                0.00    0.00       1/5           _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [212]
-----------------------------------------------
                0.00    0.00       6/6           std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [205]
[207]    0.0    0.00    0.00       6         std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [207]
                0.00    0.00       7/71          tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&) [62]
                0.00    0.00       7/77          TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&) [61]
                0.00    0.00       6/44          int& std::forward<int&>(std::remove_reference<int&>::type&) [64]
                0.00    0.00       6/12          void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*) [106]
                0.00    0.00       6/6           std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*)) [203]
                0.00    0.00       6/6           std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [200]
-----------------------------------------------
                0.00    0.00       5/5           _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [211]
[208]    0.0    0.00    0.00       5         _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [208]
                0.00    0.00       5/32          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [68]
                0.00    0.00       5/26          operator new(unsigned long, void*) [69]
                0.00    0.00       5/12          std::thread::thread(std::thread&&) [104]
-----------------------------------------------
                0.00    0.00       5/5           void std::_Destroy<std::thread*>(std::thread*, std::thread*) [218]
[209]    0.0    0.00    0.00       5         void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [209]
                0.00    0.00      15/22          std::thread* std::__addressof<std::thread>(std::thread&) [73]
                0.00    0.00      15/15          void std::_Destroy<std::thread>(std::thread*) [91]
-----------------------------------------------
                0.00    0.00       1/5           std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [338]
                0.00    0.00       4/5           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
[210]    0.0    0.00    0.00       5         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [210]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long) [220]
-----------------------------------------------
                0.00    0.00       5/5           _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [212]
[211]    0.0    0.00    0.00       5         _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [211]
                0.00    0.00       5/32          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [68]
                0.00    0.00       5/5           _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [208]
-----------------------------------------------
                0.00    0.00       1/5           void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [206]
                0.00    0.00       4/5           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
[212]    0.0    0.00    0.00       5         _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [212]
                0.00    0.00       5/32          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [68]
                0.00    0.00       5/5           _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ [211]
-----------------------------------------------
                0.00    0.00       5/5           std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&) [216]
[213]    0.0    0.00    0.00       5         std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [213]
                0.00    0.00       4/11          _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [109]
-----------------------------------------------
                0.00    0.00       5/5           _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [217]
[214]    0.0    0.00    0.00       5         _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE [214]
                0.00    0.00       4/11          _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [111]
-----------------------------------------------
                0.00    0.00       5/5           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[215]    0.0    0.00    0.00       5         _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [215]
                0.00    0.00       3/3           std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [244]
-----------------------------------------------
                0.00    0.00       5/5           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[216]    0.0    0.00    0.00       5         std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&) [216]
                0.00    0.00       5/5           std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [213]
-----------------------------------------------
                0.00    0.00       5/5           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[217]    0.0    0.00    0.00       5         _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [217]
                0.00    0.00       5/5           _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE [214]
-----------------------------------------------
                0.00    0.00       5/5           void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [219]
[218]    0.0    0.00    0.00       5         void std::_Destroy<std::thread*>(std::thread*, std::thread*) [218]
                0.00    0.00       5/5           void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [209]
-----------------------------------------------
                0.00    0.00       1/5           std::vector<std::thread, std::allocator<std::thread> >::~vector() [353]
                0.00    0.00       4/5           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
[219]    0.0    0.00    0.00       5         void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [219]
                0.00    0.00       5/5           void std::_Destroy<std::thread*>(std::thread*, std::thread*) [218]
-----------------------------------------------
                0.00    0.00       4/4           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [210]
[220]    0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long) [220]
-----------------------------------------------
                0.00    0.00       4/4           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [224]
[221]    0.0    0.00    0.00       4         __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [221]
                0.00    0.00       4/12          __gnu_cxx::new_allocator<std::thread>::max_size() const [97]
-----------------------------------------------
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
[222]    0.0    0.00    0.00       4         std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [222]
                0.00    0.00      16/20          std::vector<std::thread, std::allocator<std::thread> >::size() const [79]
                0.00    0.00       8/8           std::vector<std::thread, std::allocator<std::thread> >::max_size() const [124]
                0.00    0.00       4/4           unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [232]
-----------------------------------------------
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [329]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [331]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [333]
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [326]
[223]    0.0    0.00    0.00       4         std::_Tuple_impl<2ul>::_Tuple_impl() [223]
-----------------------------------------------
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
[224]    0.0    0.00    0.00       4         std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [224]
                0.00    0.00       4/4           __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [221]
-----------------------------------------------
                0.00    0.00       4/4           std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [228]
[225]    0.0    0.00    0.00       4         std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [225]
                0.00    0.00      11/11          bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&) [113]
                0.00    0.00       7/7           std::move_iterator<std::thread*>::operator*() const [143]
                0.00    0.00       7/22          std::thread* std::__addressof<std::thread>(std::thread&) [73]
                0.00    0.00       7/7           _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_ [180]
                0.00    0.00       7/7           std::move_iterator<std::thread*>::operator++() [162]
-----------------------------------------------
                0.00    0.00       4/4           void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&) [206]
[226]    0.0    0.00    0.00       4         _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
                0.00    0.00       8/9           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [117]
                0.00    0.00       4/4           std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [222]
                0.00    0.00       4/4           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [224]
                0.00    0.00       4/32          std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&) [68]
                0.00    0.00       4/20          std::vector<std::thread, std::allocator<std::thread> >::size() const [79]
                0.00    0.00       4/5           _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ [212]
                0.00    0.00       4/4           std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [230]
                0.00    0.00       4/5           void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [219]
                0.00    0.00       4/5           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [210]
-----------------------------------------------
                0.00    0.00       4/4           _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [231]
[227]    0.0    0.00    0.00       4         _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE [227]
                0.00    0.00       4/11          std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [110]
-----------------------------------------------
                0.00    0.00       4/4           std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&) [229]
[228]    0.0    0.00    0.00       4         std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [228]
                0.00    0.00       4/4           std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [225]
-----------------------------------------------
                0.00    0.00       4/4           std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [230]
[229]    0.0    0.00    0.00       4         std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&) [229]
                0.00    0.00       4/4           std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*) [228]
-----------------------------------------------
                0.00    0.00       4/4           _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_ [226]
[230]    0.0    0.00    0.00       4         std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&) [230]
                0.00    0.00       8/8           std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*) [134]
                0.00    0.00       4/4           std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&) [229]
-----------------------------------------------
                0.00    0.00       4/4           _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [3]
[231]    0.0    0.00    0.00       4         _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [231]
                0.00    0.00       4/4           _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE [227]
-----------------------------------------------
                0.00    0.00       4/4           std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [222]
[232]    0.0    0.00    0.00       4         unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) [232]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [299]
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [326]
                0.00    0.00       1/4           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [318]
                0.00    0.00       1/4           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [344]
[233]    0.0    0.00    0.00       4         std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [233]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [301]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [331]
                0.00    0.00       1/4           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [320]
                0.00    0.00       1/4           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [345]
[234]    0.0    0.00    0.00       4         std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [234]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [303]
                0.00    0.00       1/4           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [329]
                0.00    0.00       1/4           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [322]
                0.00    0.00       1/4           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [346]
[235]    0.0    0.00    0.00       4         std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [235]
-----------------------------------------------
                0.00    0.00       1/4           std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [305]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [333]
                0.00    0.00       1/4           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [325]
                0.00    0.00       1/4           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [347]
[236]    0.0    0.00    0.00       4         std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [236]
-----------------------------------------------
                0.00    0.00       3/3           tervel::util::memory::hp::ListManager::allocate_list() [238]
[237]    0.0    0.00    0.00       3         tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*) [237]
-----------------------------------------------
                0.00    0.00       3/3           tervel::ThreadContext::ThreadContext(tervel::Tervel*) [35]
[238]    0.0    0.00    0.00       3         tervel::util::memory::hp::ListManager::allocate_list() [238]
                0.00    0.00       3/3           tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*) [237]
-----------------------------------------------
                0.00    0.00       3/3           std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [242]
[239]    0.0    0.00    0.00       3         void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [239]
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [257]
-----------------------------------------------
                0.00    0.00       3/3           main [12]
[240]    0.0    0.00    0.00       3         std::__atomic_base<int>::load(std::memory_order) const [240]
-----------------------------------------------
                0.00    0.00       3/3           std::atomic<unsigned long>::atomic(unsigned long) [243]
[241]    0.0    0.00    0.00       3         std::__atomic_base<unsigned long>::__atomic_base(unsigned long) [241]
-----------------------------------------------
                0.00    0.00       3/3           void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [255]
[242]    0.0    0.00    0.00       3         std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [242]
                0.00    0.00       3/3           void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [239]
-----------------------------------------------
                0.00    0.00       1/3           tervel::Tervel::Tervel(unsigned long) [278]
                0.00    0.00       2/3           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [268]
[243]    0.0    0.00    0.00       3         std::atomic<unsigned long>::atomic(unsigned long) [243]
                0.00    0.00       3/3           std::__atomic_base<unsigned long>::__atomic_base(unsigned long) [241]
-----------------------------------------------
                0.00    0.00       3/3           _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [215]
[244]    0.0    0.00    0.00       3         std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [244]
                0.00    0.00       3/10          std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [115]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [291]
                0.00    0.00       1/3           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [318]
                0.00    0.00       1/3           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [344]
[245]    0.0    0.00    0.00       3         tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [245]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [293]
                0.00    0.00       1/3           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [320]
                0.00    0.00       1/3           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [345]
[246]    0.0    0.00    0.00       3         tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [246]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [295]
                0.00    0.00       1/3           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [322]
                0.00    0.00       1/3           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [346]
[247]    0.0    0.00    0.00       3         std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [247]
-----------------------------------------------
                0.00    0.00       1/3           std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [297]
                0.00    0.00       1/3           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [325]
                0.00    0.00       1/3           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [347]
[248]    0.0    0.00    0.00       3         std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [248]
-----------------------------------------------
                0.00    0.00       1/2           main [12]
                0.00    0.00       1/2           run(int, tervel::Tervel*, TestObject*) [2]
[249]    0.0    0.00    0.00       2         tervel::ThreadContext::~ThreadContext() [249]
-----------------------------------------------
                0.00    0.00       2/2           std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [342]
[250]    0.0    0.00    0.00       2         void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [250]
                0.00    0.00       2/2           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::~_Impl() [260]
-----------------------------------------------
                0.00    0.00       1/2           std::vector<std::thread, std::allocator<std::thread> >::begin() [351]
                0.00    0.00       1/2           std::vector<std::thread, std::allocator<std::thread> >::end() [350]
[251]    0.0    0.00    0.00       2         __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [251]
-----------------------------------------------
                0.00    0.00       2/2           main [12]
[252]    0.0    0.00    0.00       2         std::__atomic_base<unsigned long>::load(std::memory_order) const [252]
-----------------------------------------------
                0.00    0.00       2/2           std::atomic<bool>::atomic(bool) [258]
[253]    0.0    0.00    0.00       2         std::atomic_bool::atomic_bool(bool) [253]
                0.00    0.00       2/2           std::__atomic_base<bool>::__atomic_base(bool) [254]
-----------------------------------------------
                0.00    0.00       2/2           std::atomic_bool::atomic_bool(bool) [253]
[254]    0.0    0.00    0.00       2         std::__atomic_base<bool>::__atomic_base(bool) [254]
-----------------------------------------------
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [593]
[255]    0.0    0.00    0.00       2         void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [255]
                0.00    0.00       3/3           std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [242]
-----------------------------------------------
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [257]
[256]    0.0    0.00    0.00       2         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [256]
                0.00    0.00       1/22          std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [72]
-----------------------------------------------
                0.00    0.00       2/2           void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [239]
[257]    0.0    0.00    0.00       2         std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [257]
                0.00    0.00       2/2           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl() [256]
                0.00    0.00       1/1           std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [341]
-----------------------------------------------
                0.00    0.00       2/2           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [268]
[258]    0.0    0.00    0.00       2         std::atomic<bool>::atomic(bool) [258]
                0.00    0.00       2/2           std::atomic_bool::atomic_bool(bool) [253]
-----------------------------------------------
                0.00    0.00       2/2           std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::~_Impl() [260]
[259]    0.0    0.00    0.00       2         std::thread::_Impl_base::~_Impl_base() [259]
                0.00    0.00       2/8           std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [126]
-----------------------------------------------
                0.00    0.00       2/2           void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [250]
[260]    0.0    0.00    0.00       2         std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::~_Impl() [260]
                0.00    0.00       2/2           std::thread::_Impl_base::~_Impl_base() [259]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [652]
[261]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE [261]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [264]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [652]
[262]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv [262]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [266]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [652]
[263]    0.0    0.00    0.00       1         _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb [263]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [265]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE [261]
[264]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [264]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb [263]
[265]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [265]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv [262]
[266]    0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [266]
-----------------------------------------------
                0.00    0.00       1/1           run_enqueue_dequeue(int, TestObject*) [5]
[267]    0.0    0.00    0.00       1         TestObject::atomic_add(int, int) [267]
                0.00    0.00       2/8           std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order) [129]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[268]    0.0    0.00    0.00       1         TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [268]
                0.00    0.00       2/3           std::atomic<unsigned long>::atomic(unsigned long) [243]
                0.00    0.00       2/2           std::atomic<bool>::atomic(bool) [258]
                0.00    0.00       1/1           std::atomic<int>::atomic(int) [348]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [278]
[269]    0.0    0.00    0.00       1         tervel::util::ProgressAssurance::ProgressAssurance(int) [269]
                0.00    0.00       8/8           std::atomic<tervel::util::OpRecord*>::atomic() [133]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [313]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [279]
[270]    0.0    0.00    0.00       1         tervel::util::ProgressAssurance::~ProgressAssurance() [270]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [314]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [278]
[271]    0.0    0.00    0.00       1         tervel::util::memory::hp::ListManager::ListManager(unsigned long) [271]
                0.00    0.00       8/8           tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool() [118]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [307]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [279]
[272]    0.0    0.00    0.00       1         tervel::util::memory::hp::ListManager::~ListManager() [272]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [308]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [278]
[273]    0.0    0.00    0.00       1         tervel::util::memory::hp::HazardPointer::HazardPointer(int) [273]
                0.00    0.00      16/16          std::atomic<void*>::atomic() [90]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [316]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [279]
[274]    0.0    0.00    0.00       1         tervel::util::memory::hp::HazardPointer::~HazardPointer() [274]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [317]
-----------------------------------------------
                0.00    0.00       1/1           tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [26]
[275]    0.0    0.00    0.00       1         tervel::util::memory::hp::Element::Element() [275]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::Tervel(unsigned long) [278]
[276]    0.0    0.00    0.00       1         tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [276]
                0.00    0.00       8/8           tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [119]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [310]
-----------------------------------------------
                0.00    0.00       1/1           tervel::Tervel::~Tervel() [279]
[277]    0.0    0.00    0.00       1         tervel::util::memory::rc::PoolManager::~PoolManager() [277]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [311]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[278]    0.0    0.00    0.00       1         tervel::Tervel::Tervel(unsigned long) [278]
                0.00    0.00       1/3           std::atomic<unsigned long>::atomic(unsigned long) [243]
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::HazardPointer(int) [273]
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::ListManager(unsigned long) [271]
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [276]
                0.00    0.00       1/1           tervel::util::ProgressAssurance::ProgressAssurance(int) [269]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[279]    0.0    0.00    0.00       1         tervel::Tervel::~Tervel() [279]
                0.00    0.00       1/1           tervel::util::ProgressAssurance::~ProgressAssurance() [270]
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::~PoolManager() [277]
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::~ListManager() [272]
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::~HazardPointer() [274]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [343]
[280]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [280]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::thread>::allocator() [288]
[281]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::thread>::new_allocator() [281]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::thread>::~allocator() [289]
[282]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::thread>::~new_allocator() [282]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [308]
[283]    0.0    0.00    0.00       1         std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const [283]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [311]
[284]    0.0    0.00    0.00       1         std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const [284]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [314]
[285]    0.0    0.00    0.00       1         std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const [285]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [317]
[286]    0.0    0.00    0.00       1         std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const [286]
-----------------------------------------------
                0.00    0.00       1/1           std::chrono::duration<long, std::ratio<1l, 1000000000l> > std::chrono::__duration_cast_impl<std::chrono::duration<long, std::ratio<1l, 1000000000l> >, std::ratio<1000000000l, 1l>, long, false, true>::__cast<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [608]
[287]    0.0    0.00    0.00       1         std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [287]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [335]
[288]    0.0    0.00    0.00       1         std::allocator<std::thread>::allocator() [288]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::thread>::new_allocator() [281]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [336]
[289]    0.0    0.00    0.00       1         std::allocator<std::thread>::~allocator() [289]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::thread>::~new_allocator() [282]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [324]
[290]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&) [290]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [318]
[291]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [291]
                0.00    0.00       1/3           tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [245]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [319]
[292]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&) [292]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [320]
[293]    0.0    0.00    0.00       1         std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [293]
                0.00    0.00       1/3           tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [246]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [321]
[294]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&) [294]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [322]
[295]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [295]
                0.00    0.00       1/3           std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [247]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [323]
[296]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&) [296]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [325]
[297]    0.0    0.00    0.00       1         std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [297]
                0.00    0.00       1/3           std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [248]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [330]
[298]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&) [298]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [326]
[299]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [299]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [233]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [327]
[300]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&) [300]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [331]
[301]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [301]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [234]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [328]
[302]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&) [302]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [329]
[303]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [303]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [235]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [332]
[304]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&) [304]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [333]
[305]    0.0    0.00    0.00       1         std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [305]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [236]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [308]
[306]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [306]
                0.00    0.00       1/1           _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [367]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::ListManager(unsigned long) [271]
[307]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [307]
                0.00    0.00       1/1           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [344]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::ListManager::~ListManager() [272]
[308]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [308]
                0.00    0.00       1/1           _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [363]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [306]
                0.00    0.00       1/1           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const [283]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [311]
[309]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [309]
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [366]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [276]
[310]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [310]
                0.00    0.00       1/1           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [345]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::rc::PoolManager::~PoolManager() [277]
[311]    0.0    0.00    0.00       1         std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [311]
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [362]
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [309]
                0.00    0.00       1/1           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const [284]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [314]
[312]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [312]
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [368]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::ProgressAssurance::ProgressAssurance(int) [269]
[313]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [313]
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [346]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::ProgressAssurance::~ProgressAssurance() [270]
[314]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [314]
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [364]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [312]
                0.00    0.00       1/1           std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const [285]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [317]
[315]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [315]
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [369]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::HazardPointer(int) [273]
[316]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [316]
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [347]
-----------------------------------------------
                0.00    0.00       1/1           tervel::util::memory::hp::HazardPointer::~HazardPointer() [274]
[317]    0.0    0.00    0.00       1         std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [317]
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [365]
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [315]
                0.00    0.00       1/1           std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const [286]
-----------------------------------------------
                0.00    0.00       1/1           std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [344]
[318]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [318]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [233]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [326]
                0.00    0.00       1/3           tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [245]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [291]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [355]
[319]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [319]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&) [292]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [345]
[320]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [320]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [234]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [331]
                0.00    0.00       1/3           tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [246]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [293]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [356]
[321]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [321]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&) [294]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [346]
[322]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [322]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [235]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [329]
                0.00    0.00       1/3           std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [247]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [295]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [357]
[323]    0.0    0.00    0.00       1         std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [323]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&) [296]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&) [354]
[324]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [324]
                0.00    0.00       1/1           std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&) [290]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [347]
[325]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [325]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [236]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [333]
                0.00    0.00       1/3           std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [248]
                0.00    0.00       1/1           std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [297]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [318]
[326]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [326]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [223]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [233]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [299]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE [359]
[327]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [327]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&) [300]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&) [360]
[328]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [328]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&) [302]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [322]
[329]    0.0    0.00    0.00       1         std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [329]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [223]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [235]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [303]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&) [358]
[330]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [330]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&) [298]
-----------------------------------------------
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [320]
[331]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [331]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [234]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [223]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [301]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE [361]
[332]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [332]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&) [304]
-----------------------------------------------
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [325]
[333]    0.0    0.00    0.00       1         _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [333]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [236]
                0.00    0.00       1/4           std::_Tuple_impl<2ul>::_Tuple_impl() [223]
                0.00    0.00       1/1           std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [305]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[334]    0.0    0.00    0.00       1         void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [334]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [337]
[335]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [335]
                0.00    0.00       1/1           std::allocator<std::thread>::allocator() [288]
-----------------------------------------------
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [338]
[336]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [336]
                0.00    0.00       1/1           std::allocator<std::thread>::~allocator() [289]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::vector() [352]
[337]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [337]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [335]
-----------------------------------------------
                0.00    0.00       1/1           std::vector<std::thread, std::allocator<std::thread> >::~vector() [353]
[338]    0.0    0.00    0.00       1         std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [338]
                0.00    0.00       1/5           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [210]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [336]
-----------------------------------------------
                0.00    0.00       1/1           run_enqueue_dequeue(int, TestObject*) [5]
[339]    0.0    0.00    0.00       1         std::__atomic_base<int>::fetch_add(int, std::memory_order) [339]
-----------------------------------------------
                0.00    0.00       1/1           std::atomic<int>::atomic(int) [348]
[340]    0.0    0.00    0.00       1         std::__atomic_base<int>::__atomic_base(int) [340]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace() [257]
[341]    0.0    0.00    0.00       1         std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [341]
-----------------------------------------------
                0.00    0.00       1/1           void std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [590]
[342]    0.0    0.00    0.00       1         std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [342]
                0.00    0.00       2/2           void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [250]
-----------------------------------------------
                0.00    0.00       1/1           std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy() [593]
[343]    0.0    0.00    0.00       1         std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [343]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [280]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [307]
[344]    0.0    0.00    0.00       1         std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [344]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&) [233]
                0.00    0.00       1/3           tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&) [245]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [318]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [310]
[345]    0.0    0.00    0.00       1         _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_ [345]
                0.00    0.00       1/3           tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&) [246]
                0.00    0.00       1/4           std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&) [234]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [320]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [313]
[346]    0.0    0.00    0.00       1         _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_ [346]
                0.00    0.00       1/4           std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&) [235]
                0.00    0.00       1/3           std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&) [247]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [322]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [316]
[347]    0.0    0.00    0.00       1         _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_ [347]
                0.00    0.00       1/3           std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&) [248]
                0.00    0.00       1/4           std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&) [236]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [325]
-----------------------------------------------
                0.00    0.00       1/1           TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [268]
[348]    0.0    0.00    0.00       1         std::atomic<int>::atomic(int) [348]
                0.00    0.00       1/1           std::__atomic_base<int>::__atomic_base(int) [340]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[349]    0.0    0.00    0.00       1         std::chrono::duration<long, std::ratio<1l, 1l> >::duration<int, void>(int const&) [349]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[350]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::end() [350]
                0.00    0.00       1/2           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [251]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[351]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::begin() [351]
                0.00    0.00       1/2           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [251]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[352]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::vector() [352]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [337]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[353]    0.0    0.00    0.00       1         std::vector<std::thread, std::allocator<std::thread> >::~vector() [353]
                0.00    0.00       1/9           std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [117]
                0.00    0.00       1/5           void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&) [219]
                0.00    0.00       1/1           std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [338]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [363]
[354]    0.0    0.00    0.00       1         std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&) [354]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [324]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [362]
[355]    0.0    0.00    0.00       1         _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [355]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [319]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [364]
[356]    0.0    0.00    0.00       1         _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [356]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [321]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [365]
[357]    0.0    0.00    0.00       1         std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [357]
                0.00    0.00       1/1           std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [323]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [367]
[358]    0.0    0.00    0.00       1         std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&) [358]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [330]
-----------------------------------------------
                0.00    0.00       1/1           std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [366]
[359]    0.0    0.00    0.00       1         _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE [359]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [327]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [368]
[360]    0.0    0.00    0.00       1         std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&) [360]
                0.00    0.00       1/1           std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [328]
-----------------------------------------------
                0.00    0.00       1/1           _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [369]
[361]    0.0    0.00    0.00       1         _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE [361]
                0.00    0.00       1/1           _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [332]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [311]
[362]    0.0    0.00    0.00       1         std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [362]
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [355]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [308]
[363]    0.0    0.00    0.00       1         _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [363]
                0.00    0.00       1/1           std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&) [354]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [314]
[364]    0.0    0.00    0.00       1         _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [364]
                0.00    0.00       1/1           _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE [356]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [317]
[365]    0.0    0.00    0.00       1         _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [365]
                0.00    0.00       1/1           std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [357]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [309]
[366]    0.0    0.00    0.00       1         std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&) [366]
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE [359]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [306]
[367]    0.0    0.00    0.00       1         _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [367]
                0.00    0.00       1/1           std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&) [358]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [312]
[368]    0.0    0.00    0.00       1         _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_ [368]
                0.00    0.00       1/1           std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&) [360]
-----------------------------------------------
                0.00    0.00       1/1           std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [315]
[369]    0.0    0.00    0.00       1         _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_ [369]
                0.00    0.00       1/1           _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE [361]
-----------------------------------------------
                0.00    0.00       1/1           main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [371]
[370]    0.0    0.00    0.00       1         std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&) [370]
-----------------------------------------------
                0.00    0.00       1/1           main [12]
[371]    0.0    0.00    0.00       1         main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) [371]
                0.00    0.00       9/9           bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [116]
                0.00    0.00       8/8           main::{lambda(std::thread&)#1}::operator()(std::thread&) const [135]
                0.00    0.00       8/8           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const [121]
                0.00    0.00       8/8           __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++() [120]
                0.00    0.00       1/1           std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&) [370]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.


Index by function name

 [261] _GLOBAL__sub_I__ZN3fLI17FLAGS_num_threadsE (main_buffer.cc) [291] std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_Head_base<tervel::util::memory::hp::ListManager::ManagedPool*&, void>(tervel::util::memory::hp::ListManager::ManagedPool*&) [170] std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, unsigned long)
 [262] _GLOBAL__sub_I__ZN6tervel4util6memory2rc11PoolManager13allocate_poolEv (pool_manager.cc) [292] std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>&) [171] _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISH_JKSE_SC_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSI_PT_DpOSM_
 [263] _GLOBAL__sub_I__ZN6tervel4util6memory2rc14DescriptorPool15free_descriptorEPNS0_10DescriptorEb (descriptor_pool.cc) [293] std::_Head_base<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, false>::_Head_base<tervel::util::memory::rc::PoolManager::ManagedPool*&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*&) [131] std::enable_if<std::allocator_traits<std::allocator<std::thread> >::__maxsize_helper<std::allocator<std::thread> const>::value, unsigned long>::type std::allocator_traits<std::allocator<std::thread> >::_S_max_size<std::allocator<std::thread> const>(std::allocator<std::thread> const&)
   [5] run_enqueue_dequeue(int, TestObject*) [294] std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>&) [211] _ZNSt16allocator_traitsISaISt6threadEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_
   [2] run(int, tervel::Tervel*, TestObject*) [295] std::_Head_base<0ul, std::atomic<tervel::util::OpRecord*>*, false>::_Head_base<std::atomic<tervel::util::OpRecord*>*&, void>(std::atomic<tervel::util::OpRecord*>*&) [132] std::allocator_traits<std::allocator<std::thread> >::max_size(std::allocator<std::thread> const&)
 [264] __static_initialization_and_destruction_0(int, int) (main_buffer.cc) [296] std::_Head_base<0ul, std::atomic<void*>*, false>::_M_head(std::_Head_base<0ul, std::atomic<void*>*, false>&) [212] _ZNSt16allocator_traitsISaISt6threadEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_
 [265] __static_initialization_and_destruction_0(int, int) (descriptor_pool.cc) [297] std::_Head_base<0ul, std::atomic<void*>*, false>::_Head_base<std::atomic<void*>*&, void>(std::atomic<void*>*&) [225] std::thread* std::__uninitialized_copy<false>::__uninit_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
 [266] __static_initialization_and_destruction_0(int, int) (pool_manager.cc) [298] std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>&) [172] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)
  [78] __gthread_equal(unsigned long, unsigned long) (gthr-default.h) [299] std::_Head_base<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&) [173] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::_Impl(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >)
 [136] __gthread_active_p() (gthr-default.h) [300] std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>&) [256] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::_Impl::~_Impl()
 [267] TestObject::atomic_add(int, int) [301] std::_Head_base<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, true>::_Head_base<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>, void>(std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&&) [174] _ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEESaISC_ELN9__gnu_cxx12_Lock_policyE2EEC2IJSB_EEESD_DpOT_
 [268] TestObject::TestObject(int, int, int, TestType, tervel::wf_ring_buffer::RingBuffer<long>*) [302] std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>&) [257] std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()
  [46] tervel::ThreadContext::delay_count(unsigned long) [303] std::_Head_base<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>, true>::_Head_base<std::default_delete<std::atomic<tervel::util::OpRecord*> []>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []>&&) [203] std::_Maybe_wrap_member_pointer<void (*)(int, tervel::Tervel*, TestObject*)>::__do_wrap(void (*&&)(int, tervel::Tervel*, TestObject*))
 [191] tervel::ThreadContext::get_thread_id() [304] std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_M_head(std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>&) [344] std::tuple<tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::tuple<tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>, void>(tervel::util::memory::hp::ListManager::ManagedPool*&, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&&)
  [47] tervel::ThreadContext::get_progress_assurance() [305] std::_Head_base<1ul, std::default_delete<std::atomic<void*> []>, true>::_Head_base<std::default_delete<std::atomic<void*> []>, void>(std::default_delete<std::atomic<void*> []>&&) [175] _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_
  [35] tervel::ThreadContext::ThreadContext(tervel::Tervel*) [100] std::_Head_base<1ul, int, false>::_M_head(std::_Head_base<1ul, int, false>&) [204] _ZNSt5tupleIJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC2IJS6_RiS2_S4_EvEEDpOT_
 [249] tervel::ThreadContext::~ThreadContext() [146] std::_Head_base<1ul, int, false>::_Head_base<int&, void>(int&) [345] _ZNSt5tupleIJPN6tervel4util6memory2rc11PoolManager11ManagedPoolESt14default_deleteIA_S5_EEEC1IRS6_S9_vEEOT_OT0_
   [8] tervel::wf_ring_buffer::RingBuffer<long>::lf_dequeue(long*) [147] std::_Head_base<1ul, int, false>::_Head_base<int, void>(int&&) [346] _ZNSt5tupleIJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEEC2IRS6_S9_vEEOT_OT0_
   [6] tervel::wf_ring_buffer::RingBuffer<long>::lf_enqueue(long) [101] std::_Head_base<2ul, tervel::Tervel*, false>::_M_head(std::_Head_base<2ul, tervel::Tervel*, false>&) [347] _ZNSt5tupleIJPSt6atomicIPvESt14default_deleteIA_S2_EEEC2IRS3_S6_vEEOT_OT0_
  [13] tervel::wf_ring_buffer::RingBuffer<long>::get_position(long) [93] std::_Head_base<2ul, tervel::Tervel*, false>::_Head_base<tervel::Tervel*, void>(tervel::Tervel*&&) [18] std::atomic<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  [21] tervel::wf_ring_buffer::RingBuffer<long>::next_head_seq() [108] std::_Head_base<3ul, TestObject*, false>::_M_head(std::_Head_base<3ul, TestObject*, false>&) [30] std::atomic<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order)
  [20] tervel::wf_ring_buffer::RingBuffer<long>::next_tail_seq() [94] std::_Head_base<3ul, TestObject*, false>::_Head_base<TestObject*, void>(TestObject*&&) [56] std::atomic<tervel::wf_ring_buffer::Node<long>*>::atomic()
   [9] tervel::wf_ring_buffer::RingBuffer<long>::dequeue(long*) [148] std::shared_ptr<std::thread::_Impl_base>::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&&) [54] std::atomic<tervel::wf_ring_buffer::BufferOp<long>*>::atomic(tervel::wf_ring_buffer::BufferOp<long>*)
   [7] tervel::wf_ring_buffer::RingBuffer<long>::enqueue(long) [126] std::shared_ptr<std::thread::_Impl_base>::~shared_ptr() [89] std::atomic<tervel::util::memory::rc::PoolElement*>::atomic(tervel::util::memory::rc::PoolElement*)
  [15] tervel::wf_ring_buffer::RingBuffer<long>::is_full() [149] _ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEC1ISaISC_EJSB_EEESt19_Sp_make_shared_tagRKT_DpOT0_ [133] std::atomic<tervel::util::OpRecord*>::atomic()
  [17] tervel::wf_ring_buffer::RingBuffer<long>::is_empty() [194] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~shared_ptr() [90] std::atomic<void*>::atomic()
  [26] tervel::wf_ring_buffer::RingBuffer<long>::RingBuffer(int) [306] std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::get_deleter() [258] std::atomic<bool>::atomic(bool)
  [14] tervel::wf_ring_buffer::Node<long>::seq() [307] std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::unique_ptr(tervel::util::memory::hp::ListManager::ManagedPool*) [348] std::atomic<int>::atomic(int)
  [59] tervel::wf_ring_buffer::Node<long>::val() [308] std::unique_ptr<tervel::util::memory::hp::ListManager::ManagedPool [], std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::~unique_ptr() [86] std::atomic<long>::atomic(long)
  [28] tervel::wf_ring_buffer::Node<long>::Node(long, long) [309] std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::get_deleter() [243] std::atomic<unsigned long>::atomic(unsigned long)
  [58] tervel::wf_ring_buffer::ElemNode<long>::is_ElemNode() [310] std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::unique_ptr(tervel::util::memory::rc::PoolManager::ManagedPool*) [349] std::chrono::duration<long, std::ratio<1l, 1l> >::duration<int, void>(int const&)
  [32] tervel::wf_ring_buffer::ElemNode<long>::ElemNode(long, long, tervel::wf_ring_buffer::BufferOp<long>*) [311] std::unique_ptr<tervel::util::memory::rc::PoolManager::ManagedPool [], std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::~unique_ptr() [176] std::thread::_Impl_base::_Impl_base()
  [57] tervel::wf_ring_buffer::EmptyNode<long>::is_EmptyNode() [312] std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::get_deleter() [259] std::thread::_Impl_base::~_Impl_base()
  [31] tervel::wf_ring_buffer::EmptyNode<long>::EmptyNode(long) [313] std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::unique_ptr(std::atomic<tervel::util::OpRecord*>*) [177] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::thread::_M_make_routine<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
  [27] tervel::util::Descriptor::Descriptor() [314] std::unique_ptr<std::atomic<tervel::util::OpRecord*> [], std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::~unique_ptr() [65] std::thread::id::id()
  [44] tervel::util::ProgressAssurance::check_for_announcement(tervel::util::ProgressAssurance*) [315] std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::get_deleter() [103] std::thread::swap(std::thread&)
  [45] tervel::util::ProgressAssurance::p_check_for_announcement() [316] std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::unique_ptr(std::atomic<void*>*) [178] std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::_Impl(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
 [269] tervel::util::ProgressAssurance::ProgressAssurance(int) [317] std::unique_ptr<std::atomic<void*> [], std::default_delete<std::atomic<void*> []> >::~unique_ptr() [260] std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::~_Impl()
 [270] tervel::util::ProgressAssurance::~ProgressAssurance() [150] std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>::_Mutex_base() [205] std::thread::thread<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
 [237] tervel::util::memory::hp::ElementList::ElementList(tervel::util::memory::hp::ListManager*) [115] std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [104] std::thread::thread(std::thread&&)
 [118] tervel::util::memory::hp::ListManager::ManagedPool::ManagedPool() [151] std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&) [80] std::thread::~thread()
 [238] tervel::util::memory::hp::ListManager::allocate_list() [195] std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>::_Tuple_impl<void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>, void>(void (*)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*>&&, (void&&)...) [206] void std::vector<std::thread, std::allocator<std::thread> >::emplace_back<std::thread>(std::thread&&)
 [271] tervel::util::memory::hp::ListManager::ListManager(unsigned long) [318] std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, void>(tervel::util::memory::hp::ListManager::ManagedPool*<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&, (void&&)...) [226] _ZNSt6vectorISt6threadSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_
 [272] tervel::util::memory::hp::ListManager::~ListManager() [319] std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [350] std::vector<std::thread, std::allocator<std::thread> >::end()
 [273] tervel::util::memory::hp::HazardPointer::HazardPointer(int) [320] std::_Tuple_impl<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_Tuple_impl<tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, void>(tervel::util::memory::rc::PoolManager::ManagedPool*<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&, (void&&)...) [351] std::vector<std::thread, std::allocator<std::thread> >::begin()
 [274] tervel::util::memory::hp::HazardPointer::~HazardPointer() [321] std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [179] std::vector<std::thread, std::allocator<std::thread> >::push_back(std::thread&&)
 [275] tervel::util::memory::hp::Element::Element() [322] std::_Tuple_impl<0ul, std::atomic<tervel::util::OpRecord*>*, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, void>(std::atomic<tervel::util::OpRecord*>*<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&, (void&&)...) [352] std::vector<std::thread, std::allocator<std::thread> >::vector()
  [85] tervel::util::memory::rc::PoolElement::next(tervel::util::memory::rc::PoolElement*) [323] std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >::_M_head(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&) [353] std::vector<std::thread, std::allocator<std::thread> >::~vector()
 [107] tervel::util::memory::rc::PoolElement::Header::Header() [152] _ZNSt11_Tuple_implILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EEC1EOS7_ [180] _ZSt10_ConstructISt6threadIS0_EEvPT_DpOT0_
  [63] tervel::util::memory::rc::PoolElement::header() [324] _ZNSt11_Tuple_implILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEE7_M_headERSA_ [73] std::thread* std::__addressof<std::thread>(std::thread&)
  [33] tervel::util::memory::rc::PoolElement::PoolElement(tervel::util::memory::rc::PoolElement*) [325] _ZNSt11_Tuple_implILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEEC1IRS3_JS6_EvEEOT_DpOT0_ [181] _ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEJSB_EESt10shared_ptrIT_EDpOT0_
 [119] tervel::util::memory::rc::PoolManager::ManagedPool::ManagedPool() [326] std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::_Tuple_impl<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>, void>(std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []><>&&, (void&&)...) [244] std::__add_ref<void (*)(int, tervel::Tervel*, TestObject*)>::type std::__get_helper<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<0ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>&)
  [34] tervel::util::memory::rc::PoolManager::allocate_pool() [327] std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >&) [354] std::__add_ref<tervel::util::memory::hp::ListManager::ManagedPool*>::type std::__get_helper<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::_Tuple_impl<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >&)
 [276] tervel::util::memory::rc::PoolManager::PoolManager(unsigned long) [328] std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >&) [355] _ZSt12__get_helperILm0EPN6tervel4util6memory2rc11PoolManager11ManagedPoolEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
 [277] tervel::util::memory::rc::PoolManager::~PoolManager() [329] std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::_Tuple_impl<std::default_delete<std::atomic<tervel::util::OpRecord*> []><>, void>(std::default_delete<std::atomic<tervel::util::OpRecord*> []><>&&, (void&&)...) [356] _ZSt12__get_helperILm0EPSt6atomicIPN6tervel4util8OpRecordEEJSt14default_deleteIA_S5_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSB_DpT1_EE
  [52] tervel::util::memory::rc::unmark_first(void*) [153] std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_M_tail(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&) [357] std::__add_ref<std::atomic<void*>*>::type std::__get_helper<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >(std::_Tuple_impl<0ul, std::atomic<void*>*, std::default_delete<std::atomic<void*> []> >&)
  [36] tervel::util::memory::rc::DescriptorPool::reserve(int) [154] std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&&) [358] std::__add_ref<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type std::__get_helper<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>(std::_Tuple_impl<1ul, std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>>&)
  [37] tervel::util::memory::rc::DescriptorPool::DescriptorPool(tervel::util::memory::rc::PoolManager*, int, unsigned long) [330] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2hp11ListManager11ManagedPoolEEEE7_M_headERS9_ [359] _ZSt12__get_helperILm1ESt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJSA_DpT1_EE
  [50] tervel::util::memory::rc::free_descriptor(tervel::util::Descriptor*, bool) [331] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_N6tervel4util6memory2rc11PoolManager11ManagedPoolEEEEC1IS8_JEvEEOT_DpOT0_ [360] std::__add_ref<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type std::__get_helper<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>(std::_Tuple_impl<1ul, std::default_delete<std::atomic<tervel::util::OpRecord*> []>>&)
  [51] tervel::util::memory::rc::watch(tervel::util::Descriptor*, std::atomic<void*>*, void*) [332] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEE7_M_headERS6_ [361] _ZSt12__get_helperILm1ESt14default_deleteIA_St6atomicIPvEEJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS7_DpT1_EE
  [49] tervel::util::memory::rc::unwatch(tervel::util::Descriptor*) [333] _ZNSt11_Tuple_implILm1EJSt14default_deleteIA_St6atomicIPvEEEEC2IS5_JEvEEOT_DpOT0_ [213] std::__add_ref<int>::type std::__get_helper<1ul, int, tervel::Tervel*, TestObject*>(std::_Tuple_impl<1ul, int, tervel::Tervel*, TestObject*>&)
 [192] tervel::Tervel::get_thread_id() [109] _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEE7_M_headERS5_ [227] _ZSt12__get_helperILm2EPN6tervel6TervelEJP10TestObjectEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS6_DpT1_EE
 [278] tervel::Tervel::Tervel(unsigned long) [196] _ZNSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEC2IRiJS2_S4_EvEEOT_DpOT0_ [214] _ZSt12__get_helperILm3EP10TestObjectJEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EJS3_DpT1_EE
 [279] tervel::Tervel::~Tervel() [223] std::_Tuple_impl<2ul>::_Tuple_impl() [207] std::_Bind_simple_helper<void (&)(int, tervel::Tervel*, TestObject*)<int&, tervel::Tervel*, TestObject*> >::__type std::__bind_simple<void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*, TestObject*>(void (&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&)
 [250] void __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [110] std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_M_head(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&) [182] std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > std::allocate_shared<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&)
 [137] _ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEEE9constructISD_JSC_EEEvPT_DpOT0_ [155] std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl(std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>&&) [228] std::thread* std::uninitialized_copy<std::move_iterator<std::thread*>, std::thread*>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*)
  [74] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator(__gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [197] std::_Tuple_impl<2ul, tervel::Tervel*, TestObject*>::_Tuple_impl<tervel::Tervel*<TestObject*>, void>(tervel::Tervel*<TestObject*>&&, (void&&)...) [229] std::thread* std::__uninitialized_copy_a<std::move_iterator<std::thread*>, std::thread*, std::thread>(std::move_iterator<std::thread*>, std::move_iterator<std::thread*>, std::thread*, std::allocator<std::thread>&)
 [138] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::new_allocator() [156] _ZNSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEE7_M_tailERS5_ [48] std::__cmpexch_failure_order(std::memory_order)
  [70] __gnu_cxx::new_allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~new_allocator() [157] std::_Tuple_impl<3ul, TestObject*>::_M_tail(std::_Tuple_impl<3ul, TestObject*>&) [183] void std::__enable_shared_from_this_helper<(__gnu_cxx::_Lock_policy)2>(std::__shared_count<(__gnu_cxx::_Lock_policy)2> const&, ...)
 [280] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::deallocate(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [111] _ZNSt11_Tuple_implILm3EJP10TestObjectEE7_M_headERS2_ [134] std::move_iterator<std::thread*> std::__make_move_if_noexcept_iterator<std::thread*, std::move_iterator<std::thread*> >(std::thread*)
 [239] void __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [158] _ZNSt11_Tuple_implILm3EJP10TestObjectEEC1EOS2_ [230] std::thread* std::__uninitialized_move_if_noexcept_a<std::thread*, std::thread*, std::allocator<std::thread> >(std::thread*, std::thread*, std::thread*, std::allocator<std::thread>&)
 [139] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) [198] _ZNSt11_Tuple_implILm3EJP10TestObjectEEC2IS1_JEvEEOT_DpOT0_ [362] std::__add_ref<std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<0ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<0ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
 [140] _ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS7_S9_EEEESaISE_ELNS_12_Lock_policyE2EEE9constructISH_IKSF_SD_EEEvPT_DpOT0_ [199] _ZNSt11_Tuple_implILm4EJEEC2Ev [215] _ZSt3getILm0EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [114] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::new_allocator() [253] std::atomic_bool::atomic_bool(bool) [363] _ZSt3getILm0EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
  [96] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~new_allocator() [334] void std::this_thread::sleep_for<long, std::ratio<1l, 1l> >(std::chrono::duration<long, std::ratio<1l, 1l> > const&) [364] _ZSt3getILm0EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
 [220] __gnu_cxx::new_allocator<std::thread>::deallocate(std::thread*, unsigned long) [3] _ZNSt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EE9_M_invokeIJLm0ELm1ELm2EEEEvSt12_Index_tupleIJXspT_EEE [365] _ZSt3getILm0EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [221] __gnu_cxx::new_allocator<std::thread>::allocate(unsigned long, void const*) [159] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple(std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [216] std::__add_ref<std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >::type>::type std::get<1ul, void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*>(std::tuple_element<1ul, std::tuple<void (*)(int, tervel::Tervel*, TestObject*), int, tervel::Tervel*, TestObject*> >&)
 [208] _ZN9__gnu_cxx13new_allocatorISt6threadE9constructIS1_IS1_EEEvPT_DpOT0_ [200] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::_Bind_simple<int&, tervel::Tervel*, TestObject*, void>(void (*&&)(int, tervel::Tervel*, TestObject*), int&, tervel::Tervel*&&, TestObject*&&) [366] std::__add_ref<std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >::type>::type std::get<1ul, tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::tuple_element<1ul, std::tuple<tervel::util::memory::rc::PoolManager::ManagedPool*, std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> > >&)
 [281] __gnu_cxx::new_allocator<std::thread>::new_allocator() [1] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>::operator()() [367] _ZSt3getILm1EJPN6tervel4util6memory2hp11ListManager11ManagedPoolESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
 [282] __gnu_cxx::new_allocator<std::thread>::~new_allocator() [209] void std::_Destroy_aux<false>::__destroy<std::thread*>(std::thread*, std::thread*) [368] _ZSt3getILm1EJPSt6atomicIPN6tervel4util8OpRecordEESt14default_deleteIA_S5_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSF_
 [251] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::__normal_iterator(std::thread* const&) [224] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_allocate(unsigned long) [369] _ZSt3getILm1EJPSt6atomicIPvESt14default_deleteIA_S2_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [120] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator++() [335] std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::_Vector_impl() [231] _ZSt3getILm2EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [141] __gnu_cxx::__exchange_and_add(int volatile*, int) (atomicity.h) [336] std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_impl::~_Vector_impl() [217] _ZSt3getILm3EJPFviPN6tervel6TervelEP10TestObjectEiS2_S4_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeEE4typeERSC_
 [193] __gnu_cxx::__exchange_and_add_dispatch(int*, int) (atomicity.h) [210] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_deallocate(std::thread*, unsigned long) [232] unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&)
 [116] bool __gnu_cxx::operator!=<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&, __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > > const&) [117] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() [184] std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>::type&& std::move<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&>(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&)
 [142] __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::max_size() const [337] std::_Vector_base<std::thread, std::allocator<std::thread> >::_Vector_base() [67] std::remove_reference<std::thread::id&>::type&& std::move<std::thread::id&>(std::thread::id&)
  [97] __gnu_cxx::new_allocator<std::thread>::max_size() const [338] std::_Vector_base<std::thread, std::allocator<std::thread> >::~_Vector_base() [185] std::remove_reference<void (*&)(int, tervel::Tervel*, TestObject*)>::type&& std::move<void (*&)(int, tervel::Tervel*, TestObject*)>(void (*&)(int, tervel::Tervel*, TestObject*))
  [84] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::base() const [160] std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, void>(std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>&&) [186] std::remove_reference<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>::type&& std::move<std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&>(std::shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&)
 [121] __gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >::operator*() const [127] std::__shared_ptr<std::thread::_Impl_base, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [187] _ZSt4moveIRSt11_Tuple_implILm1EJiPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
  [25] std::atomic_bool::load(std::memory_order) const [161] std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [188] _ZSt4moveIRSt11_Tuple_implILm2EJPN6tervel6TervelEP10TestObjectEEEONSt16remove_referenceIT_E4typeEOS9_
 [122] std::_Vector_base<std::thread, std::allocator<std::thread> >::_M_get_Tp_allocator() const [201] std::__shared_ptr<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() [189] std::remove_reference<std::_Tuple_impl<3ul, TestObject*>&>::type&& std::move<std::_Tuple_impl<3ul, TestObject*>&>(std::_Tuple_impl<3ul, TestObject*>&)
  [23] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [19] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::compare_exchange_strong(tervel::wf_ring_buffer::Node<long>*&, tervel::wf_ring_buffer::Node<long>*, std::memory_order, std::memory_order) [190] _ZSt4moveIRSt11_Tuple_implILm4EJEEEONSt16remove_referenceIT_E4typeEOS4_
  [24] std::__atomic_base<bool>::load(std::memory_order) const [29] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::store(tervel::wf_ring_buffer::Node<long>*, std::memory_order) [82] std::remove_reference<std::thread&>::type&& std::move<std::thread&>(std::thread&)
 [240] std::__atomic_base<int>::load(std::memory_order) const [55] std::__atomic_base<tervel::wf_ring_buffer::Node<long>*>::__atomic_base() [370] std::remove_reference<main::{lambda(std::thread&)#1}&>::type&& std::move<main::{lambda(std::thread&)#1}&>(std::remove_reference&&) (move.h)
  [10] std::__atomic_base<long>::load(std::memory_order) const [53] std::__atomic_base<tervel::wf_ring_buffer::BufferOp<long>*>::__atomic_base(tervel::wf_ring_buffer::BufferOp<long>*) [105] void std::swap<std::thread::id>(std::thread::id&, std::thread::id&)
  [11] std::__atomic_base<long>::operator long() const [87] std::__atomic_base<tervel::util::memory::rc::PoolElement*>::__atomic_base(tervel::util::memory::rc::PoolElement*) [77] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&& std::forward<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>(std::remove_reference<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const>::type&)
 [252] std::__atomic_base<unsigned long>::load(std::memory_order) const [128] std::__atomic_base<tervel::util::OpRecord*>::__atomic_base() [61] TestObject*&& std::forward<TestObject*>(std::remove_reference<TestObject*>::type&)
  [71] std::move_iterator<std::thread*>::base() const [88] std::__atomic_base<void*>::__atomic_base() [66] void (*&&std::forward<void (*)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (*)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
 [143] std::move_iterator<std::thread*>::operator*() const [254] std::__atomic_base<bool>::__atomic_base(bool) [62] tervel::Tervel*&& std::forward<tervel::Tervel*>(std::remove_reference<tervel::Tervel*>::type&)
 [123] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&) const [339] std::__atomic_base<int>::fetch_add(int, std::memory_order) [106] void (&std::forward<void (&)(int, tervel::Tervel*, TestObject*)>(std::remove_reference<void (&)(int, tervel::Tervel*, TestObject*)>::type&))(int, tervel::Tervel*, TestObject*)
 [283] std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>::operator()(tervel::util::memory::hp::ListManager::ManagedPool*) const [340] std::__atomic_base<int>::__atomic_base(int) [245] tervel::util::memory::hp::ListManager::ManagedPool*& std::forward<tervel::util::memory::hp::ListManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::hp::ListManager::ManagedPool*&>::type&)
 [284] std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>::operator()(tervel::util::memory::rc::PoolManager::ManagedPool*) const [16] std::__atomic_base<long>::fetch_add(long, std::memory_order) [246] tervel::util::memory::rc::PoolManager::ManagedPool*& std::forward<tervel::util::memory::rc::PoolManager::ManagedPool*&>(std::remove_reference<tervel::util::memory::rc::PoolManager::ManagedPool*&>::type&)
 [285] std::default_delete<std::atomic<tervel::util::OpRecord*> []>::operator()(std::atomic<tervel::util::OpRecord*>*) const [102] std::__atomic_base<long>::__atomic_base(long) [247] std::atomic<tervel::util::OpRecord*>*& std::forward<std::atomic<tervel::util::OpRecord*>*&>(std::remove_reference<std::atomic<tervel::util::OpRecord*>*&>::type&)
 [286] std::default_delete<std::atomic<void*> []>::operator()(std::atomic<void*>*) const [129] std::__atomic_base<unsigned long>::fetch_add(unsigned long, std::memory_order) [248] std::atomic<void*>*& std::forward<std::atomic<void*>*&>(std::remove_reference<std::atomic<void*>*&>::type&)
  [22] std::atomic<tervel::wf_ring_buffer::Node<long>*>::load(std::memory_order) const [241] std::__atomic_base<unsigned long>::__atomic_base(unsigned long) [64] int& std::forward<int&>(std::remove_reference<int&>::type&)
 [287] std::chrono::duration<long, std::ratio<1l, 1l> >::count() const [130] std::move_iterator<std::thread*>::move_iterator(std::thread*) [60] std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&& std::forward<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::remove_reference<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >::type&)
  [75] std::thread::joinable() const [162] std::move_iterator<std::thread*>::operator++() [233] std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::hp::ListManager::ManagedPool []> >::type&)
 [222] std::vector<std::thread, std::allocator<std::thread> >::_M_check_len(unsigned long, char const*) const [163] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::_M_swap(std::__shared_count<(__gnu_cxx::_Lock_policy)2>&) [234] std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []>&& std::forward<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >(std::remove_reference<std::default_delete<tervel::util::memory::rc::PoolManager::ManagedPool []> >::type&)
  [79] std::vector<std::thread, std::allocator<std::thread> >::size() const [164] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count() [235] std::default_delete<std::atomic<tervel::util::OpRecord*> []>&& std::forward<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >(std::remove_reference<std::default_delete<std::atomic<tervel::util::OpRecord*> []> >::type&)
 [124] std::vector<std::thread, std::allocator<std::thread> >::max_size() const [165] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >(std::_Sp_make_shared_tag, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&, std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)>&&) [236] std::default_delete<std::atomic<void*> []>&& std::forward<std::default_delete<std::atomic<void*> []> >(std::remove_reference<std::default_delete<std::atomic<void*> []> >::type&)
 [144] std::type_info::operator==(std::type_info const&) const [95] std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() [68] std::thread&& std::forward<std::thread>(std::remove_reference<std::thread>::type&)
  [76] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [202] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() [83] int&& std::forward<int>(std::remove_reference<int>::type&)
 [145] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::allocator() [166] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_Sp_counted_base() [218] void std::_Destroy<std::thread*>(std::thread*, std::thread*)
  [72] std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::~allocator() [341] std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::~_Sp_counted_base() [219] void std::_Destroy<std::thread*, std::thread>(std::thread*, std::thread*, std::allocator<std::thread>&)
 [125] std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > const&) [342] std::enable_if<std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::__destroy_helper<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >::value, void>::type std::allocator_traits<std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > > >::_S_destroy<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >(std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >&, std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >*) [91] void std::_Destroy<std::thread>(std::thread*)
  [98] std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::~allocator() [167] _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE12_S_constructISC_JSB_EEENSt9enable_ifIXsrNSE_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSD_PSI_DpOSJ_ [371] main::{lambda(std::thread&)#1} std::for_each<__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}>(__gnu_cxx::__normal_iterator<std::thread*, std::vector<std::thread, std::allocator<std::thread> > >, main::{lambda(std::thread&)#1}, main::{lambda(std::thread&)#1}) (stl_algo.h)
 [288] std::allocator<std::thread>::allocator() [168] _ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS5_S7_EEEEEE9constructISC_JSB_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSD_PT_DpOSG_ [112] bool std::operator==<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
 [289] std::allocator<std::thread>::~allocator() [242] std::enable_if<std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::__destroy_helper<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >::value, void>::type std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::_S_destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [81] std::operator==(std::thread::id, std::thread::id)
  [99] std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_M_head(std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>&) [343] std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::deallocate(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*, unsigned long) [113] bool std::operator!=<std::thread*>(std::move_iterator<std::thread*> const&, std::move_iterator<std::thread*> const&)
  [92] std::_Head_base<0ul, void (*)(int, tervel::Tervel*, TestObject*), false>::_Head_base<void (*)(int, tervel::Tervel*, TestObject*), void>(void (*&&)(int, tervel::Tervel*, TestObject*)) [169] _ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFPFviPN6tervel6TervelEP10TestObjectEiS6_S8_EEEESaISD_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISH_JKSE_SC_EEENSt9enable_ifIXsrNSJ_18__construct_helperIT_JDpT0_EEE5valueEvE4typeERSI_PSO_DpOSP_ [135] main::{lambda(std::thread&)#1}::operator()(std::thread&) const (main_buffer.cc)
 [290] std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>::_M_head(std::_Head_base<0ul, tervel::util::memory::hp::ListManager::ManagedPool*, false>&) [255] void std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> > >::destroy<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >(std::allocator<std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2> >&, std::_Sp_counted_ptr_inplace<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> >, std::allocator<std::thread::_Impl<std::_Bind_simple<void (*(int, tervel::Tervel*, TestObject*))(int, tervel::Tervel*, TestObject*)> > >, (__gnu_cxx::_Lock_policy)2>*) [69] operator new(unsigned long, void*)
